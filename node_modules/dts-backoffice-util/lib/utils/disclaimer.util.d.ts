import { PoDisclaimer, PoI18nPipe, PoCheckboxGroupOption, PoMultiselectOption } from '@po-ui/ng-components';
import { IFilterRangeCharacter, IFilterRangeNumber, IFilterRangeDate } from '../../lib/interfaces/filter-range.interface';
import { PoNotificationService } from '@po-ui/ng-components';
export declare class DisclaimerUtil {
    poNotification: PoNotificationService;
    poI18nPipe: PoI18nPipe;
    literals: any;
    constructor(poNotification: PoNotificationService, poI18nPipe: PoI18nPipe, literals: Object);
    makeDisclaimer(property: string, value: string, hideClose?: boolean, tradValue?: boolean, vldBlank?: boolean): PoDisclaimer;
    makeDisclaimerFromNumber(property: string, value: number, hideClose?: boolean, vldBlank?: boolean): PoDisclaimer;
    makeDisclaimerFromBoolean(property: string, value: boolean, hideClose?: boolean): PoDisclaimer;
    makeDisclaimerFromDate(property: string, value: Date, hideClose?: boolean): PoDisclaimer;
    makeDisclaimerFromMultiSelect(property: string, value: Array<any>, length?: number, hideClose?: boolean, tradValue?: boolean): PoDisclaimer;
    makeDisclaimerFromCheckboxGroup(property: string, value: Array<string>, length?: number, hideClose?: boolean): PoDisclaimer;
    makeDisclaimerFromRangeCharacter(property: string, value: IFilterRangeCharacter, hideClose?: boolean, validateEqual?: boolean): PoDisclaimer;
    makeDisclaimerFromRangeNumber(property: string, value: IFilterRangeNumber, hideClose?: boolean, validateEqual?: boolean): PoDisclaimer;
    makeDisclaimerFromRangeDate(property: string, value: IFilterRangeDate, hideClose?: boolean, validateEqual?: boolean): PoDisclaimer;
    atzCharFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: string): string;
    atzNumberFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: number): number;
    atzBooleanFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: boolean): boolean;
    atzDateFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: Date): Date;
    atzMultiSelectCharFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: Array<PoMultiselectOption>): Array<string>;
    atzMultiSelectNumberFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, defaultValue: Array<PoMultiselectOption>): Array<number>;
    atzMultiSelectFromDisclamer(type: string, disclaimers: Array<PoDisclaimer>, property: string, defaultValue: Array<PoMultiselectOption>): Array<any>;
    atzCheckboxFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, options: Array<PoCheckboxGroupOption>): Array<string>;
    atzRangeCharFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, rangeChar: IFilterRangeCharacter): IFilterRangeCharacter;
    atzRangeNumFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, rangeNum: IFilterRangeNumber): IFilterRangeNumber;
    atzRangeDateFromDisclamer(disclaimers: Array<PoDisclaimer>, property: string, rangeDate: IFilterRangeDate): IFilterRangeDate;
    atzRangeCharFromQueryParam(value: string, rangeChar: IFilterRangeCharacter): IFilterRangeCharacter;
    atzRangeNumFromQueryParam(value: string, rangeNum: IFilterRangeNumber): IFilterRangeNumber;
    atzRangeDateFromQueryParam(value: string, rangeDate: IFilterRangeDate): IFilterRangeDate;
    dateToQueryParam(date: Date): string;
    queryParamToDate(param: string): Date;
    isValidDate(date: Date): boolean;
    ajustDate(param: any): Date;
    pad(number: any): any;
}
