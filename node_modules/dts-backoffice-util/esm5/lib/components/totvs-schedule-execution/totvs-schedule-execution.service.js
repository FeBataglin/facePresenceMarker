/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/internal/operators';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
var RpwService = /** @class */ (function () {
    // private apiUrl = '/genericsZoom';
    // private urlJobScheduler = '/jobScheduler';
    function RpwService(http) {
        this.http = http;
        this.apiUrl = '/dts/datasul-rest/resources/prg/cdp/v1/genericsZoom';
        this.urlJobScheduler = '/dts/datasul-rest/resources/prg/framework/v1/jobScheduler';
        this.filterRpw = {
            fields: 'cod_servid_exec,des_servid_exec',
            filter: 'cod_servid_exec',
            filterZoom: 'cod_servid_exec',
            order: 'cod_servid_exec',
            table: 'servid_exec'
        };
    }
    /**
     * @param {?} param
     * @param {?} appId
     * @return {?}
     */
    RpwService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?} appId
     * @return {?}
     */
    function (param, appId) {
        var _this = this;
        /** @type {?} */
        var localParams = Object.assign({}, this.filterRpw);
        /** @type {?} */
        var url = this.apiUrl + "?pageSize=10&page=1&table=" + localParams.table;
        url += "&fields=" + localParams.fields + "&order=" + localParams.order;
        if (param.value) {
            url += "&" + localParams.filterZoom + "=*" + param.value + "*";
        }
        return this.http.get(url, {})
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.convertToArrayComboOption(response.items, 'codServidExec', 'desServidExec'); })));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RpwService.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        return this.http.get(this.apiUrl + "/" + value)
            .pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.convertToThfComboOption(item, 'codServidExec', 'desServidExec'); })));
    };
    /**
     * @param {?} parameters
     * @return {?}
     */
    RpwService.prototype.createRpw = /**
     * @param {?} parameters
     * @return {?}
     */
    function (parameters) {
        /** @type {?} */
        var params = JSON.parse(JSON.stringify(parameters).replace(/\\\\/g, '*|'));
        return this.http.post("" + this.urlJobScheduler, params);
    };
    /* COMBO */
    /* COMBO */
    /**
     * @param {?} items
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    RpwService.prototype.convertToArrayComboOption = /* COMBO */
    /**
     * @param {?} items
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (items, key, value) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.convertToThfComboOption(item, key, value); }));
        }
        return [];
    };
    /**
     * @param {?} item
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    RpwService.prototype.convertToThfComboOption = /**
     * @param {?} item
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (item, key, value) {
        item = item || {};
        return {
            value: item[key] || undefined,
            label: item[value] || undefined
        };
    };
    RpwService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RpwService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return RpwService;
}());
export { RpwService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.apiUrl;
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.urlJobScheduler;
    /** @type {?} */
    RpwService.prototype.filterRpw;
    /** @type {?} */
    RpwService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90dnMtc2NoZWR1bGUtZXhlY3V0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdG90dnMtc2NoZWR1bGUtZXhlY3V0aW9uL3RvdHZzLXNjaGVkdWxlLWV4ZWN1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJbEQ7SUFNSSxvQ0FBb0M7SUFDcEMsNkNBQTZDO0lBRTdDLG9CQUFtQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTDNCLFdBQU0sR0FBRyxxREFBcUQsQ0FBQztRQUMvRCxvQkFBZSxHQUFHLDJEQUEyRCxDQUFDO1FBTXRFLGNBQVMsR0FBRztZQUN2QixNQUFNLEVBQUUsaUNBQWlDO1lBQ3pDLE1BQU0sRUFBRSxpQkFBaUI7WUFDekIsVUFBVSxFQUFFLGlCQUFpQjtZQUM3QixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLEtBQUssRUFBRSxhQUFhO1NBQ3hCLENBQUM7SUFScUMsQ0FBQzs7Ozs7O0lBVXhDLG9DQUFlOzs7OztJQUFmLFVBQWdCLEtBQVUsRUFBRSxLQUFhO1FBQXpDLGlCQVdDOztZQVZTLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDOztZQUNqRCxHQUFHLEdBQU8sSUFBSSxDQUFDLE1BQU0sa0NBQTZCLFdBQVcsQ0FBQyxLQUFPO1FBQ3JFLEdBQUcsSUFBSSxhQUFXLFdBQVcsQ0FBQyxNQUFNLGVBQVUsV0FBVyxDQUFDLEtBQU8sQ0FBQztRQUV0RSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDYixHQUFHLElBQUksTUFBSSxXQUFXLENBQUMsVUFBVSxVQUFLLEtBQUssQ0FBQyxLQUFLLE1BQUcsQ0FBQztTQUN4RDtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUcsQ0FBQzthQUN6QixJQUFJLENBQUMsR0FBRzs7OztRQUFDLFVBQUMsUUFBYSxJQUFLLE9BQUEsS0FBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLGVBQWUsQ0FBQyxFQUFoRixDQUFnRixFQUFDLENBQUMsQ0FBQztJQUN4SCxDQUFDOzs7OztJQUVELHFDQUFnQjs7OztJQUFoQixVQUFpQixLQUFLO1FBQXRCLGlCQUdDO1FBRkcsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsTUFBTSxTQUFJLEtBQU8sQ0FBQzthQUMxQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDLEVBQXBFLENBQW9FLEVBQUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Ozs7O0lBRUQsOEJBQVM7Ozs7SUFBVCxVQUFVLFVBQWtCOztZQUNsQixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFNUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDakIsS0FBRyxJQUFJLENBQUMsZUFBaUIsRUFBRSxNQUFNLENBQ3BDLENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVzs7Ozs7Ozs7SUFDWCw4Q0FBeUI7Ozs7Ozs7SUFBekIsVUFBMEIsS0FBaUIsRUFBRSxHQUFXLEVBQUUsS0FBYTtRQUF2RSxpQkFNQztRQUxHLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUE5QyxDQUE4QyxFQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7SUFFRCw0Q0FBdUI7Ozs7OztJQUF2QixVQUF3QixJQUFTLEVBQUUsR0FBVyxFQUFFLEtBQWE7UUFDekQsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEIsT0FBTztZQUNILEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksU0FBUztZQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVM7U0FDbEMsQ0FBQztJQUNOLENBQUM7O2dCQTVESixVQUFVOzs7O2dCQUpGLFVBQVU7O0lBbUVuQixpQkFBQztDQUFBLEFBL0RELElBK0RDO1NBN0RZLFVBQVU7Ozs7OztJQUVuQiw0QkFBdUU7Ozs7O0lBQ3ZFLHFDQUFzRjs7SUFNdEYsK0JBTUU7O0lBUlUsMEJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUG9Db21ib09wdGlvbiwgUG9Db21ib0ZpbHRlciB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuXHJcbmV4cG9ydCBjbGFzcyBScHdTZXJ2aWNlIGltcGxlbWVudHMgUG9Db21ib0ZpbHRlciB7XHJcblxyXG4gICAgcHJpdmF0ZSBhcGlVcmwgPSAnL2R0cy9kYXRhc3VsLXJlc3QvcmVzb3VyY2VzL3ByZy9jZHAvdjEvZ2VuZXJpY3Nab29tJztcclxuICAgIHByaXZhdGUgdXJsSm9iU2NoZWR1bGVyID0gJy9kdHMvZGF0YXN1bC1yZXN0L3Jlc291cmNlcy9wcmcvZnJhbWV3b3JrL3YxL2pvYlNjaGVkdWxlcic7XHJcbiAgICAvLyBwcml2YXRlIGFwaVVybCA9ICcvZ2VuZXJpY3Nab29tJztcclxuICAgIC8vIHByaXZhdGUgdXJsSm9iU2NoZWR1bGVyID0gJy9qb2JTY2hlZHVsZXInO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmlsdGVyUnB3ID0ge1xyXG4gICAgICAgICBmaWVsZHM6ICdjb2Rfc2VydmlkX2V4ZWMsZGVzX3NlcnZpZF9leGVjJyxcclxuICAgICAgICAgZmlsdGVyOiAnY29kX3NlcnZpZF9leGVjJyxcclxuICAgICAgICAgZmlsdGVyWm9vbTogJ2NvZF9zZXJ2aWRfZXhlYycsXHJcbiAgICAgICAgIG9yZGVyOiAnY29kX3NlcnZpZF9leGVjJyxcclxuICAgICAgICAgdGFibGU6ICdzZXJ2aWRfZXhlYydcclxuICAgIH07XHJcblxyXG4gICAgZ2V0RmlsdGVyZWREYXRhKHBhcmFtOiBhbnksIGFwcElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPEFycmF5PFBvQ29tYm9PcHRpb24+PiB7XHJcbiAgICAgICAgY29uc3QgbG9jYWxQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmZpbHRlclJwdyk7XHJcbiAgICAgICAgbGV0IHVybCAgPSBgJHt0aGlzLmFwaVVybH0/cGFnZVNpemU9MTAmcGFnZT0xJnRhYmxlPSR7bG9jYWxQYXJhbXMudGFibGV9YDtcclxuICAgICAgICAgICAgdXJsICs9IGAmZmllbGRzPSR7bG9jYWxQYXJhbXMuZmllbGRzfSZvcmRlcj0ke2xvY2FsUGFyYW1zLm9yZGVyfWA7XHJcblxyXG4gICAgICAgIGlmIChwYXJhbS52YWx1ZSkge1xyXG4gICAgICAgICAgICB1cmwgKz0gYCYke2xvY2FsUGFyYW1zLmZpbHRlclpvb219PSoke3BhcmFtLnZhbHVlfSpgO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCB7IH0pXHJcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IGFueSkgPT4gdGhpcy5jb252ZXJ0VG9BcnJheUNvbWJvT3B0aW9uKHJlc3BvbnNlLml0ZW1zLCAnY29kU2VydmlkRXhlYycsICdkZXNTZXJ2aWRFeGVjJykpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlKTogT2JzZXJ2YWJsZTxQb0NvbWJvT3B0aW9uPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5hcGlVcmx9LyR7dmFsdWV9YClcclxuICAgICAgICAgICAgLnBpcGUobWFwKGl0ZW0gPT4gdGhpcy5jb252ZXJ0VG9UaGZDb21ib09wdGlvbihpdGVtLCAnY29kU2VydmlkRXhlYycsICdkZXNTZXJ2aWRFeGVjJykpKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVScHcocGFyYW1ldGVyczogT2JqZWN0KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcnMpLnJlcGxhY2UoL1xcXFxcXFxcL2csICcqfCcpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KFxyXG4gICAgICAgICAgICBgJHt0aGlzLnVybEpvYlNjaGVkdWxlcn1gLCBwYXJhbXNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIENPTUJPICovXHJcbiAgICBjb252ZXJ0VG9BcnJheUNvbWJvT3B0aW9uKGl0ZW1zOiBBcnJheTxhbnk+LCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IEFycmF5PFBvQ29tYm9PcHRpb24+IHtcclxuICAgICAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4gdGhpcy5jb252ZXJ0VG9UaGZDb21ib09wdGlvbihpdGVtLCBrZXksIHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgY29udmVydFRvVGhmQ29tYm9PcHRpb24oaXRlbTogYW55LCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFBvQ29tYm9PcHRpb24ge1xyXG4gICAgICAgIGl0ZW0gPSBpdGVtIHx8IHt9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtW2tleV0gfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBsYWJlbDogaXRlbVt2YWx1ZV0gfHwgdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qIENPTUJPICovXHJcblxyXG59XHJcbiJdfQ==