/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.000
Data Criação: 18/04/2019
*/
var DateUtil = /** @class */ (function () {
    function DateUtil() {
    }
    /* Transforma data para o padrão YYYY-MM-DD */
    /* Transforma data para o padrão YYYY-MM-DD */
    /**
     * @param {?} date
     * @return {?}
     */
    DateUtil.dateToQueryParam = /* Transforma data para o padrão YYYY-MM-DD */
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var iDay = date.getDate();
        /** @type {?} */
        var iMonth = date.getMonth() + 1;
        /** @type {?} */
        var iYear = date.getFullYear();
        return iYear + "-" + this.pad(iMonth) + "-" + this.pad(iDay);
    };
    /* Transforma data no padrão YYYY-MM-DD para DATE */
    /* Transforma data no padrão YYYY-MM-DD para DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    DateUtil.queryParamToDate = /* Transforma data no padrão YYYY-MM-DD para DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var iDay = +param.split('-')[2];
        /** @type {?} */
        var iMonth = +param.split('-')[1];
        /** @type {?} */
        var iYear = +param.split('-')[0];
        return new Date(iYear, iMonth - 1, iDay);
    };
    /* Valida se foi informado uma data válida */
    /* Valida se foi informado uma data válida */
    /**
     * @param {?} date
     * @return {?}
     */
    DateUtil.isValidDate = /* Valida se foi informado uma data válida */
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date instanceof Date && !isNaN(date.getTime());
    };
    /* Ajusta a data retornando o padrão DATE */
    /* Ajusta a data retornando o padrão DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    DateUtil.ajustDate = /* Ajusta a data retornando o padrão DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (param instanceof Date) {
            return param;
        }
        if (!param) {
            return param;
        }
        return this.queryParamToDate(param.split('T')[0]);
    };
    /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
    /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
    /**
     * @param {?=} values
     * @param {?=} fieldName
     * @return {?}
     */
    DateUtil.ajustDateToModel = /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
    /**
     * @param {?=} values
     * @param {?=} fieldName
     * @return {?}
     */
    function (values, fieldName) {
        if (values === void 0) { values = {}; }
        if (values.hasOwnProperty(fieldName) && (values[fieldName])) {
            if (values[fieldName].indexOf('T') >= 0) {
                return new Date(values[fieldName]);
            }
            /** @type {?} */
            var iDay = +values[fieldName].split('-')[2];
            /** @type {?} */
            var iMonth = +values[fieldName].split('-')[1];
            /** @type {?} */
            var iYear = +values[fieldName].split('-')[0];
            return new Date(iYear, iMonth - 1, iDay);
        }
        return null;
    };
    /* Adicona zero a esquerda do número */
    /* Adicona zero a esquerda do número */
    /**
     * @param {?} number
     * @return {?}
     */
    DateUtil.pad = /* Adicona zero a esquerda do número */
    /**
     * @param {?} number
     * @return {?}
     */
    function (number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    };
    return DateUtil;
}());
export { DateUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZHRzLWJhY2tvZmZpY2UtdXRpbC8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kYXRlLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQTtJQUVJO0lBQ0ksQ0FBQztJQUVMLDhDQUE4Qzs7Ozs7O0lBQ3ZDLHlCQUFnQjs7Ozs7SUFBdkIsVUFBd0IsSUFBVTs7WUFDeEIsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7O1lBQ3JCLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQzs7WUFDNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFFaEMsT0FBVSxLQUFLLFNBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRyxDQUFDO0lBQzVELENBQUM7SUFFRCxvREFBb0Q7Ozs7OztJQUM3Qyx5QkFBZ0I7Ozs7O0lBQXZCLFVBQXdCLEtBQWE7O1lBQzNCLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUMzQixNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDN0IsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsNkNBQTZDOzs7Ozs7SUFDdEMsb0JBQVc7Ozs7O0lBQWxCLFVBQW1CLElBQVU7UUFDekIsT0FBTyxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCw0Q0FBNEM7Ozs7OztJQUNyQyxrQkFBUzs7Ozs7SUFBaEIsVUFBaUIsS0FBVTtRQUN2QixJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQztTQUFFO1FBQzVDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQztTQUFFO1FBRTdCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsK0VBQStFOzs7Ozs7O0lBQ3hFLHlCQUFnQjs7Ozs7O0lBQXZCLFVBQXdCLE1BQW1CLEVBQUUsU0FBaUI7UUFBdEMsdUJBQUEsRUFBQSxXQUFtQjtRQUN2QyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRTtZQUN6RCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyQyxPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3RDOztnQkFFSyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBQ3ZDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQkFDekMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCx1Q0FBdUM7Ozs7OztJQUNoQyxZQUFHOzs7OztJQUFWLFVBQVcsTUFBTTtRQUNiLElBQUksTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUNiLE9BQU8sR0FBRyxHQUFHLE1BQU0sQ0FBQztTQUN2QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FBQyxBQTNERCxJQTJEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblZlcnPDo286IDEuMDAwXHJcbkRhdGEgQ3JpYcOnw6NvOiAxOC8wNC8yMDE5XHJcbiovXHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZVV0aWwge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgKSB7IH1cclxuXHJcbiAgICAvKiBUcmFuc2Zvcm1hIGRhdGEgcGFyYSBvIHBhZHLDo28gWVlZWS1NTS1ERCAqL1xyXG4gICAgc3RhdGljIGRhdGVUb1F1ZXJ5UGFyYW0oZGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgaURheSA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IGlNb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XHJcbiAgICAgICAgY29uc3QgaVllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBgJHtpWWVhcn0tJHt0aGlzLnBhZChpTW9udGgpfS0ke3RoaXMucGFkKGlEYXkpfWA7XHJcbiAgICB9XHJcblxyXG4gICAgLyogVHJhbnNmb3JtYSBkYXRhIG5vIHBhZHLDo28gWVlZWS1NTS1ERCBwYXJhIERBVEUgKi9cclxuICAgIHN0YXRpYyBxdWVyeVBhcmFtVG9EYXRlKHBhcmFtOiBzdHJpbmcpOiBEYXRlIHtcclxuICAgICAgICBjb25zdCBpRGF5ID0gK3BhcmFtLnNwbGl0KCctJylbMl07XHJcbiAgICAgICAgY29uc3QgaU1vbnRoID0gK3BhcmFtLnNwbGl0KCctJylbMV07XHJcbiAgICAgICAgY29uc3QgaVllYXIgPSArcGFyYW0uc3BsaXQoJy0nKVswXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlZZWFyLCBpTW9udGggLSAxLCBpRGF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBWYWxpZGEgc2UgZm9pIGluZm9ybWFkbyB1bWEgZGF0YSB2w6FsaWRhICovXHJcbiAgICBzdGF0aWMgaXNWYWxpZERhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBkYXRlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4oZGF0ZS5nZXRUaW1lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEFqdXN0YSBhIGRhdGEgcmV0b3JuYW5kbyBvIHBhZHLDo28gREFURSAqL1xyXG4gICAgc3RhdGljIGFqdXN0RGF0ZShwYXJhbTogYW55KTogRGF0ZSB7XHJcbiAgICAgICAgaWYgKHBhcmFtIGluc3RhbmNlb2YgRGF0ZSkgeyByZXR1cm4gcGFyYW07IH1cclxuICAgICAgICBpZiAoIXBhcmFtKSB7IHJldHVybiBwYXJhbTsgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVBhcmFtVG9EYXRlKHBhcmFtLnNwbGl0KCdUJylbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEFqdXN0YSBhIGRhdGEgcGFyYSBvIHBhZHLDo28gREFURSAtIHV0aWxpemFkYSBub3MgY29uc3RydXRvcmVzIGRvcyBtb2RlbG9zICovXHJcbiAgICBzdGF0aWMgYWp1c3REYXRlVG9Nb2RlbCh2YWx1ZXM6IE9iamVjdCA9IHt9LCBmaWVsZE5hbWU6IHN0cmluZyk6IERhdGUge1xyXG4gICAgICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkoZmllbGROYW1lKSAmJiAodmFsdWVzW2ZpZWxkTmFtZV0pKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbZmllbGROYW1lXS5pbmRleE9mKCdUJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlc1tmaWVsZE5hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaURheSA9ICt2YWx1ZXNbZmllbGROYW1lXS5zcGxpdCgnLScpWzJdO1xyXG4gICAgICAgICAgICBjb25zdCBpTW9udGggPSArdmFsdWVzW2ZpZWxkTmFtZV0uc3BsaXQoJy0nKVsxXTtcclxuICAgICAgICAgICAgY29uc3QgaVllYXIgPSArdmFsdWVzW2ZpZWxkTmFtZV0uc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlZZWFyLCBpTW9udGggLSAxLCBpRGF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEFkaWNvbmEgemVybyBhIGVzcXVlcmRhIGRvIG7Dum1lcm8gKi9cclxuICAgIHN0YXRpYyBwYWQobnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKG51bWJlciA8IDEwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMCcgKyBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudW1iZXI7XHJcbiAgICB9XHJcbn1cclxuIl19