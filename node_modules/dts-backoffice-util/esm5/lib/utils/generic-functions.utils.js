/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.003
Data Criação: 18/04/2019
*/
/**
 * @record
 */
export function ChartSeries() { }
if (false) {
    /** @type {?|undefined} */
    ChartSeries.prototype.name;
    /** @type {?|undefined} */
    ChartSeries.prototype.data;
}
/**
 * @record
 */
export function ChartValues() { }
if (false) {
    /** @type {?} */
    ChartValues.prototype.minValue;
    /** @type {?} */
    ChartValues.prototype.maxValue;
}
var GenericFunctionsUtils = /** @class */ (function () {
    function GenericFunctionsUtils(literals) {
        this.literals = {};
        this.literals = literals;
    }
    /* Transforma uma Lista separada por "," em um Array */
    /* Transforma uma Lista separada por "," em um Array */
    /**
     * @param {?} list
     * @return {?}
     */
    GenericFunctionsUtils.listToArrayCharacter = /* Transforma uma Lista separada por "," em um Array */
    /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        /** @type {?} */
        var returnArray = new Array();
        if (list && list !== '') {
            returnArray = list.split(',');
        }
        return returnArray;
    };
    /* Transforma um Array em uma Lista separada por ","  */
    /* Transforma um Array em uma Lista separada por ","  */
    /**
     * @param {?} array
     * @return {?}
     */
    GenericFunctionsUtils.ArrayToListCharacter = /* Transforma um Array em uma Lista separada por ","  */
    /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var list = '';
        if (array && array.length > 0) {
            list = array.join(',');
        }
        return list;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    GenericFunctionsUtils.isEmpty = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        /** @type {?} */
        var isEmpty = true;
        for (var content in object) {
            if (object.hasOwnProperty(content)) {
                isEmpty = false;
            }
        }
        return isEmpty;
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    GenericFunctionsUtils.getChartValues = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var chartValues;
        /** @type {?} */
        var maxValue;
        /** @type {?} */
        var minValue;
        maxValue = undefined;
        minValue = undefined;
        chartData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (maxValue === undefined && minValue === undefined) {
                maxValue = item.data[0];
                minValue = item.data[0];
            }
            else {
                if (item.data < minValue) {
                    minValue = item.data[0];
                }
                if (item.data > maxValue) {
                    maxValue = item.data[0];
                }
            }
        }));
        if (maxValue > 0 && minValue > 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue > 0 && minValue < 0) {
            chartValues = { maxValue: maxValue, minValue: minValue };
        }
        if (maxValue < 0 && minValue < 0) {
            /** @type {?} */
            var max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue > 0 && minValue === 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue === 0 && minValue < 0) {
            /** @type {?} */
            var max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue === 0 && minValue === 0) {
            chartValues = { maxValue: undefined, minValue: undefined };
        }
        chartValues.maxValue = Math.round(chartValues.maxValue);
        chartValues.minValue = Math.round(chartValues.minValue);
        return chartValues;
    };
    /*Deixa no list apenas o itens que existem no options*/
    /*Deixa no list apenas o itens que existem no options*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    GenericFunctionsUtils.atzMultiSelectListByOptions = /*Deixa no list apenas o itens que existem no options*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    function (options, list) {
        /** @type {?} */
        var idx;
        /** @type {?} */
        var newList;
        if (!list) {
            return list;
        }
        newList = new Array();
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                function (itemOptions) { return itemOptions.value === item; }));
                if (idx >= 0) {
                    newList.push(item);
                }
            }
        }));
        return newList;
    };
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    GenericFunctionsUtils.prototype.loadOptionsMultiSelect = /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    function (options, list) {
        var _this = this;
        /** @type {?} */
        var idx;
        if (!list) {
            return;
        }
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                function (itemOptions) { return itemOptions.value === item; }));
                if (idx === -1) {
                    options.push({ label: item === 'all' ? _this.literals['all'] : item, value: item });
                }
            }
        }));
    };
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} selectValue
     * @param {?=} tradValue
     * @return {?}
     */
    GenericFunctionsUtils.prototype.loadOptionsSelect = /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} selectValue
     * @param {?=} tradValue
     * @return {?}
     */
    function (options, selectValue, tradValue) {
        if (tradValue === void 0) { tradValue = false; }
        /** @type {?} */
        var idx;
        if (!selectValue) {
            return;
        }
        if (selectValue) {
            idx = options.findIndex((/**
             * @param {?} itemOptions
             * @return {?}
             */
            function (itemOptions) { return itemOptions.value === selectValue; }));
            if (idx === -1) {
                options.push({ label: tradValue ? this.literals[selectValue] : selectValue, value: selectValue });
            }
        }
    };
    /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
    /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
    /**
     * @param {?} firstObject
     * @param {?} secondObject
     * @return {?}
     */
    GenericFunctionsUtils.prototype.compareObjects = /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
    /**
     * @param {?} firstObject
     * @param {?} secondObject
     * @return {?}
     */
    function (firstObject, secondObject) {
        if (!firstObject || !secondObject) {
            return false;
        }
        /*Pega a lista de nomes dos campos do objetos e compara*/
        if (Object.getOwnPropertyNames(firstObject).length !== Object.getOwnPropertyNames(secondObject).length) {
            return false;
        }
        for (var content in firstObject) {
            if (content.substr(0, 1) === '$' || content.substr(0, 1) === '_') {
                continue;
            }
            if (firstObject[content] !== secondObject[content]) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} charInd
     * @param {?} dateRef
     * @return {?}
     */
    GenericFunctionsUtils.prototype.referenceGeneration = /**
     * @param {?} charInd
     * @param {?} dateRef
     * @return {?}
     */
    function (charInd, dateRef) {
        /** @type {?} */
        var reference;
        /** @type {?} */
        var random;
        /** @type {?} */
        var iDay = dateRef.getDate();
        /** @type {?} */
        var iMonth = dateRef.getMonth() + 1;
        /** @type {?} */
        var iYear = dateRef.getFullYear();
        reference = "" + this.pad(iYear) + this.pad(iMonth) + this.pad(iDay) + charInd;
        random = btoa("" + (new Date()).getTime());
        random = random.replace(/[=]/g, '');
        random = random.slice(random.length - 3, random.length);
        return "" + reference + random;
    };
    /**
     * @param {?} number
     * @return {?}
     */
    GenericFunctionsUtils.prototype.pad = /**
     * @param {?} number
     * @return {?}
     */
    function (number) {
        if (number < 10) {
            return '0' + number;
        }
        if (number > 99) {
            return (number + '').slice(2, 4);
        }
        return number;
    };
    return GenericFunctionsUtils;
}());
export { GenericFunctionsUtils };
if (false) {
    /** @type {?} */
    GenericFunctionsUtils.prototype.literals;
}
//# sourceMappingURL=data:application/json;base64,