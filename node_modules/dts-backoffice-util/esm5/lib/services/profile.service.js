/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators/map';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * @record
 */
export function IProfile() { }
if (false) {
    /** @type {?} */
    IProfile.prototype.pageId;
    /** @type {?} */
    IProfile.prototype.dataCode;
    /** @type {?} */
    IProfile.prototype.userCode;
    /** @type {?|undefined} */
    IProfile.prototype.dataValue;
}
/**
 * @record
 */
export function IProfileResponse() { }
if (false) {
    /** @type {?} */
    IProfileResponse.prototype.message;
    /** @type {?} */
    IProfileResponse.prototype.length;
    /** @type {?} */
    IProfileResponse.prototype.data;
}
/** @enum {number} */
var EDataType = {
    STRING: 1,
    JSON: 2,
};
EDataType[EDataType.STRING] = 'STRING';
EDataType[EDataType.JSON] = 'JSON';
var ProfileService = /** @class */ (function () {
    function ProfileService(http) {
        this.http = http;
        this.apiURL = '/dts/datasul-rest/resources/api/btb/btapi930za';
    }
    /**
     * @param {?} profile
     * @return {?}
     */
    ProfileService.prototype.setProfile = /**
     * @param {?} profile
     * @return {?}
     */
    function (profile) {
        /** @type {?} */
        var headers = { 'X-PO-Screen-Lock': 'true' };
        var pageId = profile.pageId, userCode = profile.userCode;
        return this.http
            .post(this.apiURL + "/setProfile?userCode=" + userCode + "&pageId=" + pageId, profile, { headers: headers });
    };
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    ProfileService.prototype.getProfileAsString = /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    function (profile, showLoading) {
        return this.getProfile(profile, EDataType.STRING, showLoading ? 'true' : 'false');
    };
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    ProfileService.prototype.getProfileAsJSON = /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    function (profile, showLoading) {
        return this.getProfile(profile, EDataType.JSON, showLoading ? 'true' : 'false');
    };
    /**
     * @private
     * @param {?} profile
     * @param {?} dataType
     * @param {?=} showLoading
     * @return {?}
     */
    ProfileService.prototype.getProfile = /**
     * @private
     * @param {?} profile
     * @param {?} dataType
     * @param {?=} showLoading
     * @return {?}
     */
    function (profile, dataType, showLoading) {
        /** @type {?} */
        var headers = { 'X-PO-Screen-Lock': showLoading };
        var pageId = profile.pageId, dataCode = profile.dataCode, userCode = profile.userCode;
        return this.http
            .get(this.apiURL + "/getProfile?userCode=" + userCode + "&pageId=" + pageId + "&dataCode=" + dataCode, { headers: headers })
            .pipe(map((/**
         * @param {?} preference
         * @return {?}
         */
        function (preference) {
            if (preference.data[0]) {
                if (dataType === EDataType.STRING) {
                    return preference.data[0].dataValue;
                }
                if (dataType === EDataType.JSON) {
                    return JSON.parse(preference.data[0].dataValue);
                }
            }
            else {
                return undefined;
            }
        })));
    };
    ProfileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProfileService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ProfileService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(i0.ɵɵinject(i1.HttpClient)); }, token: ProfileService, providedIn: "root" });
    return ProfileService;
}());
export { ProfileService };
if (false) {
    /** @type {?} */
    ProfileService.prototype.apiURL;
    /** @type {?} */
    ProfileService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZHRzLWJhY2tvZmZpY2UtdXRpbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wcm9maWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBRXpDLDhCQUtDOzs7SUFKRywwQkFBZTs7SUFDZiw0QkFBaUI7O0lBQ2pCLDRCQUFpQjs7SUFDakIsNkJBQW1COzs7OztBQUd2QixzQ0FJQzs7O0lBSEcsbUNBQXVCOztJQUN2QixrQ0FBZTs7SUFDZixnQ0FBaUI7Ozs7SUFJakIsU0FBVTtJQUNWLE9BQVE7Ozs7QUFHWjtJQU9JLHdCQUFtQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBRjFCLFdBQU0sR0FBRyxnREFBZ0QsQ0FBQztJQUU1QixDQUFDOzs7OztJQUV4QyxtQ0FBVTs7OztJQUFWLFVBQVcsT0FBaUI7O1lBQ2xCLE9BQU8sR0FBRyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRTtRQUN0QyxJQUFBLHVCQUFNLEVBQUUsMkJBQVE7UUFFeEIsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNYLElBQUksQ0FBUyxJQUFJLENBQUMsTUFBTSw2QkFBd0IsUUFBUSxnQkFBVyxNQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBRTVHLENBQUM7Ozs7OztJQUVELDJDQUFrQjs7Ozs7SUFBbEIsVUFBbUIsT0FBaUIsRUFBRSxXQUFxQjtRQUN2RCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Ozs7OztJQUVELHlDQUFnQjs7Ozs7SUFBaEIsVUFBaUIsT0FBaUIsRUFBRSxXQUFxQjtRQUNyRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BGLENBQUM7Ozs7Ozs7O0lBRU8sbUNBQVU7Ozs7Ozs7SUFBbEIsVUFBbUIsT0FBaUIsRUFBRSxRQUFtQixFQUFFLFdBQW9COztZQUNyRSxPQUFPLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUU7UUFDM0MsSUFBQSx1QkFBTSxFQUFFLDJCQUFRLEVBQUUsMkJBQVE7UUFFbEMsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNYLEdBQUcsQ0FBc0IsSUFBSSxDQUFDLE1BQU0sNkJBQXdCLFFBQVEsZ0JBQVcsTUFBTSxrQkFBYSxRQUFVLEVBQ3pHLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQzthQUNmLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxVQUFVO1lBQ2hCLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxRQUFRLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRTtvQkFDL0IsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztpQkFDdkM7Z0JBRUQsSUFBSSxRQUFRLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtvQkFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ25EO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxTQUFTLENBQUM7YUFDcEI7UUFDTCxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ1osQ0FBQzs7Z0JBOUNKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBdkJRLFVBQVU7Ozt5QkFGbkI7Q0F1RUMsQUFoREQsSUFnREM7U0E3Q1ksY0FBYzs7O0lBRXZCLGdDQUFtRTs7SUFFdkQsOEJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL21hcCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9maWxlIHtcclxuICAgIHBhZ2VJZDogc3RyaW5nO1xyXG4gICAgZGF0YUNvZGU6IHN0cmluZztcclxuICAgIHVzZXJDb2RlOiBzdHJpbmc7XHJcbiAgICBkYXRhVmFsdWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb2ZpbGVSZXNwb25zZSB7XHJcbiAgICBtZXNzYWdlOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgbGVuZ3RoOiBudW1iZXI7XHJcbiAgICBkYXRhOiBBcnJheTxhbnk+O1xyXG59XHJcblxyXG5lbnVtIEVEYXRhVHlwZSB7XHJcbiAgICBTVFJJTkcgPSAxLFxyXG4gICAgSlNPTiA9IDJcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9maWxlU2VydmljZSB7XHJcblxyXG4gICAgcmVhZG9ubHkgYXBpVVJMID0gJy9kdHMvZGF0YXN1bC1yZXN0L3Jlc291cmNlcy9hcGkvYnRiL2J0YXBpOTMwemEnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgICBzZXRQcm9maWxlKHByb2ZpbGU6IElQcm9maWxlKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0geyAnWC1QTy1TY3JlZW4tTG9jayc6ICd0cnVlJyB9O1xyXG4gICAgICAgIGNvbnN0IHsgcGFnZUlkLCB1c2VyQ29kZSB9ID0gcHJvZmlsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAgICAgICAucG9zdDxhbnk+KGAke3RoaXMuYXBpVVJMfS9zZXRQcm9maWxlP3VzZXJDb2RlPSR7dXNlckNvZGV9JnBhZ2VJZD0ke3BhZ2VJZH1gLCBwcm9maWxlLCB7IGhlYWRlcnMgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldFByb2ZpbGVBc1N0cmluZyhwcm9maWxlOiBJUHJvZmlsZSwgc2hvd0xvYWRpbmc/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9maWxlKHByb2ZpbGUsIEVEYXRhVHlwZS5TVFJJTkcsIHNob3dMb2FkaW5nID8gJ3RydWUnIDogJ2ZhbHNlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvZmlsZUFzSlNPTihwcm9maWxlOiBJUHJvZmlsZSwgc2hvd0xvYWRpbmc/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxvYmplY3Q+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9maWxlKHByb2ZpbGUsIEVEYXRhVHlwZS5KU09OLCBzaG93TG9hZGluZyA/ICd0cnVlJyA6ICdmYWxzZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UHJvZmlsZShwcm9maWxlOiBJUHJvZmlsZSwgZGF0YVR5cGU6IEVEYXRhVHlwZSwgc2hvd0xvYWRpbmc/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLVNjcmVlbi1Mb2NrJzogc2hvd0xvYWRpbmcgfTtcclxuICAgICAgICBjb25zdCB7IHBhZ2VJZCwgZGF0YUNvZGUsIHVzZXJDb2RlIH0gPSBwcm9maWxlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgICAgICAgIC5nZXQ8SVByb2ZpbGVSZXNwb25zZT4oYCR7dGhpcy5hcGlVUkx9L2dldFByb2ZpbGU/dXNlckNvZGU9JHt1c2VyQ29kZX0mcGFnZUlkPSR7cGFnZUlkfSZkYXRhQ29kZT0ke2RhdGFDb2RlfWAsXHJcbiAgICAgICAgICAgICAgICB7IGhlYWRlcnMgfSlcclxuICAgICAgICAgICAgLnBpcGUobWFwKHByZWZlcmVuY2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZWZlcmVuY2UuZGF0YVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gRURhdGFUeXBlLlNUUklORykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJlZmVyZW5jZS5kYXRhWzBdLmRhdGFWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gRURhdGFUeXBlLkpTT04pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocHJlZmVyZW5jZS5kYXRhWzBdLmRhdGFWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==