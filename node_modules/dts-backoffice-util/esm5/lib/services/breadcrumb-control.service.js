/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.003
Data Criação: 06/08/2018
*/
import { Injectable } from '@angular/core';
var BreadcrumbControlService = /** @class */ (function () {
    function BreadcrumbControlService() {
    }
    /**
     * @return {?}
     */
    BreadcrumbControlService.prototype.newBreadcrumb = /**
     * @return {?}
     */
    function () {
        this.breadcrumb = { items: [] };
    };
    /**
     * @param {?} literal
     * @param {?} activatedRoute
     * @return {?}
     */
    BreadcrumbControlService.prototype.addBreadcrumb = /**
     * @param {?} literal
     * @param {?} activatedRoute
     * @return {?}
     */
    function (literal, activatedRoute) {
        this.addBreadcrumbURL(literal, decodeURIComponent(activatedRoute.snapshot['_routerState'].url));
    };
    /**
     * @param {?} literal
     * @param {?} url
     * @return {?}
     */
    BreadcrumbControlService.prototype.addBreadcrumbURL = /**
     * @param {?} literal
     * @param {?} url
     * @return {?}
     */
    function (literal, url) {
        if (!literal || literal === '') {
            return;
        }
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        /** @type {?} */
        var breadcrumbAux = { items: [] };
        /** @type {?} */
        var idx = 0;
        for (idx = 0; idx < this.breadcrumb.items.length; idx++) {
            if (this.breadcrumb.items[idx].label !== literal) {
                breadcrumbAux.items.push(this.breadcrumb.items[idx]);
            }
            else {
                break;
            }
        }
        breadcrumbAux.items.push({ label: literal, link: url });
        this.breadcrumb = breadcrumbAux;
    };
    /**
     * @param {?} literal
     * @param {?} valueOld
     * @param {?} valueNew
     * @return {?}
     */
    BreadcrumbControlService.prototype.updBreadcrumbURL = /**
     * @param {?} literal
     * @param {?} valueOld
     * @param {?} valueNew
     * @return {?}
     */
    function (literal, valueOld, valueNew) {
        /** @type {?} */
        var currentRouterURL = this.getCurrentRouter();
        if (!currentRouterURL) {
            return;
        }
        if (!valueOld) {
            return;
        }
        if (!valueNew) {
            return;
        }
        currentRouterURL = currentRouterURL.replace(valueOld, valueNew);
        this.addBreadcrumbURL(literal, currentRouterURL);
    };
    /**
     * @return {?}
     */
    BreadcrumbControlService.prototype.getBreadcrumb = /**
     * @return {?}
     */
    function () {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        return this.breadcrumb;
    };
    /**
     * @return {?}
     */
    BreadcrumbControlService.prototype.getCurrentRouter = /**
     * @return {?}
     */
    function () {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 0) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 1].link;
    };
    /**
     * @return {?}
     */
    BreadcrumbControlService.prototype.getPrevRouter = /**
     * @return {?}
     */
    function () {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 1) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 2].link;
    };
    /**
     * @return {?}
     */
    BreadcrumbControlService.prototype.hasPreviousRouter = /**
     * @return {?}
     */
    function () {
        return this.breadcrumb.items.length > 1;
    };
    BreadcrumbControlService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BreadcrumbControlService.ctorParameters = function () { return []; };
    return BreadcrumbControlService;
}());
export { BreadcrumbControlService };
if (false) {
    /** @type {?} */
    BreadcrumbControlService.prototype.breadcrumb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi1jb250cm9sLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2JyZWFkY3J1bWItY29udHJvbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQztJQUlJO0lBQWdCLENBQUM7Ozs7SUFFVixnREFBYTs7O0lBQXBCO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFTSxnREFBYTs7Ozs7SUFBcEIsVUFBcUIsT0FBZSxFQUFFLGNBQThCO1FBQ2hFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7Ozs7OztJQUVNLG1EQUFnQjs7Ozs7SUFBdkIsVUFBd0IsT0FBZSxFQUFFLEdBQVc7UUFDaEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQUU7O1lBRXpDLGFBQWEsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7O1lBRS9CLEdBQUcsR0FBRyxDQUFDO1FBQ1gsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFO2dCQUM5QyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNILE1BQU07YUFDVDtTQUNKO1FBRUQsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDO0lBQ3BDLENBQUM7Ozs7Ozs7SUFFTSxtREFBZ0I7Ozs7OztJQUF2QixVQUF3QixPQUFlLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjs7WUFDbkUsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1FBRTlDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUNsQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzFCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFMUIsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVNLGdEQUFhOzs7SUFBcEI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUFFO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRU0sbURBQWdCOzs7SUFBdkI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUFFO1FBQy9DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUFFLE9BQU8sRUFBRSxDQUFDO1NBQUU7UUFFckQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hFLENBQUM7Ozs7SUFFTSxnREFBYTs7O0lBQXBCO1FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FBRTtRQUMvQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFO1FBRXJELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4RSxDQUFDOzs7O0lBRU0sb0RBQWlCOzs7SUFBeEI7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Z0JBbEVKLFVBQVU7Ozs7SUFtRVgsK0JBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQWxFWSx3QkFBd0I7OztJQUNqQyw4Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5WZXJzw6NvOiAxLjAwM1xyXG5EYXRhIENyaWHDp8OjbzogMDYvMDgvMjAxOFxyXG4qL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb0JyZWFkY3J1bWIgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJDb250cm9sU2VydmljZSB7XHJcbiAgICBicmVhZGNydW1iOiBQb0JyZWFkY3J1bWI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgbmV3QnJlYWRjcnVtYigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmJyZWFkY3J1bWIgPSB7IGl0ZW1zOiBbXSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRCcmVhZGNydW1iKGxpdGVyYWw6IHN0cmluZywgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRCcmVhZGNydW1iVVJMKGxpdGVyYWwsIGRlY29kZVVSSUNvbXBvbmVudChhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdFsnX3JvdXRlclN0YXRlJ10udXJsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEJyZWFkY3J1bWJVUkwobGl0ZXJhbDogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghbGl0ZXJhbCB8fCBsaXRlcmFsID09PSAnJykgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAoIXRoaXMuYnJlYWRjcnVtYikgeyB0aGlzLm5ld0JyZWFkY3J1bWIoKTsgfVxyXG5cclxuICAgICAgICBjb25zdCBicmVhZGNydW1iQXV4ID0geyBpdGVtczogW10gfTtcclxuXHJcbiAgICAgICAgbGV0IGlkeCA9IDA7XHJcbiAgICAgICAgZm9yIChpZHggPSAwOyBpZHggPCB0aGlzLmJyZWFkY3J1bWIuaXRlbXMubGVuZ3RoOyBpZHgrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5icmVhZGNydW1iLml0ZW1zW2lkeF0ubGFiZWwgIT09IGxpdGVyYWwpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJBdXguaXRlbXMucHVzaCh0aGlzLmJyZWFkY3J1bWIuaXRlbXNbaWR4XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJlYWRjcnVtYkF1eC5pdGVtcy5wdXNoKHsgbGFiZWw6IGxpdGVyYWwsIGxpbms6IHVybCB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5icmVhZGNydW1iID0gYnJlYWRjcnVtYkF1eDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkQnJlYWRjcnVtYlVSTChsaXRlcmFsOiBzdHJpbmcsIHZhbHVlT2xkOiBzdHJpbmcsIHZhbHVlTmV3OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY3VycmVudFJvdXRlclVSTCA9IHRoaXMuZ2V0Q3VycmVudFJvdXRlcigpO1xyXG5cclxuICAgICAgICBpZiAoIWN1cnJlbnRSb3V0ZXJVUkwpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgaWYgKCF2YWx1ZU9sZCkgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAoIXZhbHVlTmV3KSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICBjdXJyZW50Um91dGVyVVJMID0gY3VycmVudFJvdXRlclVSTC5yZXBsYWNlKHZhbHVlT2xkLCB2YWx1ZU5ldyk7XHJcbiAgICAgICAgdGhpcy5hZGRCcmVhZGNydW1iVVJMKGxpdGVyYWwsIGN1cnJlbnRSb3V0ZXJVUkwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRCcmVhZGNydW1iKCk6IFBvQnJlYWRjcnVtYiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJyZWFkY3J1bWIpIHsgdGhpcy5uZXdCcmVhZGNydW1iKCk7IH1cclxuICAgICAgICByZXR1cm4gdGhpcy5icmVhZGNydW1iO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDdXJyZW50Um91dGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJyZWFkY3J1bWIpIHsgdGhpcy5uZXdCcmVhZGNydW1iKCk7IH1cclxuICAgICAgICBpZiAodGhpcy5icmVhZGNydW1iLml0ZW1zLmxlbmd0aCA8PSAwKSB7IHJldHVybiAnJzsgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5icmVhZGNydW1iLml0ZW1zW3RoaXMuYnJlYWRjcnVtYi5pdGVtcy5sZW5ndGggLSAxXS5saW5rO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcmV2Um91dGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJyZWFkY3J1bWIpIHsgdGhpcy5uZXdCcmVhZGNydW1iKCk7IH1cclxuICAgICAgICBpZiAodGhpcy5icmVhZGNydW1iLml0ZW1zLmxlbmd0aCA8PSAxKSB7IHJldHVybiAnJzsgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5icmVhZGNydW1iLml0ZW1zW3RoaXMuYnJlYWRjcnVtYi5pdGVtcy5sZW5ndGggLSAyXS5saW5rO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoYXNQcmV2aW91c1JvdXRlcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5icmVhZGNydW1iLml0ZW1zLmxlbmd0aCA+IDE7XHJcbiAgICB9XHJcbn1cclxuIl19