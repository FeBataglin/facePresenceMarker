/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators/map';
/**
 * @record
 */
export function IProperty() { }
if (false) {
    /** @type {?} */
    IProperty.prototype.name;
    /** @type {?} */
    IProperty.prototype.value;
}
/**
 * @record
 */
export function IReportServiceParams() { }
if (false) {
    /** @type {?} */
    IReportServiceParams.prototype.reportName;
    /** @type {?} */
    IReportServiceParams.prototype.programName;
    /** @type {?} */
    IReportServiceParams.prototype.properties;
    /** @type {?} */
    IReportServiceParams.prototype.dialect;
    /** @type {?} */
    IReportServiceParams.prototype.downloadName;
    /** @type {?} */
    IReportServiceParams.prototype.download;
    /** @type {?} */
    IReportServiceParams.prototype.format;
}
/** @enum {string} */
var ReportFormats = {
    XLSX: 'xlsx',
    PDF: 'pdf',
    DOCX: 'docx',
    HTML: 'html',
};
export { ReportFormats };
var ReportService = /** @class */ (function () {
    function ReportService(httpClient) {
        this.httpClient = httpClient;
        this.URL = window.location.href.indexOf('totvs-menu') > 0 ? '/totvs-menu/rest/report/run/'
            : '/dts/datasul-report/resources/run/';
    }
    /**
     * @param {?} params
     * @param {?=} showLoading
     * @return {?}
     */
    ReportService.prototype.generate = /**
     * @param {?} params
     * @param {?=} showLoading
     * @return {?}
     */
    function (params, showLoading) {
        var _this = this;
        if (showLoading === void 0) { showLoading = true; }
        /** @type {?} */
        var headers = { 'X-PO-Screen-Lock': showLoading ? 'true' : 'false' };
        /** @type {?} */
        var reportURL = "" + this.URL + params.reportName;
        if (params.properties.length > 0) {
            reportURL += '?';
            params.properties.forEach((/**
             * @param {?} property
             * @param {?} index
             * @return {?}
             */
            function (property, index) {
                if (index > 0) {
                    reportURL += '&';
                }
                reportURL += "c_properties=" + property.name + "&c_values=" + property.value;
            }));
        }
        reportURL += "&dialect=" + params.dialect + "&format=" + params.format;
        reportURL += "&program=" + params.programName + "&resultFileName=" + params.downloadName;
        return this.httpClient.post(reportURL, {}, { headers: headers, responseType: 'blob' })
            .pipe(map((/**
         * @param {?} report
         * @return {?}
         */
        function (report) {
            if (params.download) {
                _this.download(report, params.downloadName + "." + params.format);
            }
            return report;
        })));
    };
    /**
     * @param {?} file
     * @param {?} fileName
     * @return {?}
     */
    ReportService.prototype.download = /**
     * @param {?} file
     * @param {?} fileName
     * @return {?}
     */
    function (file, fileName) {
        /** @type {?} */
        var binaryData = [file];
        /** @type {?} */
        var downloadLink = document.createElement('a');
        /** @type {?} */
        var urlDownload = window.URL.createObjectURL(new Blob(binaryData, { type: file.type }));
        downloadLink.href = urlDownload;
        downloadLink.setAttribute('download', fileName);
        document.body.appendChild(downloadLink);
        downloadLink.click();
        window.URL.revokeObjectURL(urlDownload);
        downloadLink.remove();
    };
    ReportService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ReportService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ReportService;
}());
export { ReportService };
if (false) {
    /** @type {?} */
    ReportService.prototype.URL;
    /** @type {?} */
    ReportService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFFekMsK0JBR0M7OztJQUZDLHlCQUFhOztJQUNiLDBCQUFjOzs7OztBQUdoQiwwQ0FRQzs7O0lBUEMsMENBQW1COztJQUNuQiwyQ0FBb0I7O0lBQ3BCLDBDQUE2Qjs7SUFDN0IsdUNBQWdCOztJQUNoQiw0Q0FBcUI7O0lBQ3JCLHdDQUFrQjs7SUFDbEIsc0NBQXNCOzs7O0lBSXRCLE1BQU8sTUFBTTtJQUNiLEtBQU0sS0FBSztJQUNYLE1BQU8sTUFBTTtJQUNiLE1BQU8sTUFBTTs7O0FBR2Y7SUFPRSx1QkFBbUIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUp6QixRQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCO1lBQy9FLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQztJQUdoQixDQUFDOzs7Ozs7SUFFOUMsZ0NBQVE7Ozs7O0lBQVIsVUFBUyxNQUE0QixFQUFFLFdBQTJCO1FBQWxFLGlCQTBCQztRQTFCc0MsNEJBQUEsRUFBQSxrQkFBMkI7O1lBQzFELE9BQU8sR0FBRyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7O1lBRWxFLFNBQVMsR0FBRyxLQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVk7UUFFakQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEMsU0FBUyxJQUFJLEdBQUcsQ0FBQztZQUVqQixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7O1lBQUMsVUFBQyxRQUFtQixFQUFFLEtBQWE7Z0JBQzNELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDYixTQUFTLElBQUksR0FBRyxDQUFDO2lCQUNsQjtnQkFDRCxTQUFTLElBQUksa0JBQWdCLFFBQVEsQ0FBQyxJQUFJLGtCQUFhLFFBQVEsQ0FBQyxLQUFPLENBQUM7WUFDMUUsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELFNBQVMsSUFBSSxjQUFZLE1BQU0sQ0FBQyxPQUFPLGdCQUFXLE1BQU0sQ0FBQyxNQUFRLENBQUM7UUFDbEUsU0FBUyxJQUFJLGNBQVksTUFBTSxDQUFDLFdBQVcsd0JBQW1CLE1BQU0sQ0FBQyxZQUFjLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQzFFLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxNQUFNO1lBQ2QsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNuQixLQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBSyxNQUFNLENBQUMsWUFBWSxTQUFJLE1BQU0sQ0FBQyxNQUFRLENBQUMsQ0FBQzthQUNsRTtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDUixDQUFDOzs7Ozs7SUFFRCxnQ0FBUTs7Ozs7SUFBUixVQUFTLElBQVUsRUFBRSxRQUFnQjs7WUFDN0IsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDOztZQUNuQixZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7O1lBQzFDLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFekYsWUFBWSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUM7UUFDaEMsWUFBWSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkFoREYsVUFBVTs7OztnQkExQkYsVUFBVTs7SUEyRW5CLG9CQUFDO0NBQUEsQUFqREQsSUFpREM7U0EvQ1ksYUFBYTs7O0lBQ3hCLDRCQUM2RDs7SUFHakQsbUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzL21hcCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wZXJ0eSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlcG9ydFNlcnZpY2VQYXJhbXMge1xyXG4gIHJlcG9ydE5hbWU6IHN0cmluZzsgLy8gTm9tZSBkbyBycHREZXNpZ25cclxuICBwcm9ncmFtTmFtZTogc3RyaW5nOyAvLyBQcm9ncmFtYSBQcm9ncmVzc1xyXG4gIHByb3BlcnRpZXM6IEFycmF5PElQcm9wZXJ0eT47XHJcbiAgZGlhbGVjdDogc3RyaW5nO1xyXG4gIGRvd25sb2FkTmFtZTogc3RyaW5nO1xyXG4gIGRvd25sb2FkOiBib29sZWFuO1xyXG4gIGZvcm1hdDogUmVwb3J0Rm9ybWF0cztcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUmVwb3J0Rm9ybWF0cyB7XHJcbiAgWExTWCA9ICd4bHN4JyxcclxuICBQREYgPSAncGRmJyxcclxuICBET0NYID0gJ2RvY3gnLFxyXG4gIEhUTUwgPSAnaHRtbCdcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcG9ydFNlcnZpY2Uge1xyXG4gIHB1YmxpYyByZWFkb25seSBVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCd0b3R2cy1tZW51JykgPiAwID8gJy90b3R2cy1tZW51L3Jlc3QvcmVwb3J0L3J1bi8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJy9kdHMvZGF0YXN1bC1yZXBvcnQvcmVzb3VyY2VzL3J1bi8nO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBnZW5lcmF0ZShwYXJhbXM6IElSZXBvcnRTZXJ2aWNlUGFyYW1zLCBzaG93TG9hZGluZzogYm9vbGVhbiA9IHRydWUpOiBPYnNlcnZhYmxlPEJsb2I+IHtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLVNjcmVlbi1Mb2NrJzogc2hvd0xvYWRpbmcgPyAndHJ1ZScgOiAnZmFsc2UnIH07XHJcblxyXG4gICAgbGV0IHJlcG9ydFVSTCA9IGAke3RoaXMuVVJMfSR7cGFyYW1zLnJlcG9ydE5hbWV9YDtcclxuXHJcbiAgICBpZiAocGFyYW1zLnByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXBvcnRVUkwgKz0gJz8nO1xyXG5cclxuICAgICAgcGFyYW1zLnByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHk6IElQcm9wZXJ0eSwgaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgIHJlcG9ydFVSTCArPSAnJic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcG9ydFVSTCArPSBgY19wcm9wZXJ0aWVzPSR7cHJvcGVydHkubmFtZX0mY192YWx1ZXM9JHtwcm9wZXJ0eS52YWx1ZX1gO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXBvcnRVUkwgKz0gYCZkaWFsZWN0PSR7cGFyYW1zLmRpYWxlY3R9JmZvcm1hdD0ke3BhcmFtcy5mb3JtYXR9YDtcclxuICAgIHJlcG9ydFVSTCArPSBgJnByb2dyYW09JHtwYXJhbXMucHJvZ3JhbU5hbWV9JnJlc3VsdEZpbGVOYW1lPSR7cGFyYW1zLmRvd25sb2FkTmFtZX1gO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdChyZXBvcnRVUkwsIHt9LCB7IGhlYWRlcnMsIHJlc3BvbnNlVHlwZTogJ2Jsb2InIH0pXHJcbiAgICAgIC5waXBlKG1hcChyZXBvcnQgPT4ge1xyXG4gICAgICAgIGlmIChwYXJhbXMuZG93bmxvYWQpIHtcclxuICAgICAgICAgIHRoaXMuZG93bmxvYWQocmVwb3J0LCBgJHtwYXJhbXMuZG93bmxvYWROYW1lfS4ke3BhcmFtcy5mb3JtYXR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXBvcnQ7XHJcbiAgICAgIH0pKTtcclxuICB9XHJcblxyXG4gIGRvd25sb2FkKGZpbGU6IEJsb2IsIGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGJpbmFyeURhdGEgPSBbZmlsZV07XHJcbiAgICBjb25zdCBkb3dubG9hZExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICBjb25zdCB1cmxEb3dubG9hZCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKGJpbmFyeURhdGEsIHsgdHlwZTogZmlsZS50eXBlIH0pKTtcclxuXHJcbiAgICBkb3dubG9hZExpbmsuaHJlZiA9IHVybERvd25sb2FkO1xyXG4gICAgZG93bmxvYWRMaW5rLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlTmFtZSk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkTGluayk7XHJcbiAgICBkb3dubG9hZExpbmsuY2xpY2soKTtcclxuICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybERvd25sb2FkKTtcclxuICAgIGRvd25sb2FkTGluay5yZW1vdmUoKTtcclxuICB9XHJcbn1cclxuIl19