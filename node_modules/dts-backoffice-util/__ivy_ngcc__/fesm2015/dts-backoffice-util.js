import { Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, ViewChild, Input, Output, Pipe, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { map as map$1 } from 'rxjs/operators/map';
import { PoI18nService, PoNotificationService, PoModule } from '@po-ui/ng-components';
import { FormsModule } from '@angular/forms';
import { map as map$2 } from 'rxjs/internal/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@po-ui/ng-components';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';

const _c0 = ["scheduleExecutionForm"];
function TotvsScheduleExecutionComponent_po_datepicker_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-datepicker", 10);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_po_datepicker_4_Template_po_datepicker_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.model.execAppointDate = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.model.execAppointDate);
} }
function TotvsScheduleExecutionComponent_po_input_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-input", 11);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_po_input_5_Template_po_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.model.execAppointHour = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.model.execAppointHour);
} }
function TotvsScheduleExecutionComponent_div_10_po_input_7_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-input", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_input_7_Template_po_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.model.execAppointHourFinal = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.model.execAppointHourFinal);
} }
function TotvsScheduleExecutionComponent_div_10_po_number_8_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-number", 33);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_number_8_Template_po_number_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.model.frequencyValue = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r9.model.frequencyValue);
} }
function TotvsScheduleExecutionComponent_div_10_po_select_9_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-select", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_select_9_Template_po_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.model.frequencyType = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("p-options", ctx_r10.frequencyTypeOptions)("ngModel", ctx_r10.model.frequencyType);
} }
function TotvsScheduleExecutionComponent_div_10_po_input_17_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-input", 35);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_input_17_Template_po_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.model.execAppointHourFinal = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r11.model.execAppointHourFinal);
} }
function TotvsScheduleExecutionComponent_div_10_po_number_18_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-number", 36);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_number_18_Template_po_number_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.model.frequencyValue = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r12.model.frequencyValue);
} }
function TotvsScheduleExecutionComponent_div_10_po_select_19_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-select", 37);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_select_19_Template_po_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.model.frequencyType = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("p-options", ctx_r13.frequencyTypeOptions)("ngModel", ctx_r13.model.frequencyType);
} }
function TotvsScheduleExecutionComponent_div_10_po_input_27_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-input", 35);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_input_27_Template_po_input_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.model.execAppointHourFinal = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r14.model.execAppointHourFinal);
} }
function TotvsScheduleExecutionComponent_div_10_po_number_28_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-number", 36);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_number_28_Template_po_number_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.model.frequencyValue = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r15.model.frequencyValue);
} }
function TotvsScheduleExecutionComponent_div_10_po_select_29_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "po-select", 37);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_po_select_29_Template_po_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.model.frequencyType = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("p-options", ctx_r16.frequencyTypeOptions)("ngModel", ctx_r16.model.frequencyType);
} }
function TotvsScheduleExecutionComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r36 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "po-tabs");
    ɵngcc0.ɵɵelementStart(2, "po-tab", 13);
    ɵngcc0.ɵɵlistener("p-click", function TotvsScheduleExecutionComponent_div_10_Template_po_tab_p_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.setActiveTab(1); });
    ɵngcc0.ɵɵelementStart(3, "div", 14);
    ɵngcc0.ɵɵelementStart(4, "po-radio-group", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r37 = ɵngcc0.ɵɵnextContext(); return ctx_r37.model.frequency = $event; })("p-change", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_p_change_4_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r38 = ɵngcc0.ɵɵnextContext(); return ctx_r38.changeTypeFrequency(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 14);
    ɵngcc0.ɵɵelementStart(6, "po-input", 16);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_input_ngModelChange_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r39 = ɵngcc0.ɵɵnextContext(); return ctx_r39.model.execAppointHourInit = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, TotvsScheduleExecutionComponent_div_10_po_input_7_Template, 1, 1, "po-input", 17);
    ɵngcc0.ɵɵtemplate(8, TotvsScheduleExecutionComponent_div_10_po_number_8_Template, 1, 1, "po-number", 18);
    ɵngcc0.ɵɵtemplate(9, TotvsScheduleExecutionComponent_div_10_po_select_9_Template, 1, 2, "po-select", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "po-tab", 20);
    ɵngcc0.ɵɵlistener("p-click", function TotvsScheduleExecutionComponent_div_10_Template_po_tab_p_click_10_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r40 = ɵngcc0.ɵɵnextContext(); return ctx_r40.setActiveTab(2); });
    ɵngcc0.ɵɵelementStart(11, "div", 1);
    ɵngcc0.ɵɵelementStart(12, "po-multiselect", 21);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_multiselect_ngModelChange_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r41 = ɵngcc0.ɵɵnextContext(); return ctx_r41.model.selectWeeklys = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 14);
    ɵngcc0.ɵɵelementStart(14, "po-radio-group", 22);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_ngModelChange_14_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r42 = ɵngcc0.ɵɵnextContext(); return ctx_r42.model.frequency = $event; })("p-change", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_p_change_14_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r43 = ɵngcc0.ɵɵnextContext(); return ctx_r43.changeTypeFrequency(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 14);
    ɵngcc0.ɵɵelementStart(16, "po-input", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_input_ngModelChange_16_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r44 = ɵngcc0.ɵɵnextContext(); return ctx_r44.model.execAppointHourInit = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(17, TotvsScheduleExecutionComponent_div_10_po_input_17_Template, 1, 1, "po-input", 24);
    ɵngcc0.ɵɵtemplate(18, TotvsScheduleExecutionComponent_div_10_po_number_18_Template, 1, 1, "po-number", 25);
    ɵngcc0.ɵɵtemplate(19, TotvsScheduleExecutionComponent_div_10_po_select_19_Template, 1, 2, "po-select", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "po-tab", 27);
    ɵngcc0.ɵɵlistener("p-click", function TotvsScheduleExecutionComponent_div_10_Template_po_tab_p_click_20_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r45 = ɵngcc0.ɵɵnextContext(); return ctx_r45.setActiveTab(3); });
    ɵngcc0.ɵɵelementStart(21, "div", 1);
    ɵngcc0.ɵɵelementStart(22, "po-number", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_number_ngModelChange_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r46 = ɵngcc0.ɵɵnextContext(); return ctx_r46.model.dayOfMonth = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "div", 29);
    ɵngcc0.ɵɵelementStart(24, "po-radio-group", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_ngModelChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r47 = ɵngcc0.ɵɵnextContext(); return ctx_r47.model.frequency = $event; })("p-change", function TotvsScheduleExecutionComponent_div_10_Template_po_radio_group_p_change_24_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r48 = ɵngcc0.ɵɵnextContext(); return ctx_r48.changeTypeFrequency(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(25, "div", 29);
    ɵngcc0.ɵɵelementStart(26, "po-input", 31);
    ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_div_10_Template_po_input_ngModelChange_26_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r49 = ɵngcc0.ɵɵnextContext(); return ctx_r49.model.execAppointHourInit = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(27, TotvsScheduleExecutionComponent_div_10_po_input_27_Template, 1, 1, "po-input", 24);
    ɵngcc0.ɵɵtemplate(28, TotvsScheduleExecutionComponent_div_10_po_number_28_Template, 1, 1, "po-number", 25);
    ɵngcc0.ɵɵtemplate(29, TotvsScheduleExecutionComponent_div_10_po_select_29_Template, 1, 2, "po-select", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.frequency)("p-options", ctx_r3.frequencyOptions);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.execAppointHourInit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.selectWeeklys)("p-options", ctx_r3.weeklyOptions);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.frequency)("p-options", ctx_r3.frequencyOptions);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.execAppointHourInit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.dayOfMonth);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.frequency)("p-options", ctx_r3.frequencyOptions);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.model.execAppointHourInit);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.isFrenquency());
} }
class UserLoginService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.apiUrl = '/totvs-menu/rest/getSessionInfo';
        this.userLogin = undefined;
    }
    /**
     * @return {?}
     */
    getUserLogin() {
        if (localStorage.getItem('username')) {
            return of(localStorage.getItem('username'));
        }
        if (this.userLogin) {
            return of(this.userLogin);
        }
        else {
            return this.http.get(`${this.apiUrl}`)
                .pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.userLogin = response.userName;
                return response.userName;
            })));
        }
    }
}
UserLoginService.ɵfac = function UserLoginService_Factory(t) { return new (t || UserLoginService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
/** @nocollapse */
UserLoginService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ UserLoginService.ɵprov = ɵɵdefineInjectable({ factory: function UserLoginService_Factory() { return new UserLoginService(ɵɵinject(HttpClient)); }, token: UserLoginService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserLoginService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /** @type {?} */
    UserLoginService.prototype.apiUrl;
    /** @type {?} */
    UserLoginService.prototype.userLogin;
    /** @type {?} */
    UserLoginService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IProfile() { }
if (false) {
    /** @type {?} */
    IProfile.prototype.pageId;
    /** @type {?} */
    IProfile.prototype.dataCode;
    /** @type {?} */
    IProfile.prototype.userCode;
    /** @type {?|undefined} */
    IProfile.prototype.dataValue;
}
/**
 * @record
 */
function IProfileResponse() { }
if (false) {
    /** @type {?} */
    IProfileResponse.prototype.message;
    /** @type {?} */
    IProfileResponse.prototype.length;
    /** @type {?} */
    IProfileResponse.prototype.data;
}
/** @enum {number} */
const EDataType = {
    STRING: 1,
    JSON: 2,
};
EDataType[EDataType.STRING] = 'STRING';
EDataType[EDataType.JSON] = 'JSON';
class ProfileService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.apiURL = '/dts/datasul-rest/resources/api/btb/btapi930za';
    }
    /**
     * @param {?} profile
     * @return {?}
     */
    setProfile(profile) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': 'true' };
        const { pageId, userCode } = profile;
        return this.http
            .post(`${this.apiURL}/setProfile?userCode=${userCode}&pageId=${pageId}`, profile, { headers });
    }
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    getProfileAsString(profile, showLoading) {
        return this.getProfile(profile, EDataType.STRING, showLoading ? 'true' : 'false');
    }
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    getProfileAsJSON(profile, showLoading) {
        return this.getProfile(profile, EDataType.JSON, showLoading ? 'true' : 'false');
    }
    /**
     * @private
     * @param {?} profile
     * @param {?} dataType
     * @param {?=} showLoading
     * @return {?}
     */
    getProfile(profile, dataType, showLoading) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': showLoading };
        const { pageId, dataCode, userCode } = profile;
        return this.http
            .get(`${this.apiURL}/getProfile?userCode=${userCode}&pageId=${pageId}&dataCode=${dataCode}`, { headers })
            .pipe(map$1((/**
         * @param {?} preference
         * @return {?}
         */
        preference => {
            if (preference.data[0]) {
                if (dataType === EDataType.STRING) {
                    return preference.data[0].dataValue;
                }
                if (dataType === EDataType.JSON) {
                    return JSON.parse(preference.data[0].dataValue);
                }
            }
            else {
                return undefined;
            }
        })));
    }
}
ProfileService.ɵfac = function ProfileService_Factory(t) { return new (t || ProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
/** @nocollapse */
ProfileService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ProfileService.ɵprov = ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(ɵɵinject(HttpClient)); }, token: ProfileService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProfileService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /** @type {?} */
    ProfileService.prototype.apiURL;
    /** @type {?} */
    ProfileService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IProperty() { }
if (false) {
    /** @type {?} */
    IProperty.prototype.name;
    /** @type {?} */
    IProperty.prototype.value;
}
/**
 * @record
 */
function IReportServiceParams() { }
if (false) {
    /** @type {?} */
    IReportServiceParams.prototype.reportName;
    /** @type {?} */
    IReportServiceParams.prototype.programName;
    /** @type {?} */
    IReportServiceParams.prototype.properties;
    /** @type {?} */
    IReportServiceParams.prototype.dialect;
    /** @type {?} */
    IReportServiceParams.prototype.downloadName;
    /** @type {?} */
    IReportServiceParams.prototype.download;
    /** @type {?} */
    IReportServiceParams.prototype.format;
}
/** @enum {string} */
const ReportFormats = {
    XLSX: 'xlsx',
    PDF: 'pdf',
    DOCX: 'docx',
    HTML: 'html',
};
class ReportService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.URL = window.location.href.indexOf('totvs-menu') > 0 ? '/totvs-menu/rest/report/run/'
            : '/dts/datasul-report/resources/run/';
    }
    /**
     * @param {?} params
     * @param {?=} showLoading
     * @return {?}
     */
    generate(params, showLoading = true) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': showLoading ? 'true' : 'false' };
        /** @type {?} */
        let reportURL = `${this.URL}${params.reportName}`;
        if (params.properties.length > 0) {
            reportURL += '?';
            params.properties.forEach((/**
             * @param {?} property
             * @param {?} index
             * @return {?}
             */
            (property, index) => {
                if (index > 0) {
                    reportURL += '&';
                }
                reportURL += `c_properties=${property.name}&c_values=${property.value}`;
            }));
        }
        reportURL += `&dialect=${params.dialect}&format=${params.format}`;
        reportURL += `&program=${params.programName}&resultFileName=${params.downloadName}`;
        return this.httpClient.post(reportURL, {}, { headers, responseType: 'blob' })
            .pipe(map$1((/**
         * @param {?} report
         * @return {?}
         */
        report => {
            if (params.download) {
                this.download(report, `${params.downloadName}.${params.format}`);
            }
            return report;
        })));
    }
    /**
     * @param {?} file
     * @param {?} fileName
     * @return {?}
     */
    download(file, fileName) {
        /** @type {?} */
        const binaryData = [file];
        /** @type {?} */
        const downloadLink = document.createElement('a');
        /** @type {?} */
        const urlDownload = window.URL.createObjectURL(new Blob(binaryData, { type: file.type }));
        downloadLink.href = urlDownload;
        downloadLink.setAttribute('download', fileName);
        document.body.appendChild(downloadLink);
        downloadLink.click();
        window.URL.revokeObjectURL(urlDownload);
        downloadLink.remove();
    }
}
ReportService.ɵfac = function ReportService_Factory(t) { return new (t || ReportService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
ReportService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReportService, factory: ReportService.ɵfac });
/** @nocollapse */
ReportService.ctorParameters = () => [
    { type: HttpClient }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReportService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /** @type {?} */
    ReportService.prototype.URL;
    /** @type {?} */
    ReportService.prototype.httpClient;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BreadcrumbControlService {
    constructor() { }
    /**
     * @return {?}
     */
    newBreadcrumb() {
        this.breadcrumb = { items: [] };
    }
    /**
     * @param {?} literal
     * @param {?} activatedRoute
     * @return {?}
     */
    addBreadcrumb(literal, activatedRoute) {
        this.addBreadcrumbURL(literal, decodeURIComponent(activatedRoute.snapshot['_routerState'].url));
    }
    /**
     * @param {?} literal
     * @param {?} url
     * @return {?}
     */
    addBreadcrumbURL(literal, url) {
        if (!literal || literal === '') {
            return;
        }
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        /** @type {?} */
        const breadcrumbAux = { items: [] };
        /** @type {?} */
        let idx = 0;
        for (idx = 0; idx < this.breadcrumb.items.length; idx++) {
            if (this.breadcrumb.items[idx].label !== literal) {
                breadcrumbAux.items.push(this.breadcrumb.items[idx]);
            }
            else {
                break;
            }
        }
        breadcrumbAux.items.push({ label: literal, link: url });
        this.breadcrumb = breadcrumbAux;
    }
    /**
     * @param {?} literal
     * @param {?} valueOld
     * @param {?} valueNew
     * @return {?}
     */
    updBreadcrumbURL(literal, valueOld, valueNew) {
        /** @type {?} */
        let currentRouterURL = this.getCurrentRouter();
        if (!currentRouterURL) {
            return;
        }
        if (!valueOld) {
            return;
        }
        if (!valueNew) {
            return;
        }
        currentRouterURL = currentRouterURL.replace(valueOld, valueNew);
        this.addBreadcrumbURL(literal, currentRouterURL);
    }
    /**
     * @return {?}
     */
    getBreadcrumb() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        return this.breadcrumb;
    }
    /**
     * @return {?}
     */
    getCurrentRouter() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 0) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 1].link;
    }
    /**
     * @return {?}
     */
    getPrevRouter() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 1) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 2].link;
    }
    /**
     * @return {?}
     */
    hasPreviousRouter() {
        return this.breadcrumb.items.length > 1;
    }
}
BreadcrumbControlService.ɵfac = function BreadcrumbControlService_Factory(t) { return new (t || BreadcrumbControlService)(); };
BreadcrumbControlService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BreadcrumbControlService, factory: BreadcrumbControlService.ɵfac });
/** @nocollapse */
BreadcrumbControlService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbControlService, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    BreadcrumbControlService.prototype.breadcrumb;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MenuDatasulService {
    constructor() { }
    /**
     * @param {?} program
     * @return {?}
     */
    callProgress(program) {
        /**
         * var program = {};
         * program['prg'] = "cd0210";
         * program['params'] = '01|123456'
         */
        parent.postMessage({ program }, '*');
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    sendNotification(notification) {
        /**
         * var notification = {};
         * notification['type'] = 'success';
         * notification['title'] = 'Notification Title'
         * notification['detail'] = 'Notification Detail'
         */
        parent.postMessage({ notification }, '*');
    }
    /**
     * @param {?} programName
     * @param {?} params
     * @param {?=} parent
     * @return {?}
     */
    openPath(programName, params, parent = true) {
        /** @type {?} */
        const datasulPath = window.location.href.indexOf('totvs-menu') > 0 ? 'totvs-menu' : 'menu-html';
        /** @type {?} */
        const baseUrl = `/${datasulPath}/#/${datasulPath}/program-html/${programName}/#`;
        if (parent) {
            window.open(`${baseUrl}/${params}`, '_parent');
        }
        else {
            window.open(`${baseUrl}/${params}`);
        }
    }
}
MenuDatasulService.ɵfac = function MenuDatasulService_Factory(t) { return new (t || MenuDatasulService)(); };
MenuDatasulService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MenuDatasulService, factory: MenuDatasulService.ɵfac });
/** @nocollapse */
MenuDatasulService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MenuDatasulService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CacheParamsService {
    constructor() {
        this.values = {};
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setValue(key, value) {
        this.values[key] = value;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        return this.values[key];
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeValue(key) {
        delete this.values[key];
    }
}
CacheParamsService.ɵfac = function CacheParamsService_Factory(t) { return new (t || CacheParamsService)(); };
/** @nocollapse */
CacheParamsService.ctorParameters = () => [];
/** @nocollapse */ CacheParamsService.ɵprov = ɵɵdefineInjectable({ factory: function CacheParamsService_Factory() { return new CacheParamsService(); }, token: CacheParamsService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CacheParamsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    CacheParamsService.prototype.values;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.000
Data Criação: 18/04/2019
*/
class DateUtil {
    constructor() { }
    /* Transforma data para o padrão YYYY-MM-DD */
    /**
     * @param {?} date
     * @return {?}
     */
    static dateToQueryParam(date) {
        /** @type {?} */
        const iDay = date.getDate();
        /** @type {?} */
        const iMonth = date.getMonth() + 1;
        /** @type {?} */
        const iYear = date.getFullYear();
        return `${iYear}-${this.pad(iMonth)}-${this.pad(iDay)}`;
    }
    /* Transforma data no padrão YYYY-MM-DD para DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    static queryParamToDate(param) {
        /** @type {?} */
        const iDay = +param.split('-')[2];
        /** @type {?} */
        const iMonth = +param.split('-')[1];
        /** @type {?} */
        const iYear = +param.split('-')[0];
        return new Date(iYear, iMonth - 1, iDay);
    }
    /* Valida se foi informado uma data válida */
    /**
     * @param {?} date
     * @return {?}
     */
    static isValidDate(date) {
        return date instanceof Date && !isNaN(date.getTime());
    }
    /* Ajusta a data retornando o padrão DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    static ajustDate(param) {
        if (param instanceof Date) {
            return param;
        }
        if (!param) {
            return param;
        }
        return this.queryParamToDate(param.split('T')[0]);
    }
    /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
    /**
     * @param {?=} values
     * @param {?=} fieldName
     * @return {?}
     */
    static ajustDateToModel(values = {}, fieldName) {
        if (values.hasOwnProperty(fieldName) && (values[fieldName])) {
            if (values[fieldName].indexOf('T') >= 0) {
                return new Date(values[fieldName]);
            }
            /** @type {?} */
            const iDay = +values[fieldName].split('-')[2];
            /** @type {?} */
            const iMonth = +values[fieldName].split('-')[1];
            /** @type {?} */
            const iYear = +values[fieldName].split('-')[0];
            return new Date(iYear, iMonth - 1, iDay);
        }
        return null;
    }
    /* Adicona zero a esquerda do número */
    /**
     * @param {?} number
     * @return {?}
     */
    static pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.009
Data Criação: 06/08/2018
*/
class DisclaimerUtil {
    /**
     * @param {?} poNotification
     * @param {?} poI18nPipe
     * @param {?} literals
     */
    constructor(poNotification, poI18nPipe, literals) {
        this.literals = {};
        this.poNotification = poNotification;
        this.poI18nPipe = poI18nPipe;
        this.literals = literals;
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} tradValue
     * @param {?=} vldBlank
     * @return {?}
     */
    makeDisclaimer(property, value, hideClose = false, tradValue = false, vldBlank = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        if (vldBlank && value === '') {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${tradValue ? this.literals[value] : value}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} vldBlank
     * @return {?}
     */
    makeDisclaimerFromNumber(property, value, hideClose = false, vldBlank = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        if (vldBlank && value === 0) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${value}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromBoolean(property, value, hideClose = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${value ? this.literals['yes'] : this.literals['no']}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromDate(property, value, hideClose = false) {
        /** @type {?} */
        const dDate = this.ajustDate(value);
        if (!this.isValidDate(dDate)) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${dDate.toLocaleDateString()}`,
            property: `${property}`,
            value: `${this.dateToQueryParam(dDate)}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} length
     * @param {?=} hideClose
     * @param {?=} tradValue
     * @return {?}
     */
    makeDisclaimerFromMultiSelect(property, value, length = 0, hideClose = false, tradValue = false) {
        /** @type {?} */
        let lstLabels = '';
        /** @type {?} */
        let lstValues = '';
        if (!value) {
            return { label: '', property: '', value: '' };
        }
        if (value.length === 0 || (length > 0 && value.length === length)) {
            lstLabels = this.literals['all'];
            lstValues = 'all';
        }
        else {
            value.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (lstLabels !== '') {
                    lstLabels = `${lstLabels}, `;
                }
                if (lstValues !== '') {
                    lstValues = `${lstValues},`;
                }
                lstLabels = `${lstLabels}${tradValue ? this.literals[item] : item}`;
                lstValues = `${lstValues}${item}`;
            }));
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${lstLabels}`,
            property: `${property}`,
            value: `${lstValues}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} length
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromCheckboxGroup(property, value, length = 0, hideClose = false) {
        /** @type {?} */
        let lstLabels = '';
        /** @type {?} */
        let lstValues = '';
        if (!value) {
            return { label: '', property: '', value: '' };
        }
        if (value.length === 0) {
            lstLabels = this.literals['none'];
            lstValues = 'none';
        }
        else if (length > 0 && value.length === length) {
            lstLabels = this.literals['all'];
            lstValues = 'all';
        }
        else {
            value.map((/**
             * @param {?} checkParam
             * @return {?}
             */
            checkParam => {
                if (lstLabels !== '') {
                    lstLabels = `${lstLabels}, `;
                }
                if (lstValues !== '') {
                    lstValues = `${lstValues},`;
                }
                lstLabels = `${lstLabels}${this.literals[checkParam]}`;
                lstValues = `${lstValues}${checkParam}`;
            }));
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${lstLabels}`,
            property: `${property}`,
            value: `${lstValues}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeCharacter(property, value, hideClose = false, validateEqual = true) {
        if (value.valInitial === null || value.valInitial === undefined) {
            value.valInitial = value.iniInitial;
        }
        if (value.valFinal === null || value.valFinal === undefined) {
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            value.iniInitial === value.valInitial &&
            value.iniFinal === value.valFinal) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], `'${value.valInitial}'`, `'${value.valFinal}'`]),
            property: `${property}`,
            value: `${value.valInitial};${value.valFinal}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeNumber(property, value, hideClose = false, validateEqual = true) {
        if (value.valInitial === null || value.valInitial === undefined) {
            value.valInitial = value.iniInitial;
        }
        if (value.valFinal === null || value.valFinal === undefined) {
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            value.iniInitial === value.valInitial &&
            value.iniFinal === value.valFinal) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], value.valInitial, value.valFinal]),
            property: `${property}`,
            value: `${value.valInitial};${value.valFinal}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeDate(property, value, hideClose = false, validateEqual = true) {
        /** @type {?} */
        let valInitDate = this.ajustDate(value.valInitial);
        /** @type {?} */
        let valFinalDate = this.ajustDate(value.valFinal);
        if (!this.isValidDate(valInitDate)) {
            valInitDate = value.iniInitial;
            value.valInitial = value.iniInitial;
        }
        if (!this.isValidDate(valFinalDate)) {
            valFinalDate = value.iniFinal;
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            this.dateToQueryParam(value.iniInitial) === this.dateToQueryParam(valInitDate) &&
            this.dateToQueryParam(value.iniFinal) === this.dateToQueryParam(valFinalDate)) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], valInitDate.toLocaleDateString(), valFinalDate.toLocaleDateString()]),
            property: `${property}`,
            value: `${this.dateToQueryParam(valInitDate)};${this.dateToQueryParam(valFinalDate)}`
        };
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzCharFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = item.value;
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzNumberFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = item.value;
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzBooleanFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        const returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            /** @type {?} */
            const disclaimerFind = disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.property === property));
            if (disclaimerFind && disclaimerFind.value !== null && disclaimerFind.value !== undefined) {
                if (disclaimerFind.value === 'true') {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzDateFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = this.ajustDate(defaultValue);
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = this.ajustDate(item.value);
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectCharFromDisclamer(disclaimers, property, defaultValue) {
        return this.atzMultiSelectFromDisclamer('char', disclaimers, property, defaultValue);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectNumberFromDisclamer(disclaimers, property, defaultValue) {
        return this.atzMultiSelectFromDisclamer('number', disclaimers, property, defaultValue);
    }
    /**
     * @param {?} type
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectFromDisclamer(type, disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = [];
        defaultValue.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            returnValue.push(item.value);
        }));
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null || item.value === 'all' || item.value === 'none') {
                        return false;
                    }
                    returnValue = [];
                    item.value.split(',').forEach((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    itemOpt => {
                        if (type === 'char') {
                            returnValue.push(itemOpt);
                        }
                        if (type === 'number') {
                            returnValue.push(+itemOpt);
                        }
                    }));
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} options
     * @return {?}
     */
    atzCheckboxFromDisclamer(disclaimers, property, options) {
        /** @type {?} */
        let returnValue = [];
        options.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            returnValue.push(item.value);
        }));
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null || item.value === 'all' || item.value === 'none') {
                        return false;
                    }
                    returnValue = [];
                    item.value.split(',').forEach((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    itemOpt => {
                        returnValue.push(itemOpt);
                    }));
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeChar
     * @return {?}
     */
    atzRangeCharFromDisclamer(disclaimers, property, rangeChar) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeCharFromQueryParam(value, rangeChar);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeNum
     * @return {?}
     */
    atzRangeNumFromDisclamer(disclaimers, property, rangeNum) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeNumFromQueryParam(value, rangeNum);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeDate
     * @return {?}
     */
    atzRangeDateFromDisclamer(disclaimers, property, rangeDate) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeDateFromQueryParam(value, rangeDate);
    }
    /**
     * @param {?} value
     * @param {?} rangeChar
     * @return {?}
     */
    atzRangeCharFromQueryParam(value, rangeChar) {
        rangeChar.valInitial = rangeChar.iniInitial;
        rangeChar.valFinal = rangeChar.iniFinal;
        if (!value || value === '') {
            return rangeChar;
        }
        rangeChar.valInitial = value.split(';')[0];
        rangeChar.valFinal = value.split(';')[1];
        if (rangeChar.valFinal === null || rangeChar.valFinal === undefined) {
            rangeChar.valFinal = rangeChar.iniFinal;
        }
        return rangeChar;
    }
    /**
     * @param {?} value
     * @param {?} rangeNum
     * @return {?}
     */
    atzRangeNumFromQueryParam(value, rangeNum) {
        rangeNum.valInitial = rangeNum.iniInitial;
        rangeNum.valFinal = rangeNum.iniFinal;
        if (!value || value === '') {
            return rangeNum;
        }
        rangeNum.valInitial = +value.split(';')[0];
        rangeNum.valFinal = +value.split(';')[1];
        if (rangeNum.valFinal === null || rangeNum.valFinal === undefined) {
            rangeNum.valFinal = rangeNum.iniFinal;
        }
        return rangeNum;
    }
    /**
     * @param {?} value
     * @param {?} rangeDate
     * @return {?}
     */
    atzRangeDateFromQueryParam(value, rangeDate) {
        rangeDate.valInitial = rangeDate.iniInitial;
        rangeDate.valFinal = rangeDate.iniFinal;
        if (!value || value === '') {
            return rangeDate;
        }
        rangeDate.valInitial = this.queryParamToDate(value.split(';')[0]);
        rangeDate.valFinal = this.queryParamToDate(value.split(';')[1]);
        if (rangeDate.valFinal === null || rangeDate.valFinal === undefined) {
            rangeDate.valFinal = rangeDate.iniFinal;
        }
        return rangeDate;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    dateToQueryParam(date) {
        /** @type {?} */
        const iDay = date.getDate();
        /** @type {?} */
        const iMonth = date.getMonth() + 1;
        /** @type {?} */
        const iYear = date.getFullYear();
        return `${iYear}-${this.pad(iMonth)}-${this.pad(iDay)}`;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    queryParamToDate(param) {
        /** @type {?} */
        const iDay = +param.split('-')[2];
        /** @type {?} */
        const iMonth = +param.split('-')[1];
        /** @type {?} */
        const iYear = +param.split('-')[0];
        return new Date(iYear, iMonth - 1, iDay);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValidDate(date) {
        return date instanceof Date && !isNaN(date.getTime());
    }
    /**
     * @param {?} param
     * @return {?}
     */
    ajustDate(param) {
        if (param instanceof Date) {
            return param;
        }
        if (!param) {
            return param;
        }
        return this.queryParamToDate(param.split('T')[0]);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }
}
if (false) {
    /** @type {?} */
    DisclaimerUtil.prototype.poNotification;
    /** @type {?} */
    DisclaimerUtil.prototype.poI18nPipe;
    /** @type {?} */
    DisclaimerUtil.prototype.literals;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FieldValidationUtil {
    /**
     * @param {?} poNotification
     * @param {?} poI18nPipe
     * @param {?} literals
     */
    constructor(poNotification, poI18nPipe, literals) {
        this.literals = {};
        this.poNotification = poNotification;
        this.poI18nPipe = poI18nPipe;
        this.literals = literals;
        this.disclaimerUtil = new DisclaimerUtil(this.poNotification, this.poI18nPipe, this.literals);
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldCharacter(field, value) {
        if (!value || value.trim() === '') {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida uma faixa de caracteres se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeCharacter(initialField, finalField, initialValue, finalValue) {
        if (!initialValue || !finalValue) {
            return true;
        }
        if (initialValue.trim().toUpperCase() > finalValue.trim().toUpperCase()) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} vldValue
     * @param {?=} zeroAccept
     * @return {?}
     */
    vldFieldNumber(field, value, vldValue = false, zeroAccept = false) {
        if (vldValue && !this.vldValueOfNumber(field, value)) {
            return false;
        }
        if ((!value) || value <= 0) {
            if (value === 0 && zeroAccept === true) {
                return true;
            }
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldValueOfNumber(field, value) {
        if (value && value < 0) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} vldValue
     * @return {?}
     */
    vldFieldPercent(field, value, vldValue = false) {
        if (vldValue && !this.vldValueOfPercent(field, value)) {
            return false;
        }
        if (!this.vldFieldNumber(field, value)) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldValueOfPercent(field, value) {
        if (value && value < 0) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        if (value && value > 100) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        return true;
    }
    // Valida uma faixa de números se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeNumber(initialField, finalField, initialValue, finalValue) {
        if (!initialValue) {
            initialValue = 0;
        }
        if (!finalValue) {
            finalValue = 0;
        }
        if (initialValue > finalValue) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldDate(field, value) {
        /** @type {?} */
        const valDate = this.disclaimerUtil.ajustDate(value);
        if (!this.disclaimerUtil.isValidDate(valDate)) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldDate'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida uma faixa de datas se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeDate(initialField, finalField, initialValue, finalValue) {
        if (!initialValue || !finalValue) {
            return true;
        }
        /** @type {?} */
        const valInitialDate = this.disclaimerUtil.ajustDate(initialValue).getTime();
        /** @type {?} */
        const valFinalDate = this.disclaimerUtil.ajustDate(finalValue).getTime();
        if (valInitialDate > valFinalDate) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldMultiSelect(field, value) {
        if (!value || value.length === 0) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldCheckbox(field, value) {
        if (!value || value.length === 0) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida formato conforme regra: "9" apenas números, "X" qualquer caracter, "!" apenas letras maiúsculas
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} format
     * @param {?=} replacePoint
     * @return {?}
     */
    vldFieldFormat(field, value, format, replacePoint = false) {
        /** @type {?} */
        let lOK = true;
        /** @type {?} */
        let oldFormat;
        if (!value) {
            return lOK;
        }
        /*Retira os pontos do formato*/
        if (replacePoint) {
            oldFormat = format;
            format = format.replace(/\./g, '');
        }
        if (value.length !== format.length) {
            lOK = false;
        }
        else {
            for (let idx = 0; idx < format.length; idx++) {
                if (format[idx] === '9') {
                    if (value[idx].replace(/[0-9]/, '9') !== '9') {
                        lOK = false;
                        break;
                    }
                }
                if (format[idx] === '!') {
                    if (value[idx].replace(/[A-Z]/, 'A') !== 'A') {
                        lOK = false;
                        break;
                    }
                }
            }
        }
        if (replacePoint) {
            format = oldFormat;
        }
        if (!lOK) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldFormat'], [this.literals[field], format])
            });
        }
        return lOK;
    }
}
if (false) {
    /** @type {?} */
    FieldValidationUtil.prototype.poNotification;
    /** @type {?} */
    FieldValidationUtil.prototype.poI18nPipe;
    /** @type {?} */
    FieldValidationUtil.prototype.literals;
    /** @type {?} */
    FieldValidationUtil.prototype.disclaimerUtil;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.000
Data Criação: 06/08/2018
*/
class FilterRangeUtil {
    constructor() {
    }
    /**
     * @param {?} iniInitial
     * @param {?} iniFinal
     * @return {?}
     */
    static makeFilterRangeCharacter(iniInitial, iniFinal) {
        return {
            iniInitial,
            iniFinal,
            valInitial: iniInitial,
            valFinal: iniFinal
        };
    }
    /**
     * @param {?} iniInitial
     * @param {?} iniFinal
     * @return {?}
     */
    static makeFilterRangeNumber(iniInitial, iniFinal) {
        return {
            iniInitial,
            iniFinal,
            valInitial: iniInitial,
            valFinal: iniFinal
        };
    }
    /**
     * @param {?} iniInitial
     * @param {?} iniFinal
     * @return {?}
     */
    static makeFilterRangeDate(iniInitial, iniFinal) {
        return {
            iniInitial,
            iniFinal,
            valInitial: iniInitial,
            valFinal: iniFinal
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.003
Data Criação: 18/04/2019
*/
/**
 * @record
 */
function ChartSeries() { }
if (false) {
    /** @type {?|undefined} */
    ChartSeries.prototype.name;
    /** @type {?|undefined} */
    ChartSeries.prototype.data;
}
/**
 * @record
 */
function ChartValues() { }
if (false) {
    /** @type {?} */
    ChartValues.prototype.minValue;
    /** @type {?} */
    ChartValues.prototype.maxValue;
}
class GenericFunctionsUtils {
    /**
     * @param {?} literals
     */
    constructor(literals) {
        this.literals = {};
        this.literals = literals;
    }
    /* Transforma uma Lista separada por "," em um Array */
    /**
     * @param {?} list
     * @return {?}
     */
    static listToArrayCharacter(list) {
        /** @type {?} */
        let returnArray = new Array();
        if (list && list !== '') {
            returnArray = list.split(',');
        }
        return returnArray;
    }
    /* Transforma um Array em uma Lista separada por ","  */
    /**
     * @param {?} array
     * @return {?}
     */
    static ArrayToListCharacter(array) {
        /** @type {?} */
        let list = '';
        if (array && array.length > 0) {
            list = array.join(',');
        }
        return list;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    static isEmpty(object) {
        /** @type {?} */
        let isEmpty = true;
        for (const content in object) {
            if (object.hasOwnProperty(content)) {
                isEmpty = false;
            }
        }
        return isEmpty;
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    static getChartValues(chartData) {
        /** @type {?} */
        let chartValues;
        /** @type {?} */
        let maxValue;
        /** @type {?} */
        let minValue;
        maxValue = undefined;
        minValue = undefined;
        chartData.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (maxValue === undefined && minValue === undefined) {
                maxValue = item.data[0];
                minValue = item.data[0];
            }
            else {
                if (item.data < minValue) {
                    minValue = item.data[0];
                }
                if (item.data > maxValue) {
                    maxValue = item.data[0];
                }
            }
        }));
        if (maxValue > 0 && minValue > 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue > 0 && minValue < 0) {
            chartValues = { maxValue: maxValue, minValue: minValue };
        }
        if (maxValue < 0 && minValue < 0) {
            /** @type {?} */
            const max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue > 0 && minValue === 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue === 0 && minValue < 0) {
            /** @type {?} */
            const max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue === 0 && minValue === 0) {
            chartValues = { maxValue: undefined, minValue: undefined };
        }
        chartValues.maxValue = Math.round(chartValues.maxValue);
        chartValues.minValue = Math.round(chartValues.minValue);
        return chartValues;
    }
    /*Deixa no list apenas o itens que existem no options*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    static atzMultiSelectListByOptions(options, list) {
        /** @type {?} */
        let idx;
        /** @type {?} */
        let newList;
        if (!list) {
            return list;
        }
        newList = new Array();
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                itemOptions => itemOptions.value === item));
                if (idx >= 0) {
                    newList.push(item);
                }
            }
        }));
        return newList;
    }
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    loadOptionsMultiSelect(options, list) {
        /** @type {?} */
        let idx;
        if (!list) {
            return;
        }
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                itemOptions => itemOptions.value === item));
                if (idx === -1) {
                    options.push({ label: item === 'all' ? this.literals['all'] : item, value: item });
                }
            }
        }));
    }
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} selectValue
     * @param {?=} tradValue
     * @return {?}
     */
    loadOptionsSelect(options, selectValue, tradValue = false) {
        /** @type {?} */
        let idx;
        if (!selectValue) {
            return;
        }
        if (selectValue) {
            idx = options.findIndex((/**
             * @param {?} itemOptions
             * @return {?}
             */
            itemOptions => itemOptions.value === selectValue));
            if (idx === -1) {
                options.push({ label: tradValue ? this.literals[selectValue] : selectValue, value: selectValue });
            }
        }
    }
    /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
    /**
     * @param {?} firstObject
     * @param {?} secondObject
     * @return {?}
     */
    compareObjects(firstObject, secondObject) {
        if (!firstObject || !secondObject) {
            return false;
        }
        /*Pega a lista de nomes dos campos do objetos e compara*/
        if (Object.getOwnPropertyNames(firstObject).length !== Object.getOwnPropertyNames(secondObject).length) {
            return false;
        }
        for (const content in firstObject) {
            if (content.substr(0, 1) === '$' || content.substr(0, 1) === '_') {
                continue;
            }
            if (firstObject[content] !== secondObject[content]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} charInd
     * @param {?} dateRef
     * @return {?}
     */
    referenceGeneration(charInd, dateRef) {
        /** @type {?} */
        let reference;
        /** @type {?} */
        let random;
        /** @type {?} */
        const iDay = dateRef.getDate();
        /** @type {?} */
        const iMonth = dateRef.getMonth() + 1;
        /** @type {?} */
        const iYear = dateRef.getFullYear();
        reference = `${this.pad(iYear)}${this.pad(iMonth)}${this.pad(iDay)}${charInd}`;
        random = btoa(`${(new Date()).getTime()}`);
        random = random.replace(/[=]/g, '');
        random = random.slice(random.length - 3, random.length);
        return `${reference}${random}`;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        if (number > 99) {
            return (number + '').slice(2, 4);
        }
        return number;
    }
}
if (false) {
    /** @type {?} */
    GenericFunctionsUtils.prototype.literals;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template T
 */
function TotvsResponse() { }
if (false) {
    /** @type {?} */
    TotvsResponse.prototype.items;
    /** @type {?|undefined} */
    TotvsResponse.prototype.hasNext;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IFilterRangeCharacter() { }
if (false) {
    /** @type {?} */
    IFilterRangeCharacter.prototype.iniInitial;
    /** @type {?} */
    IFilterRangeCharacter.prototype.iniFinal;
    /** @type {?} */
    IFilterRangeCharacter.prototype.valInitial;
    /** @type {?} */
    IFilterRangeCharacter.prototype.valFinal;
}
/**
 * @record
 */
function IFilterRangeNumber() { }
if (false) {
    /** @type {?} */
    IFilterRangeNumber.prototype.iniInitial;
    /** @type {?} */
    IFilterRangeNumber.prototype.iniFinal;
    /** @type {?} */
    IFilterRangeNumber.prototype.valInitial;
    /** @type {?} */
    IFilterRangeNumber.prototype.valFinal;
}
/**
 * @record
 */
function IFilterRangeDate() { }
if (false) {
    /** @type {?} */
    IFilterRangeDate.prototype.iniInitial;
    /** @type {?} */
    IFilterRangeDate.prototype.iniFinal;
    /** @type {?} */
    IFilterRangeDate.prototype.valInitial;
    /** @type {?} */
    IFilterRangeDate.prototype.valFinal;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParametersRpw {
}
if (false) {
    /** @type {?} */
    ParametersRpw.prototype.executionType;
    /** @type {?} */
    ParametersRpw.prototype.execAppointDate;
    /** @type {?} */
    ParametersRpw.prototype.execAppointHour;
    /** @type {?} */
    ParametersRpw.prototype.executionServer;
    /** @type {?} */
    ParametersRpw.prototype.repeatExecution;
    /** @type {?} */
    ParametersRpw.prototype.frequency;
    /** @type {?} */
    ParametersRpw.prototype.frequencyType;
    /** @type {?} */
    ParametersRpw.prototype.frequencyValue;
    /** @type {?} */
    ParametersRpw.prototype.execAppointHourInit;
    /** @type {?} */
    ParametersRpw.prototype.execAppointHourFinal;
    /** @type {?} */
    ParametersRpw.prototype.activeTab;
    /** @type {?} */
    ParametersRpw.prototype.selectWeeklys;
    /** @type {?} */
    ParametersRpw.prototype.dayOfMonth;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpwService {
    // private apiUrl = '/genericsZoom';
    // private urlJobScheduler = '/jobScheduler';
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.apiUrl = '/dts/datasul-rest/resources/prg/cdp/v1/genericsZoom';
        this.urlJobScheduler = '/dts/datasul-rest/resources/prg/framework/v1/jobScheduler';
        this.filterRpw = {
            fields: 'cod_servid_exec,des_servid_exec',
            filter: 'cod_servid_exec',
            filterZoom: 'cod_servid_exec',
            order: 'cod_servid_exec',
            table: 'servid_exec'
        };
    }
    /**
     * @param {?} param
     * @param {?} appId
     * @return {?}
     */
    getFilteredData(param, appId) {
        /** @type {?} */
        const localParams = Object.assign({}, this.filterRpw);
        /** @type {?} */
        let url = `${this.apiUrl}?pageSize=10&page=1&table=${localParams.table}`;
        url += `&fields=${localParams.fields}&order=${localParams.order}`;
        if (param.value) {
            url += `&${localParams.filterZoom}=*${param.value}*`;
        }
        return this.http.get(url, {})
            .pipe(map$2((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.convertToArrayComboOption(response.items, 'codServidExec', 'desServidExec'))));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getObjectByValue(value) {
        return this.http.get(`${this.apiUrl}/${value}`)
            .pipe(map$2((/**
         * @param {?} item
         * @return {?}
         */
        item => this.convertToThfComboOption(item, 'codServidExec', 'desServidExec'))));
    }
    /**
     * @param {?} parameters
     * @return {?}
     */
    createRpw(parameters) {
        /** @type {?} */
        const params = JSON.parse(JSON.stringify(parameters).replace(/\\\\/g, '*|'));
        return this.http.post(`${this.urlJobScheduler}`, params);
    }
    /* COMBO */
    /**
     * @param {?} items
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    convertToArrayComboOption(items, key, value) {
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            item => this.convertToThfComboOption(item, key, value)));
        }
        return [];
    }
    /**
     * @param {?} item
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    convertToThfComboOption(item, key, value) {
        item = item || {};
        return {
            value: item[key] || undefined,
            label: item[value] || undefined
        };
    }
}
RpwService.ɵfac = function RpwService_Factory(t) { return new (t || RpwService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
RpwService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RpwService, factory: RpwService.ɵfac });
/** @nocollapse */
RpwService.ctorParameters = () => [
    { type: HttpClient }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RpwService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.apiUrl;
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.urlJobScheduler;
    /** @type {?} */
    RpwService.prototype.filterRpw;
    /** @type {?} */
    RpwService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TotvsScheduleExecutionComponent {
    /**
     * @param {?} thfI18nService
     * @param {?} rpwService
     * @param {?} poNotification
     */
    constructor(thfI18nService, rpwService, poNotification) {
        this.thfI18nService = thfI18nService;
        this.rpwService = rpwService;
        this.poNotification = poNotification;
        this.programEMS5 = false;
        this.programVersion = '';
        this.endExecution = new EventEmitter();
        this.jsonObject = {};
        this.literals = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* VERIFICAR COMO FICARÁ A TRADUÇÃO
        forkJoin(
              this.thfI18nService.getLiterals(),
              this.thfI18nService.getLiterals({ context: 'generalRpw' })
          ).subscribe(literals => {
              literals.map(item => Object.assign(this.literals, item) );
              this.setupComponents();
          });*/
        this.setupComponents();
    }
    /**
     * @return {?}
     */
    setupComponents() {
        this.executionTypeOptions = [
            { label: 'Executar Hoje', value: 1 },
            { label: 'Agendar Execução', value: 2 }
        ];
        this.frequencyOptions = [
            { label: 'Uma vez no dia', value: 'no' },
            { label: 'Várias vezes no dia', value: 'yes' }
        ];
        this.frequencyTypeOptions = [
            { label: 'Hora(s)', value: 'hour' },
            { label: 'Minuto(s)', value: 'minute' }
        ];
        this.weeklyOptions = [
            { label: 'Domingo', value: 'Sunday' },
            { label: 'Segunda', value: 'Monday' },
            { label: 'Terça', value: 'Tuesday' },
            { label: 'Quarta', value: 'Wednesday' },
            { label: 'Quinta', value: 'Thursday' },
            { label: 'Sexta', value: 'Friday' },
            { label: 'Sábado', value: 'Saturday' }
        ];
        this.columns = [
            { property: 'cod_servid_exec', label: 'Código' },
            { property: 'des_servid_exec', label: 'Descrição' }
        ];
        this.model = new ParametersRpw();
        this.model.executionType = 1;
        this.model.activeTab = 1;
        this.model.repeatExecution = false;
    }
    /**
     * @return {?}
     */
    isExecutionSchedule() {
        return (this.model.executionType === 2);
    }
    /**
     * @return {?}
     */
    isRepeatExecution() {
        return this.model.repeatExecution;
    }
    /**
     * @return {?}
     */
    isFrenquency() {
        return (this.model.frequency === 'yes');
    }
    /**
     * @return {?}
     */
    changeRepeatExecution() {
        /** @type {?} */
        const date = new Date();
        this.model.execAppointHourInit = `${this.addZero(date.getHours())}:${this.addZero(date.getMinutes())}`;
        this.model.execAppointHourFinal = `${this.addZero(date.getHours())}:${this.addZero(date.getMinutes())}`;
        this.model.selectWeeklys = [];
        this.model.dayOfMonth = 0;
        this.model.frequency = 'no';
        this.model.frequencyType = 'hour';
        this.model.frequencyValue = 0;
    }
    /**
     * @return {?}
     */
    changeExecutionType() {
        /** @type {?} */
        const date = new Date();
        this.model.execAppointDate = date;
        this.model.execAppointHour = `${this.addZero(date.getHours())}:${this.addZero(date.getMinutes())}`;
    }
    /**
     * @return {?}
     */
    changeTypeFrequency() {
    }
    /**
     * @param {?} codTab
     * @return {?}
     */
    setActiveTab(codTab) {
        this.model.activeTab = codTab;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    addZero(i) {
        if (i < 10) {
            i = '0' + i;
        }
        return i;
    }
    /**
     * @return {?}
     */
    executeSchedule() {
        if (!this.validate()) {
            return;
        }
        this.jsonObject = {};
        this.jsonObject.status = 'active';
        this.jsonObject.processID = this.programName;
        this.jsonObject.recurrent = this.model.repeatExecution;
        this.jsonObject.executionParameter = {};
        if (this.model.executionType === 1) {
            /** @type {?} */
            const date = new Date();
            this.jsonObject.firstExecution = `${date.getFullYear()}-${(date.getMonth() + 1)}-${date.getDate()}T${this.addZero(date.getHours())}:${this.addZero(date.getMinutes())}:00.000Z`;
        }
        if (this.model.executionType === 2) {
            this.jsonObject.firstExecution = `${this.model.execAppointDate}T${this.model.execAppointHour}:00.000Z`;
        }
        this.jsonObject.executionParameter.parametros = [];
        this.jsonObject.executionParameter.parametros[0] = { chave: 'rpwServer', valor: this.model.executionServer };
        this.jsonObject.executionParameter.parametros[1] = { chave: 'RPW_PROGRAM', valor: this.externalName };
        this.jsonObject.executionParameter.parametros[2] = { chave: 'RPW_PRG_EMS5', valor: this.programEMS5 ? 'yes' : 'no' };
        this.jsonObject.executionParameter.parametros[3] = { chave: 'RPW_PRG_VERS', valor: this.programVersion };
        this.jsonObject.executionParameter.parametros[4] = {};
        this.jsonObject.executionParameter.parametros[4].parametros_negocio = this.parameters;
        // Executa hoje ou agendada
        this.rpwService.createRpw(this.jsonObject).subscribe((/**
         * @return {?}
         */
        () => {
            this.poNotification.success('Execução efetuada com sucesso !');
        }));
        if (this.model.repeatExecution) {
            if (this.model.activeTab === 1) {
                this.jsonObject.daily = {
                    hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                    minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm')
                };
            }
            if (this.model.activeTab === 2) {
                this.jsonObject.weekly = {
                    hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                    minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm'),
                    daysOfWeek: this.model.selectWeeklys
                };
            }
            if (this.model.activeTab === 3) {
                this.jsonObject.monthly = {
                    hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                    minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm'),
                    day: this.model.dayOfMonth
                };
            }
            if (this.isFrenquency()) {
                this.jsonObject.rangeExecutions = {
                    frequency: {
                        type: this.model.frequencyType,
                        value: this.model.frequencyValue
                    },
                    rangeLimit: {
                        hour: this.getHourOrMinute(this.model.execAppointHourFinal, 'h'),
                        minute: this.getHourOrMinute(this.model.execAppointHourFinal, 'm')
                    }
                };
            }
            // Executa a diária, semanal ou mensal
            this.rpwService.createRpw(this.jsonObject).subscribe((/**
             * @return {?}
             */
            () => {
            }));
        }
        this.endExecution.emit('endExecution');
    }
    /**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */
    getHourOrMinute(value, type) {
        if (type === 'h') {
            return +value.substring(0, 2);
        }
        if (type === 'm') {
            return +value.substring(3, 6);
        }
    }
    /**
     * @param {?} hourInit
     * @param {?} hourFinal
     * @return {?}
     */
    compareHour(hourInit, hourFinal) {
        if (hourInit === hourFinal) {
            return false;
        }
        if (this.getHourOrMinute(hourInit, 'h') < this.getHourOrMinute(hourFinal, 'h')) {
            return true;
        }
        if (this.getHourOrMinute(hourInit, 'm') > this.getHourOrMinute(hourFinal, 'm')) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    validate() {
        if (!this.scheduleExecutionForm.valid) {
            this.poNotification.error('Verifique as inconsistências em tela.');
            return false;
        }
        if (!this.model.executionServer) {
            this.poNotification.error('Servidor de Execução não foi informado.');
            return false;
        }
        if (this.isExecutionSchedule() && (!this.model.execAppointDate || !this.model.execAppointHour)) {
            this.poNotification.error('Informar a data e a hora para agendamento da execução.');
            return false;
        }
        if (this.model.repeatExecution) {
            if (!this.model.execAppointHourInit) {
                this.poNotification.error('Informar a hora de início para a execução.');
                return false;
            }
            if (this.model.activeTab === 2 && (this.model.selectWeeklys.length === 0)) {
                this.poNotification.error('Informar os dias da semana para a execução.');
                return false;
            }
            if (this.model.activeTab === 3 && (!this.model.dayOfMonth)) {
                this.poNotification.error('Informar o dia para a execução.');
                return false;
            }
            if (this.isFrenquency()) {
                if (!this.compareHour(this.model.execAppointHourInit, this.model.execAppointHourFinal)) {
                    this.poNotification.error('Hora Fim deve ser maior que Hora Início.');
                    return false;
                }
                if (this.model.frequencyValue === 0) {
                    this.poNotification.error('Informar a frequência de execução (A cada hora/minuto).');
                    return false;
                }
            }
        }
        return true;
    }
}
TotvsScheduleExecutionComponent.ɵfac = function TotvsScheduleExecutionComponent_Factory(t) { return new (t || TotvsScheduleExecutionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PoI18nService), ɵngcc0.ɵɵdirectiveInject(RpwService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PoNotificationService)); };
TotvsScheduleExecutionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TotvsScheduleExecutionComponent, selectors: [["app-totvs-schedule-execution"]], viewQuery: function TotvsScheduleExecutionComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scheduleExecutionForm = _t.first);
    } }, inputs: { programEMS5: "programEMS5", programVersion: "programVersion", programName: "programName", externalName: "externalName", parameters: "parameters" }, outputs: { endExecution: "endExecution" }, decls: 13, vars: 8, consts: [["scheduleExecutionForm", "ngForm"], [1, "po-row", "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12"], ["name", "executionType", "p-label", "Data de Execu\u00E7\u00E3o", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-options", "ngModelChange", "p-change"], ["class", "po-sm-6 po-md-6 po-lg-6 po-xl-6", "name", "model.execAppointDate", "p-label", "Agendar para", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["class", "po-sm-6 po-md-6 po-lg-6 po-xl-6", "name", "execAppointHour", "p-label", "Hora", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["name", "executionServer", "p-field-label", "des_servid_exec", "p-field-value", "cod_servid_exec", "p-label", "Servidor de Execu\u00E7\u00E3o", "p-placeholder", "Servidor de Execuc\u00E3o", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-filter-service", "ngModelChange"], ["name", "repeatExecution", "p-label", "Repetir ocorr\u00EAncia ?", "p-label-off", "N\u00E3o", "p-label-on", "Sim", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange", "click"], ["class", "po-row", 4, "ngIf"], [1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 2, "padding-top", "15px"], ["p-label", "Gerar Agendamento RPW", 2, "float", "right", 3, "click"], ["name", "model.execAppointDate", "p-label", "Agendar para", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["name", "execAppointHour", "p-label", "Hora", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], [1, "po-row"], ["p-label", "Di\u00E1ria", "p-active", "", 3, "p-click"], [1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6"], ["name", "frequencyDaily", "p-label", "Frequ\u00EAncia", "p-columns", "1", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-options", "ngModelChange", "p-change"], ["name", "execAppointHourInitDaily", "p-label", "Hora In\u00EDcio", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["class", "po-sm-6 po-md-6 po-lg-6 po-xl-6", "name", "execAppointHourFinalDaily", "p-label", "Hora Fim", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["class", "po-sm-5 po-md-5 po-lg-5 po-xl-5", "name", "frequencyValueDaily", "p-label", "A cada", "p-minlength", "1", "p-maxlength", "3", "p-min", "0", "p-max", "999", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["class", "po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7", "name", "frequencyTypeDaily", "p-label", "", 3, "p-options", "ngModel", "ngModelChange", 4, "ngIf"], ["p-label", "Semanal", 3, "p-click"], ["name", "selectWeeklys", "p-label", "Dias da Semana", "p-placeholder", "Escolha os dias da semana", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-options", "ngModelChange"], ["name", "frequencyWeekly", "p-label", "Frequ\u00EAncia", "p-columns", "1", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-options", "ngModelChange", "p-change"], ["name", "execAppointHourInitWeekly", "p-label", "Hora In\u00EDcio", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["class", "po-sm-6 po-md-6 po-lg-6 po-xl-6", "name", "execAppointHourFinalWeekly", "p-label", "Hora Fim", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["class", "po-sm-5 po-md-5 po-lg-5 po-xl-5", "name", "frequencyValueWeekly", "p-label", "A cada", "p-minlength", "1", "p-maxlength", "3", "p-min", "0", "p-max", "999", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["class", "po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7", "name", "frequencyTypeWeekly", "p-label", "", 3, "p-options", "ngModel", "ngModelChange", 4, "ngIf"], ["p-label", "Mensal", 3, "p-click"], ["name", "dayOfMonth", "p-label", "Dia do m\u00EAs", "p-minlength", "1", "p-maxlength", "2", "p-min", "0", "p-max", "31", 1, "po-sm-3", "po-md-3", "po-lg-3", "po-xl-3", 3, "ngModel", "ngModelChange"], [1, "po-row", "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6"], ["name", "frequencyMonthly", "p-label", "Frequ\u00EAncia", "p-columns", "1", 1, "po-sm-12", "po-md-12", "po-lg-12", "po-xl-12", 3, "ngModel", "p-options", "ngModelChange", "p-change"], ["name", "execAppointHourInitMonthly", "p-label", "Hora In\u00EDcio", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["name", "execAppointHourFinalDaily", "p-label", "Hora Fim", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["name", "frequencyValueDaily", "p-label", "A cada", "p-minlength", "1", "p-maxlength", "3", "p-min", "0", "p-max", "999", 1, "po-sm-5", "po-md-5", "po-lg-5", "po-xl-5", 3, "ngModel", "ngModelChange"], ["name", "frequencyTypeDaily", "p-label", "", 1, "po-mt-3", "po-sm-7", "po-md-7", "po-lg-7", "po-xl-7", 3, "p-options", "ngModel", "ngModelChange"], ["name", "execAppointHourFinalWeekly", "p-label", "Hora Fim", "p-mask", "99:99", "p-mask-format-model", "true", "p-pattern", "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", "p-error-pattern", "Hora inv\u00E1lida", 1, "po-sm-6", "po-md-6", "po-lg-6", "po-xl-6", 3, "ngModel", "ngModelChange"], ["name", "frequencyValueWeekly", "p-label", "A cada", "p-minlength", "1", "p-maxlength", "3", "p-min", "0", "p-max", "999", 1, "po-sm-5", "po-md-5", "po-lg-5", "po-xl-5", 3, "ngModel", "ngModelChange"], ["name", "frequencyTypeWeekly", "p-label", "", 1, "po-mt-3", "po-sm-7", "po-md-7", "po-lg-7", "po-xl-7", 3, "p-options", "ngModel", "ngModelChange"]], template: function TotvsScheduleExecutionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "po-radio-group", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_Template_po_radio_group_ngModelChange_3_listener($event) { return ctx.model.executionType = $event; })("p-change", function TotvsScheduleExecutionComponent_Template_po_radio_group_p_change_3_listener() { return ctx.changeExecutionType(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, TotvsScheduleExecutionComponent_po_datepicker_4_Template, 1, 1, "po-datepicker", 3);
        ɵngcc0.ɵɵtemplate(5, TotvsScheduleExecutionComponent_po_input_5_Template, 1, 1, "po-input", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 1);
        ɵngcc0.ɵɵelementStart(7, "po-combo", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_Template_po_combo_ngModelChange_7_listener($event) { return ctx.model.executionServer = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 1);
        ɵngcc0.ɵɵelementStart(9, "po-switch", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function TotvsScheduleExecutionComponent_Template_po_switch_ngModelChange_9_listener($event) { return ctx.model.repeatExecution = $event; })("click", function TotvsScheduleExecutionComponent_Template_po_switch_click_9_listener() { return ctx.changeRepeatExecution(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, TotvsScheduleExecutionComponent_div_10_Template, 30, 21, "div", 7);
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "po-button", 9);
        ɵngcc0.ɵɵlistener("click", function TotvsScheduleExecutionComponent_Template_po_button_click_12_listener() { return ctx.executeSchedule(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.executionType)("p-options", ctx.executionTypeOptions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isExecutionSchedule());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isExecutionSchedule());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.executionServer)("p-filter-service", ctx.rpwService);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.model.repeatExecution);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRepeatExecution());
    } }, directives: [ɵngcc3.ɵangular_packages_forms_forms_y, ɵngcc3.NgControlStatusGroup, ɵngcc3.NgForm, ɵngcc2.PoRadioGroupComponent, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc2.PoComboComponent, ɵngcc2.PoSwitchComponent, ɵngcc2.PoButtonComponent, ɵngcc2.PoDatepickerComponent, ɵngcc2.PoInputComponent, ɵngcc2.PoTabsComponent, ɵngcc2.PoTabComponent, ɵngcc2.PoMultiselectComponent, ɵngcc2.PoNumberComponent, ɵngcc2.PoSelectComponent], styles: [""] });
/** @nocollapse */
TotvsScheduleExecutionComponent.ctorParameters = () => [
    { type: PoI18nService },
    { type: RpwService },
    { type: PoNotificationService }
];
TotvsScheduleExecutionComponent.propDecorators = {
    scheduleExecutionForm: [{ type: ViewChild, args: ['scheduleExecutionForm', { static: true },] }],
    programName: [{ type: Input }],
    externalName: [{ type: Input }],
    programEMS5: [{ type: Input }],
    programVersion: [{ type: Input }],
    parameters: [{ type: Input }],
    endExecution: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TotvsScheduleExecutionComponent, [{
        type: Component,
        args: [{
                selector: 'app-totvs-schedule-execution',
                template: "<form #scheduleExecutionForm=\"ngForm\">\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-radio-group \r\n            class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n            name=\"executionType\"\r\n            p-label=\"Data de Execu\u00E7\u00E3o\"\r\n            [(ngModel)]=\"model.executionType\"\r\n            [p-options]=\"executionTypeOptions\"\r\n            (p-change)=\"changeExecutionType()\">\r\n        </po-radio-group>\r\n\r\n        <po-datepicker *ngIf=isExecutionSchedule()\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"model.execAppointDate\"\r\n            p-label=\"Agendar para\"\r\n            [(ngModel)]=\"model.execAppointDate\">\r\n        </po-datepicker>\r\n\r\n        <po-input *ngIf=isExecutionSchedule()\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"execAppointHour\"\r\n            p-label=\"Hora\"\r\n            p-mask=\"99:99\"\r\n            p-mask-format-model=\"true\"\r\n            p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n            p-error-pattern=\"Hora inv\u00E1lida\"\r\n            [(ngModel)]=\"model.execAppointHour\">\r\n        </po-input>\r\n    </div>\r\n\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-combo\r\n            class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n            name=\"executionServer\"\r\n            p-field-label=\"des_servid_exec\"\r\n            p-field-value=\"cod_servid_exec\"\r\n            p-label=\"Servidor de Execu\u00E7\u00E3o\"\r\n            p-placeholder=\"Servidor de Execuc\u00E3o\"\r\n            [(ngModel)]=\"model.executionServer\"\r\n            [p-filter-service]=\"rpwService\">\r\n        </po-combo>\r\n    </div>\r\n\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-switch\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"repeatExecution\"\r\n            p-label=\"Repetir ocorr\u00EAncia ?\"\r\n            p-label-off=\"N\u00E3o\"\r\n            p-label-on=\"Sim\"\r\n            [(ngModel)]=\"model.repeatExecution\"\r\n            (click)=\"changeRepeatExecution()\">\r\n        </po-switch>\r\n    </div>\r\n\r\n    <div class=\"po-row\" *ngIf=\"isRepeatExecution()\">\r\n        <po-tabs>\r\n            <po-tab p-label=\"Di\u00E1ria\" p-active (p-click)=\"setActiveTab(1)\">\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyDaily\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">    \r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitDaily\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalDaily\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueDaily\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeDaily\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n\r\n            <po-tab p-label=\"Semanal\" (p-click)=\"setActiveTab(2)\">\r\n                <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n                    <po-multiselect\r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"selectWeeklys\"\r\n                        p-label=\"Dias da Semana\"\r\n                        p-placeholder=\"Escolha os dias da semana\"\r\n                        [(ngModel)]=\"model.selectWeeklys\"\r\n                        [p-options]=\"weeklyOptions\">\r\n                    </po-multiselect>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyWeekly\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitWeekly\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalWeekly\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueWeekly\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeWeekly\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n\r\n            <po-tab p-label=\"Mensal\" (p-click)=\"setActiveTab(3)\">\r\n                <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n                    <po-number\r\n                        class=\"po-sm-3 po-md-3 po-lg-3 po-xl-3\"\r\n                        name=\"dayOfMonth\"\r\n                        p-label=\"Dia do m\u00EAs\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"2\"\r\n                        p-min=\"0\"\r\n                        p-max=\"31\"\r\n                        [(ngModel)]=\"model.dayOfMonth\">\r\n                    </po-number>\r\n                </div>\r\n\r\n                <div class=\"po-row po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyMonthly\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                 <div class=\"po-row po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitMonthly\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalWeekly\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueWeekly\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeWeekly\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n        </po-tabs>\r\n    </div>\r\n\r\n    <div class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\" style=\"padding-top: 15px;\">\r\n        <po-button\r\n            style=\"float: right;\"\r\n            p-label=\"Gerar Agendamento RPW\"\r\n            (click)=\"executeSchedule()\">\r\n        </po-button>\r\n    </div>\r\n</form>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc2.PoI18nService }, { type: RpwService }, { type: ɵngcc2.PoNotificationService }]; }, { programEMS5: [{
            type: Input
        }], programVersion: [{
            type: Input
        }], endExecution: [{
            type: Output
        }], scheduleExecutionForm: [{
            type: ViewChild,
            args: ['scheduleExecutionForm', { static: true }]
        }], programName: [{
            type: Input
        }], externalName: [{
            type: Input
        }], parameters: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.scheduleExecutionForm;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.programName;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.externalName;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.programEMS5;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.programVersion;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.parameters;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.endExecution;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.executionTypeOptions;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.frequencyOptions;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.frequencyTypeOptions;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.weeklyOptions;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.model;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    TotvsScheduleExecutionComponent.prototype.jsonObject;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.literals;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.thfI18nService;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.rpwService;
    /** @type {?} */
    TotvsScheduleExecutionComponent.prototype.poNotification;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DtsDateFormatPipe {
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    transform(value, format = 'dd/MM/yyyy') {
        const { 0: year, 1: month, 2: day } = value.split('-');
        /** @type {?} */
        const formattedDate = format.replace('dd', day)
            .replace('MM', month)
            .replace('yyyy', year);
        return formattedDate;
    }
}
DtsDateFormatPipe.ɵfac = function DtsDateFormatPipe_Factory(t) { return new (t || DtsDateFormatPipe)(); };
DtsDateFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dtsDateFormat", type: DtsDateFormatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtsDateFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'dtsDateFormat'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DtsBackofficeUtilsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DtsBackofficeUtilsModule,
            providers: [RpwService]
        };
    }
}
DtsBackofficeUtilsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DtsBackofficeUtilsModule });
DtsBackofficeUtilsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DtsBackofficeUtilsModule_Factory(t) { return new (t || DtsBackofficeUtilsModule)(); }, providers: [
        RpwService
    ], imports: [[
            CommonModule,
            PoModule,
            FormsModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DtsBackofficeUtilsModule, { declarations: function () { return [TotvsScheduleExecutionComponent,
        DtsDateFormatPipe]; }, imports: function () { return [CommonModule,
        PoModule,
        FormsModule,
        HttpClientModule]; }, exports: function () { return [TotvsScheduleExecutionComponent,
        DtsDateFormatPipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtsBackofficeUtilsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TotvsScheduleExecutionComponent,
                    DtsDateFormatPipe
                ],
                imports: [
                    CommonModule,
                    PoModule,
                    FormsModule,
                    HttpClientModule
                ],
                exports: [
                    TotvsScheduleExecutionComponent,
                    DtsDateFormatPipe
                ],
                providers: [
                    RpwService
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BreadcrumbControlService, CacheParamsService, DateUtil, DisclaimerUtil, DtsBackofficeUtilsModule, DtsDateFormatPipe, FieldValidationUtil, FilterRangeUtil, GenericFunctionsUtils, MenuDatasulService, ProfileService, ReportFormats, ReportService, TotvsScheduleExecutionComponent, UserLoginService, RpwService as ɵa };

//# sourceMappingURL=dts-backoffice-util.js.map