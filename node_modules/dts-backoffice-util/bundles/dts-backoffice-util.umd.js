(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('rxjs/operators/map'), require('@po-ui/ng-components'), require('@angular/forms'), require('rxjs/internal/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('dts-backoffice-util', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', 'rxjs/operators/map', '@po-ui/ng-components', '@angular/forms', 'rxjs/internal/operators', '@angular/common'], factory) :
    (global = global || self, factory(global['dts-backoffice-util'] = {}, global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators, global.rxjs['operators/map'], global.ngComponents, global.ng.forms, global.rxjs['internal/operators'], global.ng.common));
}(this, (function (exports, core, http, rxjs, operators, map, ngComponents, forms, operators$1, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserLoginService = /** @class */ (function () {
        function UserLoginService(http) {
            this.http = http;
            this.apiUrl = '/totvs-menu/rest/getSessionInfo';
            this.userLogin = undefined;
        }
        /**
         * @return {?}
         */
        UserLoginService.prototype.getUserLogin = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (localStorage.getItem('username')) {
                return rxjs.of(localStorage.getItem('username'));
            }
            if (this.userLogin) {
                return rxjs.of(this.userLogin);
            }
            else {
                return this.http.get("" + this.apiUrl)
                    .pipe(operators.map((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.userLogin = response.userName;
                    return response.userName;
                })));
            }
        };
        UserLoginService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        UserLoginService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ UserLoginService.ɵprov = core.ɵɵdefineInjectable({ factory: function UserLoginService_Factory() { return new UserLoginService(core.ɵɵinject(http.HttpClient)); }, token: UserLoginService, providedIn: "root" });
        return UserLoginService;
    }());
    if (false) {
        /** @type {?} */
        UserLoginService.prototype.apiUrl;
        /** @type {?} */
        UserLoginService.prototype.userLogin;
        /** @type {?} */
        UserLoginService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IProfile() { }
    if (false) {
        /** @type {?} */
        IProfile.prototype.pageId;
        /** @type {?} */
        IProfile.prototype.dataCode;
        /** @type {?} */
        IProfile.prototype.userCode;
        /** @type {?|undefined} */
        IProfile.prototype.dataValue;
    }
    /**
     * @record
     */
    function IProfileResponse() { }
    if (false) {
        /** @type {?} */
        IProfileResponse.prototype.message;
        /** @type {?} */
        IProfileResponse.prototype.length;
        /** @type {?} */
        IProfileResponse.prototype.data;
    }
    /** @enum {number} */
    var EDataType = {
        STRING: 1,
        JSON: 2,
    };
    EDataType[EDataType.STRING] = 'STRING';
    EDataType[EDataType.JSON] = 'JSON';
    var ProfileService = /** @class */ (function () {
        function ProfileService(http) {
            this.http = http;
            this.apiURL = '/dts/datasul-rest/resources/api/btb/btapi930za';
        }
        /**
         * @param {?} profile
         * @return {?}
         */
        ProfileService.prototype.setProfile = /**
         * @param {?} profile
         * @return {?}
         */
        function (profile) {
            /** @type {?} */
            var headers = { 'X-PO-Screen-Lock': 'true' };
            var pageId = profile.pageId, userCode = profile.userCode;
            return this.http
                .post(this.apiURL + "/setProfile?userCode=" + userCode + "&pageId=" + pageId, profile, { headers: headers });
        };
        /**
         * @param {?} profile
         * @param {?=} showLoading
         * @return {?}
         */
        ProfileService.prototype.getProfileAsString = /**
         * @param {?} profile
         * @param {?=} showLoading
         * @return {?}
         */
        function (profile, showLoading) {
            return this.getProfile(profile, EDataType.STRING, showLoading ? 'true' : 'false');
        };
        /**
         * @param {?} profile
         * @param {?=} showLoading
         * @return {?}
         */
        ProfileService.prototype.getProfileAsJSON = /**
         * @param {?} profile
         * @param {?=} showLoading
         * @return {?}
         */
        function (profile, showLoading) {
            return this.getProfile(profile, EDataType.JSON, showLoading ? 'true' : 'false');
        };
        /**
         * @private
         * @param {?} profile
         * @param {?} dataType
         * @param {?=} showLoading
         * @return {?}
         */
        ProfileService.prototype.getProfile = /**
         * @private
         * @param {?} profile
         * @param {?} dataType
         * @param {?=} showLoading
         * @return {?}
         */
        function (profile, dataType, showLoading) {
            /** @type {?} */
            var headers = { 'X-PO-Screen-Lock': showLoading };
            var pageId = profile.pageId, dataCode = profile.dataCode, userCode = profile.userCode;
            return this.http
                .get(this.apiURL + "/getProfile?userCode=" + userCode + "&pageId=" + pageId + "&dataCode=" + dataCode, { headers: headers })
                .pipe(map.map((/**
             * @param {?} preference
             * @return {?}
             */
            function (preference) {
                if (preference.data[0]) {
                    if (dataType === EDataType.STRING) {
                        return preference.data[0].dataValue;
                    }
                    if (dataType === EDataType.JSON) {
                        return JSON.parse(preference.data[0].dataValue);
                    }
                }
                else {
                    return undefined;
                }
            })));
        };
        ProfileService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProfileService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ ProfileService.ɵprov = core.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(core.ɵɵinject(http.HttpClient)); }, token: ProfileService, providedIn: "root" });
        return ProfileService;
    }());
    if (false) {
        /** @type {?} */
        ProfileService.prototype.apiURL;
        /** @type {?} */
        ProfileService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IProperty() { }
    if (false) {
        /** @type {?} */
        IProperty.prototype.name;
        /** @type {?} */
        IProperty.prototype.value;
    }
    /**
     * @record
     */
    function IReportServiceParams() { }
    if (false) {
        /** @type {?} */
        IReportServiceParams.prototype.reportName;
        /** @type {?} */
        IReportServiceParams.prototype.programName;
        /** @type {?} */
        IReportServiceParams.prototype.properties;
        /** @type {?} */
        IReportServiceParams.prototype.dialect;
        /** @type {?} */
        IReportServiceParams.prototype.downloadName;
        /** @type {?} */
        IReportServiceParams.prototype.download;
        /** @type {?} */
        IReportServiceParams.prototype.format;
    }
    /** @enum {string} */
    var ReportFormats = {
        XLSX: 'xlsx',
        PDF: 'pdf',
        DOCX: 'docx',
        HTML: 'html',
    };
    var ReportService = /** @class */ (function () {
        function ReportService(httpClient) {
            this.httpClient = httpClient;
            this.URL = window.location.href.indexOf('totvs-menu') > 0 ? '/totvs-menu/rest/report/run/'
                : '/dts/datasul-report/resources/run/';
        }
        /**
         * @param {?} params
         * @param {?=} showLoading
         * @return {?}
         */
        ReportService.prototype.generate = /**
         * @param {?} params
         * @param {?=} showLoading
         * @return {?}
         */
        function (params, showLoading) {
            var _this = this;
            if (showLoading === void 0) { showLoading = true; }
            /** @type {?} */
            var headers = { 'X-PO-Screen-Lock': showLoading ? 'true' : 'false' };
            /** @type {?} */
            var reportURL = "" + this.URL + params.reportName;
            if (params.properties.length > 0) {
                reportURL += '?';
                params.properties.forEach((/**
                 * @param {?} property
                 * @param {?} index
                 * @return {?}
                 */
                function (property, index) {
                    if (index > 0) {
                        reportURL += '&';
                    }
                    reportURL += "c_properties=" + property.name + "&c_values=" + property.value;
                }));
            }
            reportURL += "&dialect=" + params.dialect + "&format=" + params.format;
            reportURL += "&program=" + params.programName + "&resultFileName=" + params.downloadName;
            return this.httpClient.post(reportURL, {}, { headers: headers, responseType: 'blob' })
                .pipe(map.map((/**
             * @param {?} report
             * @return {?}
             */
            function (report) {
                if (params.download) {
                    _this.download(report, params.downloadName + "." + params.format);
                }
                return report;
            })));
        };
        /**
         * @param {?} file
         * @param {?} fileName
         * @return {?}
         */
        ReportService.prototype.download = /**
         * @param {?} file
         * @param {?} fileName
         * @return {?}
         */
        function (file, fileName) {
            /** @type {?} */
            var binaryData = [file];
            /** @type {?} */
            var downloadLink = document.createElement('a');
            /** @type {?} */
            var urlDownload = window.URL.createObjectURL(new Blob(binaryData, { type: file.type }));
            downloadLink.href = urlDownload;
            downloadLink.setAttribute('download', fileName);
            document.body.appendChild(downloadLink);
            downloadLink.click();
            window.URL.revokeObjectURL(urlDownload);
            downloadLink.remove();
        };
        ReportService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ReportService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ReportService;
    }());
    if (false) {
        /** @type {?} */
        ReportService.prototype.URL;
        /** @type {?} */
        ReportService.prototype.httpClient;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BreadcrumbControlService = /** @class */ (function () {
        function BreadcrumbControlService() {
        }
        /**
         * @return {?}
         */
        BreadcrumbControlService.prototype.newBreadcrumb = /**
         * @return {?}
         */
        function () {
            this.breadcrumb = { items: [] };
        };
        /**
         * @param {?} literal
         * @param {?} activatedRoute
         * @return {?}
         */
        BreadcrumbControlService.prototype.addBreadcrumb = /**
         * @param {?} literal
         * @param {?} activatedRoute
         * @return {?}
         */
        function (literal, activatedRoute) {
            this.addBreadcrumbURL(literal, decodeURIComponent(activatedRoute.snapshot['_routerState'].url));
        };
        /**
         * @param {?} literal
         * @param {?} url
         * @return {?}
         */
        BreadcrumbControlService.prototype.addBreadcrumbURL = /**
         * @param {?} literal
         * @param {?} url
         * @return {?}
         */
        function (literal, url) {
            if (!literal || literal === '') {
                return;
            }
            if (!this.breadcrumb) {
                this.newBreadcrumb();
            }
            /** @type {?} */
            var breadcrumbAux = { items: [] };
            /** @type {?} */
            var idx = 0;
            for (idx = 0; idx < this.breadcrumb.items.length; idx++) {
                if (this.breadcrumb.items[idx].label !== literal) {
                    breadcrumbAux.items.push(this.breadcrumb.items[idx]);
                }
                else {
                    break;
                }
            }
            breadcrumbAux.items.push({ label: literal, link: url });
            this.breadcrumb = breadcrumbAux;
        };
        /**
         * @param {?} literal
         * @param {?} valueOld
         * @param {?} valueNew
         * @return {?}
         */
        BreadcrumbControlService.prototype.updBreadcrumbURL = /**
         * @param {?} literal
         * @param {?} valueOld
         * @param {?} valueNew
         * @return {?}
         */
        function (literal, valueOld, valueNew) {
            /** @type {?} */
            var currentRouterURL = this.getCurrentRouter();
            if (!currentRouterURL) {
                return;
            }
            if (!valueOld) {
                return;
            }
            if (!valueNew) {
                return;
            }
            currentRouterURL = currentRouterURL.replace(valueOld, valueNew);
            this.addBreadcrumbURL(literal, currentRouterURL);
        };
        /**
         * @return {?}
         */
        BreadcrumbControlService.prototype.getBreadcrumb = /**
         * @return {?}
         */
        function () {
            if (!this.breadcrumb) {
                this.newBreadcrumb();
            }
            return this.breadcrumb;
        };
        /**
         * @return {?}
         */
        BreadcrumbControlService.prototype.getCurrentRouter = /**
         * @return {?}
         */
        function () {
            if (!this.breadcrumb) {
                this.newBreadcrumb();
            }
            if (this.breadcrumb.items.length <= 0) {
                return '';
            }
            return this.breadcrumb.items[this.breadcrumb.items.length - 1].link;
        };
        /**
         * @return {?}
         */
        BreadcrumbControlService.prototype.getPrevRouter = /**
         * @return {?}
         */
        function () {
            if (!this.breadcrumb) {
                this.newBreadcrumb();
            }
            if (this.breadcrumb.items.length <= 1) {
                return '';
            }
            return this.breadcrumb.items[this.breadcrumb.items.length - 2].link;
        };
        /**
         * @return {?}
         */
        BreadcrumbControlService.prototype.hasPreviousRouter = /**
         * @return {?}
         */
        function () {
            return this.breadcrumb.items.length > 1;
        };
        BreadcrumbControlService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BreadcrumbControlService.ctorParameters = function () { return []; };
        return BreadcrumbControlService;
    }());
    if (false) {
        /** @type {?} */
        BreadcrumbControlService.prototype.breadcrumb;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MenuDatasulService = /** @class */ (function () {
        function MenuDatasulService() {
        }
        /**
         * @param {?} program
         * @return {?}
         */
        MenuDatasulService.prototype.callProgress = /**
         * @param {?} program
         * @return {?}
         */
        function (program) {
            /**
             * var program = {};
             * program['prg'] = "cd0210";
             * program['params'] = '01|123456'
             */
            parent.postMessage({ program: program }, '*');
        };
        /**
         * @param {?} notification
         * @return {?}
         */
        MenuDatasulService.prototype.sendNotification = /**
         * @param {?} notification
         * @return {?}
         */
        function (notification) {
            /**
             * var notification = {};
             * notification['type'] = 'success';
             * notification['title'] = 'Notification Title'
             * notification['detail'] = 'Notification Detail'
             */
            parent.postMessage({ notification: notification }, '*');
        };
        /**
         * @param {?} programName
         * @param {?} params
         * @param {?=} parent
         * @return {?}
         */
        MenuDatasulService.prototype.openPath = /**
         * @param {?} programName
         * @param {?} params
         * @param {?=} parent
         * @return {?}
         */
        function (programName, params, parent) {
            if (parent === void 0) { parent = true; }
            /** @type {?} */
            var datasulPath = window.location.href.indexOf('totvs-menu') > 0 ? 'totvs-menu' : 'menu-html';
            /** @type {?} */
            var baseUrl = "/" + datasulPath + "/#/" + datasulPath + "/program-html/" + programName + "/#";
            if (parent) {
                window.open(baseUrl + "/" + params, '_parent');
            }
            else {
                window.open(baseUrl + "/" + params);
            }
        };
        MenuDatasulService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MenuDatasulService.ctorParameters = function () { return []; };
        return MenuDatasulService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CacheParamsService = /** @class */ (function () {
        function CacheParamsService() {
            this.values = {};
        }
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        CacheParamsService.prototype.setValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (key, value) {
            this.values[key] = value;
        };
        /**
         * @param {?} key
         * @return {?}
         */
        CacheParamsService.prototype.getValue = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return this.values[key];
        };
        /**
         * @param {?} key
         * @return {?}
         */
        CacheParamsService.prototype.removeValue = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            delete this.values[key];
        };
        CacheParamsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        CacheParamsService.ctorParameters = function () { return []; };
        /** @nocollapse */ CacheParamsService.ɵprov = core.ɵɵdefineInjectable({ factory: function CacheParamsService_Factory() { return new CacheParamsService(); }, token: CacheParamsService, providedIn: "root" });
        return CacheParamsService;
    }());
    if (false) {
        /** @type {?} */
        CacheParamsService.prototype.values;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
    Versão: 1.000
    Data Criação: 18/04/2019
    */
    var DateUtil = /** @class */ (function () {
        function DateUtil() {
        }
        /* Transforma data para o padrão YYYY-MM-DD */
        /* Transforma data para o padrão YYYY-MM-DD */
        /**
         * @param {?} date
         * @return {?}
         */
        DateUtil.dateToQueryParam = /* Transforma data para o padrão YYYY-MM-DD */
        /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var iDay = date.getDate();
            /** @type {?} */
            var iMonth = date.getMonth() + 1;
            /** @type {?} */
            var iYear = date.getFullYear();
            return iYear + "-" + this.pad(iMonth) + "-" + this.pad(iDay);
        };
        /* Transforma data no padrão YYYY-MM-DD para DATE */
        /* Transforma data no padrão YYYY-MM-DD para DATE */
        /**
         * @param {?} param
         * @return {?}
         */
        DateUtil.queryParamToDate = /* Transforma data no padrão YYYY-MM-DD para DATE */
        /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var iDay = +param.split('-')[2];
            /** @type {?} */
            var iMonth = +param.split('-')[1];
            /** @type {?} */
            var iYear = +param.split('-')[0];
            return new Date(iYear, iMonth - 1, iDay);
        };
        /* Valida se foi informado uma data válida */
        /* Valida se foi informado uma data válida */
        /**
         * @param {?} date
         * @return {?}
         */
        DateUtil.isValidDate = /* Valida se foi informado uma data válida */
        /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date instanceof Date && !isNaN(date.getTime());
        };
        /* Ajusta a data retornando o padrão DATE */
        /* Ajusta a data retornando o padrão DATE */
        /**
         * @param {?} param
         * @return {?}
         */
        DateUtil.ajustDate = /* Ajusta a data retornando o padrão DATE */
        /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            if (param instanceof Date) {
                return param;
            }
            if (!param) {
                return param;
            }
            return this.queryParamToDate(param.split('T')[0]);
        };
        /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
        /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
        /**
         * @param {?=} values
         * @param {?=} fieldName
         * @return {?}
         */
        DateUtil.ajustDateToModel = /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
        /**
         * @param {?=} values
         * @param {?=} fieldName
         * @return {?}
         */
        function (values, fieldName) {
            if (values === void 0) { values = {}; }
            if (values.hasOwnProperty(fieldName) && (values[fieldName])) {
                if (values[fieldName].indexOf('T') >= 0) {
                    return new Date(values[fieldName]);
                }
                /** @type {?} */
                var iDay = +values[fieldName].split('-')[2];
                /** @type {?} */
                var iMonth = +values[fieldName].split('-')[1];
                /** @type {?} */
                var iYear = +values[fieldName].split('-')[0];
                return new Date(iYear, iMonth - 1, iDay);
            }
            return null;
        };
        /* Adicona zero a esquerda do número */
        /* Adicona zero a esquerda do número */
        /**
         * @param {?} number
         * @return {?}
         */
        DateUtil.pad = /* Adicona zero a esquerda do número */
        /**
         * @param {?} number
         * @return {?}
         */
        function (number) {
            if (number < 10) {
                return '0' + number;
            }
            return number;
        };
        return DateUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
    Versão: 1.009
    Data Criação: 06/08/2018
    */
    var DisclaimerUtil = /** @class */ (function () {
        function DisclaimerUtil(poNotification, poI18nPipe, literals) {
            this.literals = {};
            this.poNotification = poNotification;
            this.poI18nPipe = poI18nPipe;
            this.literals = literals;
        }
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} tradValue
         * @param {?=} vldBlank
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimer = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} tradValue
         * @param {?=} vldBlank
         * @return {?}
         */
        function (property, value, hideClose, tradValue, vldBlank) {
            if (hideClose === void 0) { hideClose = false; }
            if (tradValue === void 0) { tradValue = false; }
            if (vldBlank === void 0) { vldBlank = false; }
            if (value === null || value === undefined) {
                return { label: '', property: '', value: '' };
            }
            if (vldBlank && value === '') {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + (tradValue ? this.literals[value] : value),
                property: "" + property,
                value: "" + value
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} vldBlank
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromNumber = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} vldBlank
         * @return {?}
         */
        function (property, value, hideClose, vldBlank) {
            if (hideClose === void 0) { hideClose = false; }
            if (vldBlank === void 0) { vldBlank = false; }
            if (value === null || value === undefined) {
                return { label: '', property: '', value: '' };
            }
            if (vldBlank && value === 0) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + value,
                property: "" + property,
                value: "" + value
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromBoolean = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @return {?}
         */
        function (property, value, hideClose) {
            if (hideClose === void 0) { hideClose = false; }
            if (value === null || value === undefined) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + (value ? this.literals['yes'] : this.literals['no']),
                property: "" + property,
                value: "" + value
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromDate = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @return {?}
         */
        function (property, value, hideClose) {
            if (hideClose === void 0) { hideClose = false; }
            /** @type {?} */
            var dDate = this.ajustDate(value);
            if (!this.isValidDate(dDate)) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + dDate.toLocaleDateString(),
                property: "" + property,
                value: "" + this.dateToQueryParam(dDate)
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} length
         * @param {?=} hideClose
         * @param {?=} tradValue
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromMultiSelect = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} length
         * @param {?=} hideClose
         * @param {?=} tradValue
         * @return {?}
         */
        function (property, value, length, hideClose, tradValue) {
            var _this = this;
            if (length === void 0) { length = 0; }
            if (hideClose === void 0) { hideClose = false; }
            if (tradValue === void 0) { tradValue = false; }
            /** @type {?} */
            var lstLabels = '';
            /** @type {?} */
            var lstValues = '';
            if (!value) {
                return { label: '', property: '', value: '' };
            }
            if (value.length === 0 || (length > 0 && value.length === length)) {
                lstLabels = this.literals['all'];
                lstValues = 'all';
            }
            else {
                value.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (lstLabels !== '') {
                        lstLabels = lstLabels + ", ";
                    }
                    if (lstValues !== '') {
                        lstValues = lstValues + ",";
                    }
                    lstLabels = "" + lstLabels + (tradValue ? _this.literals[item] : item);
                    lstValues = "" + lstValues + item;
                }));
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + lstLabels,
                property: "" + property,
                value: "" + lstValues
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} length
         * @param {?=} hideClose
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromCheckboxGroup = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} length
         * @param {?=} hideClose
         * @return {?}
         */
        function (property, value, length, hideClose) {
            var _this = this;
            if (length === void 0) { length = 0; }
            if (hideClose === void 0) { hideClose = false; }
            /** @type {?} */
            var lstLabels = '';
            /** @type {?} */
            var lstValues = '';
            if (!value) {
                return { label: '', property: '', value: '' };
            }
            if (value.length === 0) {
                lstLabels = this.literals['none'];
                lstValues = 'none';
            }
            else if (length > 0 && value.length === length) {
                lstLabels = this.literals['all'];
                lstValues = 'all';
            }
            else {
                value.map((/**
                 * @param {?} checkParam
                 * @return {?}
                 */
                function (checkParam) {
                    if (lstLabels !== '') {
                        lstLabels = lstLabels + ", ";
                    }
                    if (lstValues !== '') {
                        lstValues = lstValues + ",";
                    }
                    lstLabels = "" + lstLabels + _this.literals[checkParam];
                    lstValues = "" + lstValues + checkParam;
                }));
            }
            return {
                hideClose: hideClose,
                label: this.literals[property] + ": " + lstLabels,
                property: "" + property,
                value: "" + lstValues
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromRangeCharacter = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        function (property, value, hideClose, validateEqual) {
            if (hideClose === void 0) { hideClose = false; }
            if (validateEqual === void 0) { validateEqual = true; }
            if (value.valInitial === null || value.valInitial === undefined) {
                value.valInitial = value.iniInitial;
            }
            if (value.valFinal === null || value.valFinal === undefined) {
                value.valFinal = value.iniFinal;
            }
            if (validateEqual &&
                value.iniInitial === value.valInitial &&
                value.iniFinal === value.valFinal) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], "'" + value.valInitial + "'", "'" + value.valFinal + "'"]),
                property: "" + property,
                value: value.valInitial + ";" + value.valFinal
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromRangeNumber = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        function (property, value, hideClose, validateEqual) {
            if (hideClose === void 0) { hideClose = false; }
            if (validateEqual === void 0) { validateEqual = true; }
            if (value.valInitial === null || value.valInitial === undefined) {
                value.valInitial = value.iniInitial;
            }
            if (value.valFinal === null || value.valFinal === undefined) {
                value.valFinal = value.iniFinal;
            }
            if (validateEqual &&
                value.iniInitial === value.valInitial &&
                value.iniFinal === value.valFinal) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], value.valInitial, value.valFinal]),
                property: "" + property,
                value: value.valInitial + ";" + value.valFinal
            };
        };
        /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        DisclaimerUtil.prototype.makeDisclaimerFromRangeDate = /**
         * @param {?} property
         * @param {?} value
         * @param {?=} hideClose
         * @param {?=} validateEqual
         * @return {?}
         */
        function (property, value, hideClose, validateEqual) {
            if (hideClose === void 0) { hideClose = false; }
            if (validateEqual === void 0) { validateEqual = true; }
            /** @type {?} */
            var valInitDate = this.ajustDate(value.valInitial);
            /** @type {?} */
            var valFinalDate = this.ajustDate(value.valFinal);
            if (!this.isValidDate(valInitDate)) {
                valInitDate = value.iniInitial;
                value.valInitial = value.iniInitial;
            }
            if (!this.isValidDate(valFinalDate)) {
                valFinalDate = value.iniFinal;
                value.valFinal = value.iniFinal;
            }
            if (validateEqual &&
                this.dateToQueryParam(value.iniInitial) === this.dateToQueryParam(valInitDate) &&
                this.dateToQueryParam(value.iniFinal) === this.dateToQueryParam(valFinalDate)) {
                return { label: '', property: '', value: '' };
            }
            return {
                hideClose: hideClose,
                label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], valInitDate.toLocaleDateString(), valFinalDate.toLocaleDateString()]),
                property: "" + property,
                value: this.dateToQueryParam(valInitDate) + ";" + this.dateToQueryParam(valFinalDate)
            };
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzCharFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            /** @type {?} */
            var returnValue = defaultValue;
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        returnValue = item.value;
                        return true;
                    }
                    return false;
                }));
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzNumberFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            /** @type {?} */
            var returnValue = defaultValue;
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        returnValue = item.value;
                        return true;
                    }
                    return false;
                }));
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzBooleanFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            /** @type {?} */
            var returnValue = defaultValue;
            if (disclaimers && disclaimers.length > 0) {
                /** @type {?} */
                var disclaimerFind = disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.property === property; }));
                if (disclaimerFind && disclaimerFind.value !== null && disclaimerFind.value !== undefined) {
                    if (disclaimerFind.value === 'true') {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzDateFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            var _this = this;
            /** @type {?} */
            var returnValue = this.ajustDate(defaultValue);
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        returnValue = _this.ajustDate(item.value);
                        return true;
                    }
                    return false;
                }));
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzMultiSelectCharFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            return this.atzMultiSelectFromDisclamer('char', disclaimers, property, defaultValue);
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzMultiSelectNumberFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (disclaimers, property, defaultValue) {
            return this.atzMultiSelectFromDisclamer('number', disclaimers, property, defaultValue);
        };
        /**
         * @param {?} type
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        DisclaimerUtil.prototype.atzMultiSelectFromDisclamer = /**
         * @param {?} type
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        function (type, disclaimers, property, defaultValue) {
            /** @type {?} */
            var returnValue = [];
            defaultValue.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                returnValue.push(item.value);
            }));
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null || item.value === 'all' || item.value === 'none') {
                            return false;
                        }
                        returnValue = [];
                        item.value.split(',').forEach((/**
                         * @param {?} itemOpt
                         * @return {?}
                         */
                        function (itemOpt) {
                            if (type === 'char') {
                                returnValue.push(itemOpt);
                            }
                            if (type === 'number') {
                                returnValue.push(+itemOpt);
                            }
                        }));
                        return true;
                    }
                    return false;
                }));
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} options
         * @return {?}
         */
        DisclaimerUtil.prototype.atzCheckboxFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} options
         * @return {?}
         */
        function (disclaimers, property, options) {
            /** @type {?} */
            var returnValue = [];
            options.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                returnValue.push(item.value);
            }));
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null || item.value === 'all' || item.value === 'none') {
                            return false;
                        }
                        returnValue = [];
                        item.value.split(',').forEach((/**
                         * @param {?} itemOpt
                         * @return {?}
                         */
                        function (itemOpt) {
                            returnValue.push(itemOpt);
                        }));
                        return true;
                    }
                    return false;
                }));
            }
            return returnValue;
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeChar
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeCharFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeChar
         * @return {?}
         */
        function (disclaimers, property, rangeChar) {
            /** @type {?} */
            var value = '';
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        value = item.value;
                        return true;
                    }
                    return false;
                }));
            }
            return this.atzRangeCharFromQueryParam(value, rangeChar);
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeNum
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeNumFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeNum
         * @return {?}
         */
        function (disclaimers, property, rangeNum) {
            /** @type {?} */
            var value = '';
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        value = item.value;
                        return true;
                    }
                    return false;
                }));
            }
            return this.atzRangeNumFromQueryParam(value, rangeNum);
        };
        /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeDate
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeDateFromDisclamer = /**
         * @param {?} disclaimers
         * @param {?} property
         * @param {?} rangeDate
         * @return {?}
         */
        function (disclaimers, property, rangeDate) {
            /** @type {?} */
            var value = '';
            if (disclaimers && disclaimers.length > 0) {
                disclaimers.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.property === property) {
                        if (item.value === null) {
                            return false;
                        }
                        value = item.value;
                        return true;
                    }
                    return false;
                }));
            }
            return this.atzRangeDateFromQueryParam(value, rangeDate);
        };
        /**
         * @param {?} value
         * @param {?} rangeChar
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeCharFromQueryParam = /**
         * @param {?} value
         * @param {?} rangeChar
         * @return {?}
         */
        function (value, rangeChar) {
            rangeChar.valInitial = rangeChar.iniInitial;
            rangeChar.valFinal = rangeChar.iniFinal;
            if (!value || value === '') {
                return rangeChar;
            }
            rangeChar.valInitial = value.split(';')[0];
            rangeChar.valFinal = value.split(';')[1];
            if (rangeChar.valFinal === null || rangeChar.valFinal === undefined) {
                rangeChar.valFinal = rangeChar.iniFinal;
            }
            return rangeChar;
        };
        /**
         * @param {?} value
         * @param {?} rangeNum
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeNumFromQueryParam = /**
         * @param {?} value
         * @param {?} rangeNum
         * @return {?}
         */
        function (value, rangeNum) {
            rangeNum.valInitial = rangeNum.iniInitial;
            rangeNum.valFinal = rangeNum.iniFinal;
            if (!value || value === '') {
                return rangeNum;
            }
            rangeNum.valInitial = +value.split(';')[0];
            rangeNum.valFinal = +value.split(';')[1];
            if (rangeNum.valFinal === null || rangeNum.valFinal === undefined) {
                rangeNum.valFinal = rangeNum.iniFinal;
            }
            return rangeNum;
        };
        /**
         * @param {?} value
         * @param {?} rangeDate
         * @return {?}
         */
        DisclaimerUtil.prototype.atzRangeDateFromQueryParam = /**
         * @param {?} value
         * @param {?} rangeDate
         * @return {?}
         */
        function (value, rangeDate) {
            rangeDate.valInitial = rangeDate.iniInitial;
            rangeDate.valFinal = rangeDate.iniFinal;
            if (!value || value === '') {
                return rangeDate;
            }
            rangeDate.valInitial = this.queryParamToDate(value.split(';')[0]);
            rangeDate.valFinal = this.queryParamToDate(value.split(';')[1]);
            if (rangeDate.valFinal === null || rangeDate.valFinal === undefined) {
                rangeDate.valFinal = rangeDate.iniFinal;
            }
            return rangeDate;
        };
        /**
         * @param {?} date
         * @return {?}
         */
        DisclaimerUtil.prototype.dateToQueryParam = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var iDay = date.getDate();
            /** @type {?} */
            var iMonth = date.getMonth() + 1;
            /** @type {?} */
            var iYear = date.getFullYear();
            return iYear + "-" + this.pad(iMonth) + "-" + this.pad(iDay);
        };
        /**
         * @param {?} param
         * @return {?}
         */
        DisclaimerUtil.prototype.queryParamToDate = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var iDay = +param.split('-')[2];
            /** @type {?} */
            var iMonth = +param.split('-')[1];
            /** @type {?} */
            var iYear = +param.split('-')[0];
            return new Date(iYear, iMonth - 1, iDay);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        DisclaimerUtil.prototype.isValidDate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date instanceof Date && !isNaN(date.getTime());
        };
        /**
         * @param {?} param
         * @return {?}
         */
        DisclaimerUtil.prototype.ajustDate = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            if (param instanceof Date) {
                return param;
            }
            if (!param) {
                return param;
            }
            return this.queryParamToDate(param.split('T')[0]);
        };
        /**
         * @param {?} number
         * @return {?}
         */
        DisclaimerUtil.prototype.pad = /**
         * @param {?} number
         * @return {?}
         */
        function (number) {
            if (number < 10) {
                return '0' + number;
            }
            return number;
        };
        return DisclaimerUtil;
    }());
    if (false) {
        /** @type {?} */
        DisclaimerUtil.prototype.poNotification;
        /** @type {?} */
        DisclaimerUtil.prototype.poI18nPipe;
        /** @type {?} */
        DisclaimerUtil.prototype.literals;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FieldValidationUtil = /** @class */ (function () {
        function FieldValidationUtil(poNotification, poI18nPipe, literals) {
            this.literals = {};
            this.poNotification = poNotification;
            this.poI18nPipe = poI18nPipe;
            this.literals = literals;
            this.disclaimerUtil = new DisclaimerUtil(this.poNotification, this.poI18nPipe, this.literals);
        }
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldCharacter = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            if (!value || value.trim() === '') {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
                });
                return false;
            }
            return true;
        };
        // Valida uma faixa de caracteres se o inicial é menor que final
        // Valida uma faixa de caracteres se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        FieldValidationUtil.prototype.vldRangeCharacter = 
        // Valida uma faixa de caracteres se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        function (initialField, finalField, initialValue, finalValue) {
            if (!initialValue || !finalValue) {
                return true;
            }
            if (initialValue.trim().toUpperCase() > finalValue.trim().toUpperCase()) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
                });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @param {?=} vldValue
         * @param {?=} zeroAccept
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldNumber = /**
         * @param {?} field
         * @param {?} value
         * @param {?=} vldValue
         * @param {?=} zeroAccept
         * @return {?}
         */
        function (field, value, vldValue, zeroAccept) {
            if (vldValue === void 0) { vldValue = false; }
            if (zeroAccept === void 0) { zeroAccept = false; }
            if (vldValue && !this.vldValueOfNumber(field, value)) {
                return false;
            }
            if ((!value) || value <= 0) {
                if (value === 0 && zeroAccept === true) {
                    return true;
                }
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
                });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldValueOfNumber = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            if (value && value < 0) {
                this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @param {?=} vldValue
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldPercent = /**
         * @param {?} field
         * @param {?} value
         * @param {?=} vldValue
         * @return {?}
         */
        function (field, value, vldValue) {
            if (vldValue === void 0) { vldValue = false; }
            if (vldValue && !this.vldValueOfPercent(field, value)) {
                return false;
            }
            if (!this.vldFieldNumber(field, value)) {
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldValueOfPercent = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            if (value && value < 0) {
                this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
                return false;
            }
            if (value && value > 100) {
                this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
                return false;
            }
            return true;
        };
        // Valida uma faixa de números se o inicial é menor que final
        // Valida uma faixa de números se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        FieldValidationUtil.prototype.vldRangeNumber = 
        // Valida uma faixa de números se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        function (initialField, finalField, initialValue, finalValue) {
            if (!initialValue) {
                initialValue = 0;
            }
            if (!finalValue) {
                finalValue = 0;
            }
            if (initialValue > finalValue) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
                });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldDate = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            /** @type {?} */
            var valDate = this.disclaimerUtil.ajustDate(value);
            if (!this.disclaimerUtil.isValidDate(valDate)) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldDate'], [this.literals[field]])
                });
                return false;
            }
            return true;
        };
        // Valida uma faixa de datas se o inicial é menor que final
        // Valida uma faixa de datas se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        FieldValidationUtil.prototype.vldRangeDate = 
        // Valida uma faixa de datas se o inicial é menor que final
        /**
         * @param {?} initialField
         * @param {?} finalField
         * @param {?} initialValue
         * @param {?} finalValue
         * @return {?}
         */
        function (initialField, finalField, initialValue, finalValue) {
            if (!initialValue || !finalValue) {
                return true;
            }
            /** @type {?} */
            var valInitialDate = this.disclaimerUtil.ajustDate(initialValue).getTime();
            /** @type {?} */
            var valFinalDate = this.disclaimerUtil.ajustDate(finalValue).getTime();
            if (valInitialDate > valFinalDate) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
                });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldMultiSelect = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            if (!value || value.length === 0) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
                });
                return false;
            }
            return true;
        };
        /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldCheckbox = /**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            if (!value || value.length === 0) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
                });
                return false;
            }
            return true;
        };
        // Valida formato conforme regra: "9" apenas números, "X" qualquer caracter, "!" apenas letras maiúsculas
        // Valida formato conforme regra: "9" apenas números, "X" qualquer caracter, "!" apenas letras maiúsculas
        /**
         * @param {?} field
         * @param {?} value
         * @param {?} format
         * @param {?=} replacePoint
         * @return {?}
         */
        FieldValidationUtil.prototype.vldFieldFormat = 
        // Valida formato conforme regra: "9" apenas números, "X" qualquer caracter, "!" apenas letras maiúsculas
        /**
         * @param {?} field
         * @param {?} value
         * @param {?} format
         * @param {?=} replacePoint
         * @return {?}
         */
        function (field, value, format, replacePoint) {
            if (replacePoint === void 0) { replacePoint = false; }
            /** @type {?} */
            var lOK = true;
            /** @type {?} */
            var oldFormat;
            if (!value) {
                return lOK;
            }
            /*Retira os pontos do formato*/
            if (replacePoint) {
                oldFormat = format;
                format = format.replace(/\./g, '');
            }
            if (value.length !== format.length) {
                lOK = false;
            }
            else {
                for (var idx = 0; idx < format.length; idx++) {
                    if (format[idx] === '9') {
                        if (value[idx].replace(/[0-9]/, '9') !== '9') {
                            lOK = false;
                            break;
                        }
                    }
                    if (format[idx] === '!') {
                        if (value[idx].replace(/[A-Z]/, 'A') !== 'A') {
                            lOK = false;
                            break;
                        }
                    }
                }
            }
            if (replacePoint) {
                format = oldFormat;
            }
            if (!lOK) {
                this.poNotification.error({
                    message: this.poI18nPipe.transform(this.literals['fieldVldFormat'], [this.literals[field], format])
                });
            }
            return lOK;
        };
        return FieldValidationUtil;
    }());
    if (false) {
        /** @type {?} */
        FieldValidationUtil.prototype.poNotification;
        /** @type {?} */
        FieldValidationUtil.prototype.poI18nPipe;
        /** @type {?} */
        FieldValidationUtil.prototype.literals;
        /** @type {?} */
        FieldValidationUtil.prototype.disclaimerUtil;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
    Versão: 1.000
    Data Criação: 06/08/2018
    */
    var FilterRangeUtil = /** @class */ (function () {
        function FilterRangeUtil() {
        }
        /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        FilterRangeUtil.makeFilterRangeCharacter = /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        function (iniInitial, iniFinal) {
            return {
                iniInitial: iniInitial,
                iniFinal: iniFinal,
                valInitial: iniInitial,
                valFinal: iniFinal
            };
        };
        /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        FilterRangeUtil.makeFilterRangeNumber = /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        function (iniInitial, iniFinal) {
            return {
                iniInitial: iniInitial,
                iniFinal: iniFinal,
                valInitial: iniInitial,
                valFinal: iniFinal
            };
        };
        /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        FilterRangeUtil.makeFilterRangeDate = /**
         * @param {?} iniInitial
         * @param {?} iniFinal
         * @return {?}
         */
        function (iniInitial, iniFinal) {
            return {
                iniInitial: iniInitial,
                iniFinal: iniFinal,
                valInitial: iniInitial,
                valFinal: iniFinal
            };
        };
        return FilterRangeUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
    Versão: 1.003
    Data Criação: 18/04/2019
    */
    /**
     * @record
     */
    function ChartSeries() { }
    if (false) {
        /** @type {?|undefined} */
        ChartSeries.prototype.name;
        /** @type {?|undefined} */
        ChartSeries.prototype.data;
    }
    /**
     * @record
     */
    function ChartValues() { }
    if (false) {
        /** @type {?} */
        ChartValues.prototype.minValue;
        /** @type {?} */
        ChartValues.prototype.maxValue;
    }
    var GenericFunctionsUtils = /** @class */ (function () {
        function GenericFunctionsUtils(literals) {
            this.literals = {};
            this.literals = literals;
        }
        /* Transforma uma Lista separada por "," em um Array */
        /* Transforma uma Lista separada por "," em um Array */
        /**
         * @param {?} list
         * @return {?}
         */
        GenericFunctionsUtils.listToArrayCharacter = /* Transforma uma Lista separada por "," em um Array */
        /**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            /** @type {?} */
            var returnArray = new Array();
            if (list && list !== '') {
                returnArray = list.split(',');
            }
            return returnArray;
        };
        /* Transforma um Array em uma Lista separada por ","  */
        /* Transforma um Array em uma Lista separada por ","  */
        /**
         * @param {?} array
         * @return {?}
         */
        GenericFunctionsUtils.ArrayToListCharacter = /* Transforma um Array em uma Lista separada por ","  */
        /**
         * @param {?} array
         * @return {?}
         */
        function (array) {
            /** @type {?} */
            var list = '';
            if (array && array.length > 0) {
                list = array.join(',');
            }
            return list;
        };
        /**
         * @param {?} object
         * @return {?}
         */
        GenericFunctionsUtils.isEmpty = /**
         * @param {?} object
         * @return {?}
         */
        function (object) {
            /** @type {?} */
            var isEmpty = true;
            for (var content in object) {
                if (object.hasOwnProperty(content)) {
                    isEmpty = false;
                }
            }
            return isEmpty;
        };
        /**
         * @param {?} chartData
         * @return {?}
         */
        GenericFunctionsUtils.getChartValues = /**
         * @param {?} chartData
         * @return {?}
         */
        function (chartData) {
            /** @type {?} */
            var chartValues;
            /** @type {?} */
            var maxValue;
            /** @type {?} */
            var minValue;
            maxValue = undefined;
            minValue = undefined;
            chartData.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (maxValue === undefined && minValue === undefined) {
                    maxValue = item.data[0];
                    minValue = item.data[0];
                }
                else {
                    if (item.data < minValue) {
                        minValue = item.data[0];
                    }
                    if (item.data > maxValue) {
                        maxValue = item.data[0];
                    }
                }
            }));
            if (maxValue > 0 && minValue > 0) {
                chartValues = { maxValue: maxValue, minValue: 0 };
            }
            if (maxValue > 0 && minValue < 0) {
                chartValues = { maxValue: maxValue, minValue: minValue };
            }
            if (maxValue < 0 && minValue < 0) {
                /** @type {?} */
                var max = (minValue / 3) * (-1);
                chartValues = { maxValue: max, minValue: minValue };
            }
            if (maxValue > 0 && minValue === 0) {
                chartValues = { maxValue: maxValue, minValue: 0 };
            }
            if (maxValue === 0 && minValue < 0) {
                /** @type {?} */
                var max = (minValue / 3) * (-1);
                chartValues = { maxValue: max, minValue: minValue };
            }
            if (maxValue === 0 && minValue === 0) {
                chartValues = { maxValue: undefined, minValue: undefined };
            }
            chartValues.maxValue = Math.round(chartValues.maxValue);
            chartValues.minValue = Math.round(chartValues.minValue);
            return chartValues;
        };
        /*Deixa no list apenas o itens que existem no options*/
        /*Deixa no list apenas o itens que existem no options*/
        /**
         * @param {?} options
         * @param {?} list
         * @return {?}
         */
        GenericFunctionsUtils.atzMultiSelectListByOptions = /*Deixa no list apenas o itens que existem no options*/
        /**
         * @param {?} options
         * @param {?} list
         * @return {?}
         */
        function (options, list) {
            /** @type {?} */
            var idx;
            /** @type {?} */
            var newList;
            if (!list) {
                return list;
            }
            newList = new Array();
            list.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item) {
                    idx = options.findIndex((/**
                     * @param {?} itemOptions
                     * @return {?}
                     */
                    function (itemOptions) { return itemOptions.value === item; }));
                    if (idx >= 0) {
                        newList.push(item);
                    }
                }
            }));
            return newList;
        };
        /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /**
         * @param {?} options
         * @param {?} list
         * @return {?}
         */
        GenericFunctionsUtils.prototype.loadOptionsMultiSelect = /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /**
         * @param {?} options
         * @param {?} list
         * @return {?}
         */
        function (options, list) {
            var _this = this;
            /** @type {?} */
            var idx;
            if (!list) {
                return;
            }
            list.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item) {
                    idx = options.findIndex((/**
                     * @param {?} itemOptions
                     * @return {?}
                     */
                    function (itemOptions) { return itemOptions.value === item; }));
                    if (idx === -1) {
                        options.push({ label: item === 'all' ? _this.literals['all'] : item, value: item });
                    }
                }
            }));
        };
        /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /**
         * @param {?} options
         * @param {?} selectValue
         * @param {?=} tradValue
         * @return {?}
         */
        GenericFunctionsUtils.prototype.loadOptionsSelect = /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
        /**
         * @param {?} options
         * @param {?} selectValue
         * @param {?=} tradValue
         * @return {?}
         */
        function (options, selectValue, tradValue) {
            if (tradValue === void 0) { tradValue = false; }
            /** @type {?} */
            var idx;
            if (!selectValue) {
                return;
            }
            if (selectValue) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                function (itemOptions) { return itemOptions.value === selectValue; }));
                if (idx === -1) {
                    options.push({ label: tradValue ? this.literals[selectValue] : selectValue, value: selectValue });
                }
            }
        };
        /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
        /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
        /**
         * @param {?} firstObject
         * @param {?} secondObject
         * @return {?}
         */
        GenericFunctionsUtils.prototype.compareObjects = /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
        /**
         * @param {?} firstObject
         * @param {?} secondObject
         * @return {?}
         */
        function (firstObject, secondObject) {
            if (!firstObject || !secondObject) {
                return false;
            }
            /*Pega a lista de nomes dos campos do objetos e compara*/
            if (Object.getOwnPropertyNames(firstObject).length !== Object.getOwnPropertyNames(secondObject).length) {
                return false;
            }
            for (var content in firstObject) {
                if (content.substr(0, 1) === '$' || content.substr(0, 1) === '_') {
                    continue;
                }
                if (firstObject[content] !== secondObject[content]) {
                    return false;
                }
            }
            return true;
        };
        /**
         * @param {?} charInd
         * @param {?} dateRef
         * @return {?}
         */
        GenericFunctionsUtils.prototype.referenceGeneration = /**
         * @param {?} charInd
         * @param {?} dateRef
         * @return {?}
         */
        function (charInd, dateRef) {
            /** @type {?} */
            var reference;
            /** @type {?} */
            var random;
            /** @type {?} */
            var iDay = dateRef.getDate();
            /** @type {?} */
            var iMonth = dateRef.getMonth() + 1;
            /** @type {?} */
            var iYear = dateRef.getFullYear();
            reference = "" + this.pad(iYear) + this.pad(iMonth) + this.pad(iDay) + charInd;
            random = btoa("" + (new Date()).getTime());
            random = random.replace(/[=]/g, '');
            random = random.slice(random.length - 3, random.length);
            return "" + reference + random;
        };
        /**
         * @param {?} number
         * @return {?}
         */
        GenericFunctionsUtils.prototype.pad = /**
         * @param {?} number
         * @return {?}
         */
        function (number) {
            if (number < 10) {
                return '0' + number;
            }
            if (number > 99) {
                return (number + '').slice(2, 4);
            }
            return number;
        };
        return GenericFunctionsUtils;
    }());
    if (false) {
        /** @type {?} */
        GenericFunctionsUtils.prototype.literals;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function TotvsResponse() { }
    if (false) {
        /** @type {?} */
        TotvsResponse.prototype.items;
        /** @type {?|undefined} */
        TotvsResponse.prototype.hasNext;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IFilterRangeCharacter() { }
    if (false) {
        /** @type {?} */
        IFilterRangeCharacter.prototype.iniInitial;
        /** @type {?} */
        IFilterRangeCharacter.prototype.iniFinal;
        /** @type {?} */
        IFilterRangeCharacter.prototype.valInitial;
        /** @type {?} */
        IFilterRangeCharacter.prototype.valFinal;
    }
    /**
     * @record
     */
    function IFilterRangeNumber() { }
    if (false) {
        /** @type {?} */
        IFilterRangeNumber.prototype.iniInitial;
        /** @type {?} */
        IFilterRangeNumber.prototype.iniFinal;
        /** @type {?} */
        IFilterRangeNumber.prototype.valInitial;
        /** @type {?} */
        IFilterRangeNumber.prototype.valFinal;
    }
    /**
     * @record
     */
    function IFilterRangeDate() { }
    if (false) {
        /** @type {?} */
        IFilterRangeDate.prototype.iniInitial;
        /** @type {?} */
        IFilterRangeDate.prototype.iniFinal;
        /** @type {?} */
        IFilterRangeDate.prototype.valInitial;
        /** @type {?} */
        IFilterRangeDate.prototype.valFinal;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ParametersRpw = /** @class */ (function () {
        function ParametersRpw() {
        }
        return ParametersRpw;
    }());
    if (false) {
        /** @type {?} */
        ParametersRpw.prototype.executionType;
        /** @type {?} */
        ParametersRpw.prototype.execAppointDate;
        /** @type {?} */
        ParametersRpw.prototype.execAppointHour;
        /** @type {?} */
        ParametersRpw.prototype.executionServer;
        /** @type {?} */
        ParametersRpw.prototype.repeatExecution;
        /** @type {?} */
        ParametersRpw.prototype.frequency;
        /** @type {?} */
        ParametersRpw.prototype.frequencyType;
        /** @type {?} */
        ParametersRpw.prototype.frequencyValue;
        /** @type {?} */
        ParametersRpw.prototype.execAppointHourInit;
        /** @type {?} */
        ParametersRpw.prototype.execAppointHourFinal;
        /** @type {?} */
        ParametersRpw.prototype.activeTab;
        /** @type {?} */
        ParametersRpw.prototype.selectWeeklys;
        /** @type {?} */
        ParametersRpw.prototype.dayOfMonth;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RpwService = /** @class */ (function () {
        // private apiUrl = '/genericsZoom';
        // private urlJobScheduler = '/jobScheduler';
        function RpwService(http) {
            this.http = http;
            this.apiUrl = '/dts/datasul-rest/resources/prg/cdp/v1/genericsZoom';
            this.urlJobScheduler = '/dts/datasul-rest/resources/prg/framework/v1/jobScheduler';
            this.filterRpw = {
                fields: 'cod_servid_exec,des_servid_exec',
                filter: 'cod_servid_exec',
                filterZoom: 'cod_servid_exec',
                order: 'cod_servid_exec',
                table: 'servid_exec'
            };
        }
        /**
         * @param {?} param
         * @param {?} appId
         * @return {?}
         */
        RpwService.prototype.getFilteredData = /**
         * @param {?} param
         * @param {?} appId
         * @return {?}
         */
        function (param, appId) {
            var _this = this;
            /** @type {?} */
            var localParams = Object.assign({}, this.filterRpw);
            /** @type {?} */
            var url = this.apiUrl + "?pageSize=10&page=1&table=" + localParams.table;
            url += "&fields=" + localParams.fields + "&order=" + localParams.order;
            if (param.value) {
                url += "&" + localParams.filterZoom + "=*" + param.value + "*";
            }
            return this.http.get(url, {})
                .pipe(operators$1.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.convertToArrayComboOption(response.items, 'codServidExec', 'desServidExec'); })));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RpwService.prototype.getObjectByValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            return this.http.get(this.apiUrl + "/" + value)
                .pipe(operators$1.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.convertToThfComboOption(item, 'codServidExec', 'desServidExec'); })));
        };
        /**
         * @param {?} parameters
         * @return {?}
         */
        RpwService.prototype.createRpw = /**
         * @param {?} parameters
         * @return {?}
         */
        function (parameters) {
            /** @type {?} */
            var params = JSON.parse(JSON.stringify(parameters).replace(/\\\\/g, '*|'));
            return this.http.post("" + this.urlJobScheduler, params);
        };
        /* COMBO */
        /* COMBO */
        /**
         * @param {?} items
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        RpwService.prototype.convertToArrayComboOption = /* COMBO */
        /**
         * @param {?} items
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (items, key, value) {
            var _this = this;
            if (items && items.length > 0) {
                return items.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.convertToThfComboOption(item, key, value); }));
            }
            return [];
        };
        /**
         * @param {?} item
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        RpwService.prototype.convertToThfComboOption = /**
         * @param {?} item
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (item, key, value) {
            item = item || {};
            return {
                value: item[key] || undefined,
                label: item[value] || undefined
            };
        };
        RpwService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RpwService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return RpwService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        RpwService.prototype.apiUrl;
        /**
         * @type {?}
         * @private
         */
        RpwService.prototype.urlJobScheduler;
        /** @type {?} */
        RpwService.prototype.filterRpw;
        /** @type {?} */
        RpwService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TotvsScheduleExecutionComponent = /** @class */ (function () {
        function TotvsScheduleExecutionComponent(thfI18nService, rpwService, poNotification) {
            this.thfI18nService = thfI18nService;
            this.rpwService = rpwService;
            this.poNotification = poNotification;
            this.programEMS5 = false;
            this.programVersion = '';
            this.endExecution = new core.EventEmitter();
            this.jsonObject = {};
            this.literals = {};
        }
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /* VERIFICAR COMO FICARÁ A TRADUÇÃO
            forkJoin(
                  this.thfI18nService.getLiterals(),
                  this.thfI18nService.getLiterals({ context: 'generalRpw' })
              ).subscribe(literals => {
                  literals.map(item => Object.assign(this.literals, item) );
                  this.setupComponents();
              });*/
            this.setupComponents();
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.setupComponents = /**
         * @return {?}
         */
        function () {
            this.executionTypeOptions = [
                { label: 'Executar Hoje', value: 1 },
                { label: 'Agendar Execução', value: 2 }
            ];
            this.frequencyOptions = [
                { label: 'Uma vez no dia', value: 'no' },
                { label: 'Várias vezes no dia', value: 'yes' }
            ];
            this.frequencyTypeOptions = [
                { label: 'Hora(s)', value: 'hour' },
                { label: 'Minuto(s)', value: 'minute' }
            ];
            this.weeklyOptions = [
                { label: 'Domingo', value: 'Sunday' },
                { label: 'Segunda', value: 'Monday' },
                { label: 'Terça', value: 'Tuesday' },
                { label: 'Quarta', value: 'Wednesday' },
                { label: 'Quinta', value: 'Thursday' },
                { label: 'Sexta', value: 'Friday' },
                { label: 'Sábado', value: 'Saturday' }
            ];
            this.columns = [
                { property: 'cod_servid_exec', label: 'Código' },
                { property: 'des_servid_exec', label: 'Descrição' }
            ];
            this.model = new ParametersRpw();
            this.model.executionType = 1;
            this.model.activeTab = 1;
            this.model.repeatExecution = false;
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.isExecutionSchedule = /**
         * @return {?}
         */
        function () {
            return (this.model.executionType === 2);
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.isRepeatExecution = /**
         * @return {?}
         */
        function () {
            return this.model.repeatExecution;
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.isFrenquency = /**
         * @return {?}
         */
        function () {
            return (this.model.frequency === 'yes');
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.changeRepeatExecution = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var date = new Date();
            this.model.execAppointHourInit = this.addZero(date.getHours()) + ":" + this.addZero(date.getMinutes());
            this.model.execAppointHourFinal = this.addZero(date.getHours()) + ":" + this.addZero(date.getMinutes());
            this.model.selectWeeklys = [];
            this.model.dayOfMonth = 0;
            this.model.frequency = 'no';
            this.model.frequencyType = 'hour';
            this.model.frequencyValue = 0;
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.changeExecutionType = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var date = new Date();
            this.model.execAppointDate = date;
            this.model.execAppointHour = this.addZero(date.getHours()) + ":" + this.addZero(date.getMinutes());
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.changeTypeFrequency = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} codTab
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.setActiveTab = /**
         * @param {?} codTab
         * @return {?}
         */
        function (codTab) {
            this.model.activeTab = codTab;
        };
        /**
         * @param {?} i
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.addZero = /**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            if (i < 10) {
                i = '0' + i;
            }
            return i;
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.executeSchedule = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.validate()) {
                return;
            }
            this.jsonObject = {};
            this.jsonObject.status = 'active';
            this.jsonObject.processID = this.programName;
            this.jsonObject.recurrent = this.model.repeatExecution;
            this.jsonObject.executionParameter = {};
            if (this.model.executionType === 1) {
                /** @type {?} */
                var date = new Date();
                this.jsonObject.firstExecution = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "T" + this.addZero(date.getHours()) + ":" + this.addZero(date.getMinutes()) + ":00.000Z";
            }
            if (this.model.executionType === 2) {
                this.jsonObject.firstExecution = this.model.execAppointDate + "T" + this.model.execAppointHour + ":00.000Z";
            }
            this.jsonObject.executionParameter.parametros = [];
            this.jsonObject.executionParameter.parametros[0] = { chave: 'rpwServer', valor: this.model.executionServer };
            this.jsonObject.executionParameter.parametros[1] = { chave: 'RPW_PROGRAM', valor: this.externalName };
            this.jsonObject.executionParameter.parametros[2] = { chave: 'RPW_PRG_EMS5', valor: this.programEMS5 ? 'yes' : 'no' };
            this.jsonObject.executionParameter.parametros[3] = { chave: 'RPW_PRG_VERS', valor: this.programVersion };
            this.jsonObject.executionParameter.parametros[4] = {};
            this.jsonObject.executionParameter.parametros[4].parametros_negocio = this.parameters;
            // Executa hoje ou agendada
            this.rpwService.createRpw(this.jsonObject).subscribe((/**
             * @return {?}
             */
            function () {
                _this.poNotification.success('Execução efetuada com sucesso !');
            }));
            if (this.model.repeatExecution) {
                if (this.model.activeTab === 1) {
                    this.jsonObject.daily = {
                        hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                        minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm')
                    };
                }
                if (this.model.activeTab === 2) {
                    this.jsonObject.weekly = {
                        hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                        minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm'),
                        daysOfWeek: this.model.selectWeeklys
                    };
                }
                if (this.model.activeTab === 3) {
                    this.jsonObject.monthly = {
                        hour: this.getHourOrMinute(this.model.execAppointHourInit, 'h'),
                        minute: this.getHourOrMinute(this.model.execAppointHourInit, 'm'),
                        day: this.model.dayOfMonth
                    };
                }
                if (this.isFrenquency()) {
                    this.jsonObject.rangeExecutions = {
                        frequency: {
                            type: this.model.frequencyType,
                            value: this.model.frequencyValue
                        },
                        rangeLimit: {
                            hour: this.getHourOrMinute(this.model.execAppointHourFinal, 'h'),
                            minute: this.getHourOrMinute(this.model.execAppointHourFinal, 'm')
                        }
                    };
                }
                // Executa a diária, semanal ou mensal
                this.rpwService.createRpw(this.jsonObject).subscribe((/**
                 * @return {?}
                 */
                function () {
                }));
            }
            this.endExecution.emit('endExecution');
        };
        /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.getHourOrMinute = /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */
        function (value, type) {
            if (type === 'h') {
                return +value.substring(0, 2);
            }
            if (type === 'm') {
                return +value.substring(3, 6);
            }
        };
        /**
         * @param {?} hourInit
         * @param {?} hourFinal
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.compareHour = /**
         * @param {?} hourInit
         * @param {?} hourFinal
         * @return {?}
         */
        function (hourInit, hourFinal) {
            if (hourInit === hourFinal) {
                return false;
            }
            if (this.getHourOrMinute(hourInit, 'h') < this.getHourOrMinute(hourFinal, 'h')) {
                return true;
            }
            if (this.getHourOrMinute(hourInit, 'm') > this.getHourOrMinute(hourFinal, 'm')) {
                return false;
            }
            return true;
        };
        /**
         * @return {?}
         */
        TotvsScheduleExecutionComponent.prototype.validate = /**
         * @return {?}
         */
        function () {
            if (!this.scheduleExecutionForm.valid) {
                this.poNotification.error('Verifique as inconsistências em tela.');
                return false;
            }
            if (!this.model.executionServer) {
                this.poNotification.error('Servidor de Execução não foi informado.');
                return false;
            }
            if (this.isExecutionSchedule() && (!this.model.execAppointDate || !this.model.execAppointHour)) {
                this.poNotification.error('Informar a data e a hora para agendamento da execução.');
                return false;
            }
            if (this.model.repeatExecution) {
                if (!this.model.execAppointHourInit) {
                    this.poNotification.error('Informar a hora de início para a execução.');
                    return false;
                }
                if (this.model.activeTab === 2 && (this.model.selectWeeklys.length === 0)) {
                    this.poNotification.error('Informar os dias da semana para a execução.');
                    return false;
                }
                if (this.model.activeTab === 3 && (!this.model.dayOfMonth)) {
                    this.poNotification.error('Informar o dia para a execução.');
                    return false;
                }
                if (this.isFrenquency()) {
                    if (!this.compareHour(this.model.execAppointHourInit, this.model.execAppointHourFinal)) {
                        this.poNotification.error('Hora Fim deve ser maior que Hora Início.');
                        return false;
                    }
                    if (this.model.frequencyValue === 0) {
                        this.poNotification.error('Informar a frequência de execução (A cada hora/minuto).');
                        return false;
                    }
                }
            }
            return true;
        };
        TotvsScheduleExecutionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-totvs-schedule-execution',
                        template: "<form #scheduleExecutionForm=\"ngForm\">\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-radio-group \r\n            class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n            name=\"executionType\"\r\n            p-label=\"Data de Execu\u00E7\u00E3o\"\r\n            [(ngModel)]=\"model.executionType\"\r\n            [p-options]=\"executionTypeOptions\"\r\n            (p-change)=\"changeExecutionType()\">\r\n        </po-radio-group>\r\n\r\n        <po-datepicker *ngIf=isExecutionSchedule()\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"model.execAppointDate\"\r\n            p-label=\"Agendar para\"\r\n            [(ngModel)]=\"model.execAppointDate\">\r\n        </po-datepicker>\r\n\r\n        <po-input *ngIf=isExecutionSchedule()\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"execAppointHour\"\r\n            p-label=\"Hora\"\r\n            p-mask=\"99:99\"\r\n            p-mask-format-model=\"true\"\r\n            p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n            p-error-pattern=\"Hora inv\u00E1lida\"\r\n            [(ngModel)]=\"model.execAppointHour\">\r\n        </po-input>\r\n    </div>\r\n\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-combo\r\n            class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n            name=\"executionServer\"\r\n            p-field-label=\"des_servid_exec\"\r\n            p-field-value=\"cod_servid_exec\"\r\n            p-label=\"Servidor de Execu\u00E7\u00E3o\"\r\n            p-placeholder=\"Servidor de Execuc\u00E3o\"\r\n            [(ngModel)]=\"model.executionServer\"\r\n            [p-filter-service]=\"rpwService\">\r\n        </po-combo>\r\n    </div>\r\n\r\n    <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n        <po-switch\r\n            class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n            name=\"repeatExecution\"\r\n            p-label=\"Repetir ocorr\u00EAncia ?\"\r\n            p-label-off=\"N\u00E3o\"\r\n            p-label-on=\"Sim\"\r\n            [(ngModel)]=\"model.repeatExecution\"\r\n            (click)=\"changeRepeatExecution()\">\r\n        </po-switch>\r\n    </div>\r\n\r\n    <div class=\"po-row\" *ngIf=\"isRepeatExecution()\">\r\n        <po-tabs>\r\n            <po-tab p-label=\"Di\u00E1ria\" p-active (p-click)=\"setActiveTab(1)\">\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyDaily\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">    \r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitDaily\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalDaily\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueDaily\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeDaily\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n\r\n            <po-tab p-label=\"Semanal\" (p-click)=\"setActiveTab(2)\">\r\n                <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n                    <po-multiselect\r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"selectWeeklys\"\r\n                        p-label=\"Dias da Semana\"\r\n                        p-placeholder=\"Escolha os dias da semana\"\r\n                        [(ngModel)]=\"model.selectWeeklys\"\r\n                        [p-options]=\"weeklyOptions\">\r\n                    </po-multiselect>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyWeekly\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                <div class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitWeekly\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalWeekly\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueWeekly\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeWeekly\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n\r\n            <po-tab p-label=\"Mensal\" (p-click)=\"setActiveTab(3)\">\r\n                <div class=\"po-row po-sm-12 po-md-12 po-lg-12 po-xl-12\">\r\n                    <po-number\r\n                        class=\"po-sm-3 po-md-3 po-lg-3 po-xl-3\"\r\n                        name=\"dayOfMonth\"\r\n                        p-label=\"Dia do m\u00EAs\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"2\"\r\n                        p-min=\"0\"\r\n                        p-max=\"31\"\r\n                        [(ngModel)]=\"model.dayOfMonth\">\r\n                    </po-number>\r\n                </div>\r\n\r\n                <div class=\"po-row po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-radio-group \r\n                        class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\"\r\n                        name=\"frequencyMonthly\"\r\n                        p-label=\"Frequ\u00EAncia\"\r\n                        p-columns=1\r\n                        [(ngModel)]=\"model.frequency\"\r\n                        [p-options]=\"frequencyOptions\"\r\n                        (p-change)=\"changeTypeFrequency()\">\r\n                    </po-radio-group>\r\n                </div>\r\n\r\n                 <div class=\"po-row po-sm-6 po-md-6 po-lg-6 po-xl-6\">\r\n                    <po-input\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourInitMonthly\"\r\n                        p-label=\"Hora In\u00EDcio\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourInit\">\r\n                    </po-input>\r\n\r\n                    <po-input *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-6 po-md-6 po-lg-6 po-xl-6\"\r\n                        name=\"execAppointHourFinalWeekly\"\r\n                        p-label=\"Hora Fim\"\r\n                        p-mask=\"99:99\"\r\n                        p-mask-format-model=\"true\"\r\n                        p-pattern=\"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"\r\n                        p-error-pattern=\"Hora inv\u00E1lida\"\r\n                        [(ngModel)]=\"model.execAppointHourFinal\">\r\n                    </po-input>\r\n\r\n                    <po-number *ngIf=\"isFrenquency()\"\r\n                        class=\"po-sm-5 po-md-5 po-lg-5 po-xl-5\"\r\n                        name=\"frequencyValueWeekly\"\r\n                        p-label=\"A cada\"\r\n                        p-minlength=\"1\"\r\n                        p-maxlength=\"3\"\r\n                        p-min=\"0\"\r\n                        p-max=\"999\"\r\n                        [(ngModel)]=\"model.frequencyValue\">\r\n                    </po-number>\r\n\r\n                    <po-select *ngIf=\"isFrenquency()\"\r\n                        class=\"po-mt-3 po-sm-7 po-md-7 po-lg-7 po-xl-7\"\r\n                        name=\"frequencyTypeWeekly\"\r\n                        p-label=\"\"\r\n                        [p-options]=\"frequencyTypeOptions\"\r\n                        [(ngModel)]=\"model.frequencyType\">\r\n                    </po-select>\r\n                </div>\r\n            </po-tab>\r\n        </po-tabs>\r\n    </div>\r\n\r\n    <div class=\"po-sm-12 po-md-12 po-lg-12 po-xl-12\" style=\"padding-top: 15px;\">\r\n        <po-button\r\n            style=\"float: right;\"\r\n            p-label=\"Gerar Agendamento RPW\"\r\n            (click)=\"executeSchedule()\">\r\n        </po-button>\r\n    </div>\r\n</form>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        TotvsScheduleExecutionComponent.ctorParameters = function () { return [
            { type: ngComponents.PoI18nService },
            { type: RpwService },
            { type: ngComponents.PoNotificationService }
        ]; };
        TotvsScheduleExecutionComponent.propDecorators = {
            scheduleExecutionForm: [{ type: core.ViewChild, args: ['scheduleExecutionForm', { static: true },] }],
            programName: [{ type: core.Input }],
            externalName: [{ type: core.Input }],
            programEMS5: [{ type: core.Input }],
            programVersion: [{ type: core.Input }],
            parameters: [{ type: core.Input }],
            endExecution: [{ type: core.Output }]
        };
        return TotvsScheduleExecutionComponent;
    }());
    if (false) {
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.scheduleExecutionForm;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.programName;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.externalName;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.programEMS5;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.programVersion;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.parameters;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.endExecution;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.executionTypeOptions;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.frequencyOptions;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.frequencyTypeOptions;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.weeklyOptions;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.model;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.columns;
        /**
         * @type {?}
         * @private
         */
        TotvsScheduleExecutionComponent.prototype.jsonObject;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.literals;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.thfI18nService;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.rpwService;
        /** @type {?} */
        TotvsScheduleExecutionComponent.prototype.poNotification;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DtsDateFormatPipe = /** @class */ (function () {
        function DtsDateFormatPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} format
         * @return {?}
         */
        DtsDateFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} format
         * @return {?}
         */
        function (value, format) {
            if (format === void 0) { format = 'dd/MM/yyyy'; }
            var _a = value.split('-'), year = _a[0], month = _a[1], day = _a[2];
            /** @type {?} */
            var formattedDate = format.replace('dd', day)
                .replace('MM', month)
                .replace('yyyy', year);
            return formattedDate;
        };
        DtsDateFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'dtsDateFormat'
                    },] }
        ];
        return DtsDateFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DtsBackofficeUtilsModule = /** @class */ (function () {
        function DtsBackofficeUtilsModule() {
        }
        /**
         * @return {?}
         */
        DtsBackofficeUtilsModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: DtsBackofficeUtilsModule,
                providers: [RpwService]
            };
        };
        DtsBackofficeUtilsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TotvsScheduleExecutionComponent,
                            DtsDateFormatPipe
                        ],
                        imports: [
                            common.CommonModule,
                            ngComponents.PoModule,
                            forms.FormsModule,
                            http.HttpClientModule
                        ],
                        exports: [
                            TotvsScheduleExecutionComponent,
                            DtsDateFormatPipe
                        ],
                        providers: [
                            RpwService
                        ]
                    },] }
        ];
        return DtsBackofficeUtilsModule;
    }());

    exports.BreadcrumbControlService = BreadcrumbControlService;
    exports.CacheParamsService = CacheParamsService;
    exports.DateUtil = DateUtil;
    exports.DisclaimerUtil = DisclaimerUtil;
    exports.DtsBackofficeUtilsModule = DtsBackofficeUtilsModule;
    exports.DtsDateFormatPipe = DtsDateFormatPipe;
    exports.FieldValidationUtil = FieldValidationUtil;
    exports.FilterRangeUtil = FilterRangeUtil;
    exports.GenericFunctionsUtils = GenericFunctionsUtils;
    exports.MenuDatasulService = MenuDatasulService;
    exports.ProfileService = ProfileService;
    exports.ReportFormats = ReportFormats;
    exports.ReportService = ReportService;
    exports.TotvsScheduleExecutionComponent = TotvsScheduleExecutionComponent;
    exports.UserLoginService = UserLoginService;
    exports.ɵa = RpwService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dts-backoffice-util.umd.js.map
