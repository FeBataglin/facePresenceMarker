/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.002
Data Criação: 19/02/2019
*/
import { DisclaimerUtil } from './disclaimer.util';
export class FieldValidationUtil {
    /**
     * @param {?} poNotification
     * @param {?} poI18nPipe
     * @param {?} literals
     */
    constructor(poNotification, poI18nPipe, literals) {
        this.literals = {};
        this.poNotification = poNotification;
        this.poI18nPipe = poI18nPipe;
        this.literals = literals;
        this.disclaimerUtil = new DisclaimerUtil(this.poNotification, this.poI18nPipe, this.literals);
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldCharacter(field, value) {
        if (!value || value.trim() === '') {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida uma faixa de caracteres se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeCharacter(initialField, finalField, initialValue, finalValue) {
        if (!initialValue || !finalValue) {
            return true;
        }
        if (initialValue.trim().toUpperCase() > finalValue.trim().toUpperCase()) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} vldValue
     * @param {?=} zeroAccept
     * @return {?}
     */
    vldFieldNumber(field, value, vldValue = false, zeroAccept = false) {
        if (vldValue && !this.vldValueOfNumber(field, value)) {
            return false;
        }
        if ((!value) || value <= 0) {
            if (value === 0 && zeroAccept === true) {
                return true;
            }
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRequered'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldValueOfNumber(field, value) {
        if (value && value < 0) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} vldValue
     * @return {?}
     */
    vldFieldPercent(field, value, vldValue = false) {
        if (vldValue && !this.vldValueOfPercent(field, value)) {
            return false;
        }
        if (!this.vldFieldNumber(field, value)) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldValueOfPercent(field, value) {
        if (value && value < 0) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        if (value && value > 100) {
            this.poNotification.error({ message: this.poI18nPipe.transform(this.literals['fieldVldNumber'], [value.toString(), this.literals[field]]) });
            return false;
        }
        return true;
    }
    // Valida uma faixa de números se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeNumber(initialField, finalField, initialValue, finalValue) {
        if (!initialValue) {
            initialValue = 0;
        }
        if (!finalValue) {
            finalValue = 0;
        }
        if (initialValue > finalValue) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldDate(field, value) {
        /** @type {?} */
        const valDate = this.disclaimerUtil.ajustDate(value);
        if (!this.disclaimerUtil.isValidDate(valDate)) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldDate'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida uma faixa de datas se o inicial é menor que final
    /**
     * @param {?} initialField
     * @param {?} finalField
     * @param {?} initialValue
     * @param {?} finalValue
     * @return {?}
     */
    vldRangeDate(initialField, finalField, initialValue, finalValue) {
        if (!initialValue || !finalValue) {
            return true;
        }
        /** @type {?} */
        const valInitialDate = this.disclaimerUtil.ajustDate(initialValue).getTime();
        /** @type {?} */
        const valFinalDate = this.disclaimerUtil.ajustDate(finalValue).getTime();
        if (valInitialDate > valFinalDate) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldRange'], [this.literals[initialField], this.literals[finalField]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldMultiSelect(field, value) {
        if (!value || value.length === 0) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    vldFieldCheckbox(field, value) {
        if (!value || value.length === 0) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldSelected'], [this.literals[field]])
            });
            return false;
        }
        return true;
    }
    // Valida formato conforme regra: "9" apenas números, "X" qualquer caracter, "!" apenas letras maiúsculas
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} format
     * @param {?=} replacePoint
     * @return {?}
     */
    vldFieldFormat(field, value, format, replacePoint = false) {
        /** @type {?} */
        let lOK = true;
        /** @type {?} */
        let oldFormat;
        if (!value) {
            return lOK;
        }
        /*Retira os pontos do formato*/
        if (replacePoint) {
            oldFormat = format;
            format = format.replace(/\./g, '');
        }
        if (value.length !== format.length) {
            lOK = false;
        }
        else {
            for (let idx = 0; idx < format.length; idx++) {
                if (format[idx] === '9') {
                    if (value[idx].replace(/[0-9]/, '9') !== '9') {
                        lOK = false;
                        break;
                    }
                }
                if (format[idx] === '!') {
                    if (value[idx].replace(/[A-Z]/, 'A') !== 'A') {
                        lOK = false;
                        break;
                    }
                }
            }
        }
        if (replacePoint) {
            format = oldFormat;
        }
        if (!lOK) {
            this.poNotification.error({
                message: this.poI18nPipe.transform(this.literals['fieldVldFormat'], [this.literals[field], format])
            });
        }
        return lOK;
    }
}
if (false) {
    /** @type {?} */
    FieldValidationUtil.prototype.poNotification;
    /** @type {?} */
    FieldValidationUtil.prototype.poI18nPipe;
    /** @type {?} */
    FieldValidationUtil.prototype.literals;
    /** @type {?} */
    FieldValidationUtil.prototype.disclaimerUtil;
}
//# sourceMappingURL=data:application/json;base64,