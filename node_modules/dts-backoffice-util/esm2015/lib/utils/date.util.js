/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.000
Data Criação: 18/04/2019
*/
export class DateUtil {
    constructor() { }
    /* Transforma data para o padrão YYYY-MM-DD */
    /**
     * @param {?} date
     * @return {?}
     */
    static dateToQueryParam(date) {
        /** @type {?} */
        const iDay = date.getDate();
        /** @type {?} */
        const iMonth = date.getMonth() + 1;
        /** @type {?} */
        const iYear = date.getFullYear();
        return `${iYear}-${this.pad(iMonth)}-${this.pad(iDay)}`;
    }
    /* Transforma data no padrão YYYY-MM-DD para DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    static queryParamToDate(param) {
        /** @type {?} */
        const iDay = +param.split('-')[2];
        /** @type {?} */
        const iMonth = +param.split('-')[1];
        /** @type {?} */
        const iYear = +param.split('-')[0];
        return new Date(iYear, iMonth - 1, iDay);
    }
    /* Valida se foi informado uma data válida */
    /**
     * @param {?} date
     * @return {?}
     */
    static isValidDate(date) {
        return date instanceof Date && !isNaN(date.getTime());
    }
    /* Ajusta a data retornando o padrão DATE */
    /**
     * @param {?} param
     * @return {?}
     */
    static ajustDate(param) {
        if (param instanceof Date) {
            return param;
        }
        if (!param) {
            return param;
        }
        return this.queryParamToDate(param.split('T')[0]);
    }
    /* Ajusta a data para o padrão DATE - utilizada nos construtores dos modelos */
    /**
     * @param {?=} values
     * @param {?=} fieldName
     * @return {?}
     */
    static ajustDateToModel(values = {}, fieldName) {
        if (values.hasOwnProperty(fieldName) && (values[fieldName])) {
            if (values[fieldName].indexOf('T') >= 0) {
                return new Date(values[fieldName]);
            }
            /** @type {?} */
            const iDay = +values[fieldName].split('-')[2];
            /** @type {?} */
            const iMonth = +values[fieldName].split('-')[1];
            /** @type {?} */
            const iYear = +values[fieldName].split('-')[0];
            return new Date(iYear, iMonth - 1, iDay);
        }
        return null;
    }
    /* Adicona zero a esquerda do número */
    /**
     * @param {?} number
     * @return {?}
     */
    static pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZHRzLWJhY2tvZmZpY2UtdXRpbC8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kYXRlLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQSxNQUFNLE9BQU8sUUFBUTtJQUVqQixnQkFDSSxDQUFDOzs7Ozs7SUFHTCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBVTs7Y0FDeEIsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7O2NBQ3JCLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQzs7Y0FDNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFFaEMsT0FBTyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUM1RCxDQUFDOzs7Ozs7SUFHRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBYTs7Y0FDM0IsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQzNCLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztjQUM3QixLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUdELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBVTtRQUN6QixPQUFPLElBQUksWUFBWSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7O0lBR0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFVO1FBQ3ZCLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFDO1NBQUU7UUFDNUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFDO1NBQUU7UUFFN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7Ozs7SUFHRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBaUIsRUFBRSxFQUFFLFNBQWlCO1FBQzFELElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFO1lBQ3pELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDdEM7O2tCQUVLLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztrQkFDdkMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O2tCQUN6QyxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7O0lBR0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNO1FBQ2IsSUFBSSxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQ2IsT0FBTyxHQUFHLEdBQUcsTUFBTSxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuVmVyc8OjbzogMS4wMDBcclxuRGF0YSBDcmlhw6fDo286IDE4LzA0LzIwMTlcclxuKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlVXRpbCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICApIHsgfVxyXG5cclxuICAgIC8qIFRyYW5zZm9ybWEgZGF0YSBwYXJhIG8gcGFkcsOjbyBZWVlZLU1NLUREICovXHJcbiAgICBzdGF0aWMgZGF0ZVRvUXVlcnlQYXJhbShkYXRlOiBEYXRlKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBpRGF5ID0gZGF0ZS5nZXREYXRlKCk7XHJcbiAgICAgICAgY29uc3QgaU1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcclxuICAgICAgICBjb25zdCBpWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAke2lZZWFyfS0ke3RoaXMucGFkKGlNb250aCl9LSR7dGhpcy5wYWQoaURheSl9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKiBUcmFuc2Zvcm1hIGRhdGEgbm8gcGFkcsOjbyBZWVlZLU1NLUREIHBhcmEgREFURSAqL1xyXG4gICAgc3RhdGljIHF1ZXJ5UGFyYW1Ub0RhdGUocGFyYW06IHN0cmluZyk6IERhdGUge1xyXG4gICAgICAgIGNvbnN0IGlEYXkgPSArcGFyYW0uc3BsaXQoJy0nKVsyXTtcclxuICAgICAgICBjb25zdCBpTW9udGggPSArcGFyYW0uc3BsaXQoJy0nKVsxXTtcclxuICAgICAgICBjb25zdCBpWWVhciA9ICtwYXJhbS5zcGxpdCgnLScpWzBdO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoaVllYXIsIGlNb250aCAtIDEsIGlEYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIFZhbGlkYSBzZSBmb2kgaW5mb3JtYWRvIHVtYSBkYXRhIHbDoWxpZGEgKi9cclxuICAgIHN0YXRpYyBpc1ZhbGlkRGF0ZShkYXRlOiBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihkYXRlLmdldFRpbWUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQWp1c3RhIGEgZGF0YSByZXRvcm5hbmRvIG8gcGFkcsOjbyBEQVRFICovXHJcbiAgICBzdGF0aWMgYWp1c3REYXRlKHBhcmFtOiBhbnkpOiBEYXRlIHtcclxuICAgICAgICBpZiAocGFyYW0gaW5zdGFuY2VvZiBEYXRlKSB7IHJldHVybiBwYXJhbTsgfVxyXG4gICAgICAgIGlmICghcGFyYW0pIHsgcmV0dXJuIHBhcmFtOyB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5UGFyYW1Ub0RhdGUocGFyYW0uc3BsaXQoJ1QnKVswXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQWp1c3RhIGEgZGF0YSBwYXJhIG8gcGFkcsOjbyBEQVRFIC0gdXRpbGl6YWRhIG5vcyBjb25zdHJ1dG9yZXMgZG9zIG1vZGVsb3MgKi9cclxuICAgIHN0YXRpYyBhanVzdERhdGVUb01vZGVsKHZhbHVlczogT2JqZWN0ID0ge30sIGZpZWxkTmFtZTogc3RyaW5nKTogRGF0ZSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShmaWVsZE5hbWUpICYmICh2YWx1ZXNbZmllbGROYW1lXSkpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tmaWVsZE5hbWVdLmluZGV4T2YoJ1QnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWVzW2ZpZWxkTmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpRGF5ID0gK3ZhbHVlc1tmaWVsZE5hbWVdLnNwbGl0KCctJylbMl07XHJcbiAgICAgICAgICAgIGNvbnN0IGlNb250aCA9ICt2YWx1ZXNbZmllbGROYW1lXS5zcGxpdCgnLScpWzFdO1xyXG4gICAgICAgICAgICBjb25zdCBpWWVhciA9ICt2YWx1ZXNbZmllbGROYW1lXS5zcGxpdCgnLScpWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoaVllYXIsIGlNb250aCAtIDEsIGlEYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQWRpY29uYSB6ZXJvIGEgZXNxdWVyZGEgZG8gbsO6bWVybyAqL1xyXG4gICAgc3RhdGljIHBhZChudW1iZXIpIHtcclxuICAgICAgICBpZiAobnVtYmVyIDwgMTApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcwJyArIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcclxuICAgIH1cclxufVxyXG4iXX0=