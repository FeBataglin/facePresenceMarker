/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.003
Data Criação: 18/04/2019
*/
/**
 * @record
 */
export function ChartSeries() { }
if (false) {
    /** @type {?|undefined} */
    ChartSeries.prototype.name;
    /** @type {?|undefined} */
    ChartSeries.prototype.data;
}
/**
 * @record
 */
export function ChartValues() { }
if (false) {
    /** @type {?} */
    ChartValues.prototype.minValue;
    /** @type {?} */
    ChartValues.prototype.maxValue;
}
export class GenericFunctionsUtils {
    /**
     * @param {?} literals
     */
    constructor(literals) {
        this.literals = {};
        this.literals = literals;
    }
    /* Transforma uma Lista separada por "," em um Array */
    /**
     * @param {?} list
     * @return {?}
     */
    static listToArrayCharacter(list) {
        /** @type {?} */
        let returnArray = new Array();
        if (list && list !== '') {
            returnArray = list.split(',');
        }
        return returnArray;
    }
    /* Transforma um Array em uma Lista separada por ","  */
    /**
     * @param {?} array
     * @return {?}
     */
    static ArrayToListCharacter(array) {
        /** @type {?} */
        let list = '';
        if (array && array.length > 0) {
            list = array.join(',');
        }
        return list;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    static isEmpty(object) {
        /** @type {?} */
        let isEmpty = true;
        for (const content in object) {
            if (object.hasOwnProperty(content)) {
                isEmpty = false;
            }
        }
        return isEmpty;
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    static getChartValues(chartData) {
        /** @type {?} */
        let chartValues;
        /** @type {?} */
        let maxValue;
        /** @type {?} */
        let minValue;
        maxValue = undefined;
        minValue = undefined;
        chartData.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (maxValue === undefined && minValue === undefined) {
                maxValue = item.data[0];
                minValue = item.data[0];
            }
            else {
                if (item.data < minValue) {
                    minValue = item.data[0];
                }
                if (item.data > maxValue) {
                    maxValue = item.data[0];
                }
            }
        }));
        if (maxValue > 0 && minValue > 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue > 0 && minValue < 0) {
            chartValues = { maxValue: maxValue, minValue: minValue };
        }
        if (maxValue < 0 && minValue < 0) {
            /** @type {?} */
            const max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue > 0 && minValue === 0) {
            chartValues = { maxValue: maxValue, minValue: 0 };
        }
        if (maxValue === 0 && minValue < 0) {
            /** @type {?} */
            const max = (minValue / 3) * (-1);
            chartValues = { maxValue: max, minValue: minValue };
        }
        if (maxValue === 0 && minValue === 0) {
            chartValues = { maxValue: undefined, minValue: undefined };
        }
        chartValues.maxValue = Math.round(chartValues.maxValue);
        chartValues.minValue = Math.round(chartValues.minValue);
        return chartValues;
    }
    /*Deixa no list apenas o itens que existem no options*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    static atzMultiSelectListByOptions(options, list) {
        /** @type {?} */
        let idx;
        /** @type {?} */
        let newList;
        if (!list) {
            return list;
        }
        newList = new Array();
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                itemOptions => itemOptions.value === item));
                if (idx >= 0) {
                    newList.push(item);
                }
            }
        }));
        return newList;
    }
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} list
     * @return {?}
     */
    loadOptionsMultiSelect(options, list) {
        /** @type {?} */
        let idx;
        if (!list) {
            return;
        }
        list.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item) {
                idx = options.findIndex((/**
                 * @param {?} itemOptions
                 * @return {?}
                 */
                itemOptions => itemOptions.value === item));
                if (idx === -1) {
                    options.push({ label: item === 'all' ? this.literals['all'] : item, value: item });
                }
            }
        }));
    }
    /*Carrega o Options com os valores defaults passados como parâmetro (list)*/
    /**
     * @param {?} options
     * @param {?} selectValue
     * @param {?=} tradValue
     * @return {?}
     */
    loadOptionsSelect(options, selectValue, tradValue = false) {
        /** @type {?} */
        let idx;
        if (!selectValue) {
            return;
        }
        if (selectValue) {
            idx = options.findIndex((/**
             * @param {?} itemOptions
             * @return {?}
             */
            itemOptions => itemOptions.value === selectValue));
            if (idx === -1) {
                options.push({ label: tradValue ? this.literals[selectValue] : selectValue, value: selectValue });
            }
        }
    }
    /*Método que compara 2 objetos e retorna se são iguais ou diferentes*/
    /**
     * @param {?} firstObject
     * @param {?} secondObject
     * @return {?}
     */
    compareObjects(firstObject, secondObject) {
        if (!firstObject || !secondObject) {
            return false;
        }
        /*Pega a lista de nomes dos campos do objetos e compara*/
        if (Object.getOwnPropertyNames(firstObject).length !== Object.getOwnPropertyNames(secondObject).length) {
            return false;
        }
        for (const content in firstObject) {
            if (content.substr(0, 1) === '$' || content.substr(0, 1) === '_') {
                continue;
            }
            if (firstObject[content] !== secondObject[content]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} charInd
     * @param {?} dateRef
     * @return {?}
     */
    referenceGeneration(charInd, dateRef) {
        /** @type {?} */
        let reference;
        /** @type {?} */
        let random;
        /** @type {?} */
        const iDay = dateRef.getDate();
        /** @type {?} */
        const iMonth = dateRef.getMonth() + 1;
        /** @type {?} */
        const iYear = dateRef.getFullYear();
        reference = `${this.pad(iYear)}${this.pad(iMonth)}${this.pad(iDay)}${charInd}`;
        random = btoa(`${(new Date()).getTime()}`);
        random = random.replace(/[=]/g, '');
        random = random.slice(random.length - 3, random.length);
        return `${reference}${random}`;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        if (number > 99) {
            return (number + '').slice(2, 4);
        }
        return number;
    }
}
if (false) {
    /** @type {?} */
    GenericFunctionsUtils.prototype.literals;
}
//# sourceMappingURL=data:application/json;base64,