/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.009
Data Criação: 06/08/2018
*/
export class DisclaimerUtil {
    /**
     * @param {?} poNotification
     * @param {?} poI18nPipe
     * @param {?} literals
     */
    constructor(poNotification, poI18nPipe, literals) {
        this.literals = {};
        this.poNotification = poNotification;
        this.poI18nPipe = poI18nPipe;
        this.literals = literals;
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} tradValue
     * @param {?=} vldBlank
     * @return {?}
     */
    makeDisclaimer(property, value, hideClose = false, tradValue = false, vldBlank = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        if (vldBlank && value === '') {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${tradValue ? this.literals[value] : value}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} vldBlank
     * @return {?}
     */
    makeDisclaimerFromNumber(property, value, hideClose = false, vldBlank = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        if (vldBlank && value === 0) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${value}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromBoolean(property, value, hideClose = false) {
        if (value === null || value === undefined) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${value ? this.literals['yes'] : this.literals['no']}`,
            property: `${property}`,
            value: `${value}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromDate(property, value, hideClose = false) {
        /** @type {?} */
        const dDate = this.ajustDate(value);
        if (!this.isValidDate(dDate)) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${dDate.toLocaleDateString()}`,
            property: `${property}`,
            value: `${this.dateToQueryParam(dDate)}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} length
     * @param {?=} hideClose
     * @param {?=} tradValue
     * @return {?}
     */
    makeDisclaimerFromMultiSelect(property, value, length = 0, hideClose = false, tradValue = false) {
        /** @type {?} */
        let lstLabels = '';
        /** @type {?} */
        let lstValues = '';
        if (!value) {
            return { label: '', property: '', value: '' };
        }
        if (value.length === 0 || (length > 0 && value.length === length)) {
            lstLabels = this.literals['all'];
            lstValues = 'all';
        }
        else {
            value.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (lstLabels !== '') {
                    lstLabels = `${lstLabels}, `;
                }
                if (lstValues !== '') {
                    lstValues = `${lstValues},`;
                }
                lstLabels = `${lstLabels}${tradValue ? this.literals[item] : item}`;
                lstValues = `${lstValues}${item}`;
            }));
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${lstLabels}`,
            property: `${property}`,
            value: `${lstValues}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} length
     * @param {?=} hideClose
     * @return {?}
     */
    makeDisclaimerFromCheckboxGroup(property, value, length = 0, hideClose = false) {
        /** @type {?} */
        let lstLabels = '';
        /** @type {?} */
        let lstValues = '';
        if (!value) {
            return { label: '', property: '', value: '' };
        }
        if (value.length === 0) {
            lstLabels = this.literals['none'];
            lstValues = 'none';
        }
        else if (length > 0 && value.length === length) {
            lstLabels = this.literals['all'];
            lstValues = 'all';
        }
        else {
            value.map((/**
             * @param {?} checkParam
             * @return {?}
             */
            checkParam => {
                if (lstLabels !== '') {
                    lstLabels = `${lstLabels}, `;
                }
                if (lstValues !== '') {
                    lstValues = `${lstValues},`;
                }
                lstLabels = `${lstLabels}${this.literals[checkParam]}`;
                lstValues = `${lstValues}${checkParam}`;
            }));
        }
        return {
            hideClose,
            label: `${this.literals[property]}: ${lstLabels}`,
            property: `${property}`,
            value: `${lstValues}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeCharacter(property, value, hideClose = false, validateEqual = true) {
        if (value.valInitial === null || value.valInitial === undefined) {
            value.valInitial = value.iniInitial;
        }
        if (value.valFinal === null || value.valFinal === undefined) {
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            value.iniInitial === value.valInitial &&
            value.iniFinal === value.valFinal) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], `'${value.valInitial}'`, `'${value.valFinal}'`]),
            property: `${property}`,
            value: `${value.valInitial};${value.valFinal}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeNumber(property, value, hideClose = false, validateEqual = true) {
        if (value.valInitial === null || value.valInitial === undefined) {
            value.valInitial = value.iniInitial;
        }
        if (value.valFinal === null || value.valFinal === undefined) {
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            value.iniInitial === value.valInitial &&
            value.iniFinal === value.valFinal) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], value.valInitial, value.valFinal]),
            property: `${property}`,
            value: `${value.valInitial};${value.valFinal}`
        };
    }
    /**
     * @param {?} property
     * @param {?} value
     * @param {?=} hideClose
     * @param {?=} validateEqual
     * @return {?}
     */
    makeDisclaimerFromRangeDate(property, value, hideClose = false, validateEqual = true) {
        /** @type {?} */
        let valInitDate = this.ajustDate(value.valInitial);
        /** @type {?} */
        let valFinalDate = this.ajustDate(value.valFinal);
        if (!this.isValidDate(valInitDate)) {
            valInitDate = value.iniInitial;
            value.valInitial = value.iniInitial;
        }
        if (!this.isValidDate(valFinalDate)) {
            valFinalDate = value.iniFinal;
            value.valFinal = value.iniFinal;
        }
        if (validateEqual &&
            this.dateToQueryParam(value.iniInitial) === this.dateToQueryParam(valInitDate) &&
            this.dateToQueryParam(value.iniFinal) === this.dateToQueryParam(valFinalDate)) {
            return { label: '', property: '', value: '' };
        }
        return {
            hideClose,
            label: this.poI18nPipe.transform(this.literals['filterRange'], [this.literals[property], valInitDate.toLocaleDateString(), valFinalDate.toLocaleDateString()]),
            property: `${property}`,
            value: `${this.dateToQueryParam(valInitDate)};${this.dateToQueryParam(valFinalDate)}`
        };
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzCharFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = item.value;
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzNumberFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = item.value;
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzBooleanFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        const returnValue = defaultValue;
        if (disclaimers && disclaimers.length > 0) {
            /** @type {?} */
            const disclaimerFind = disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.property === property));
            if (disclaimerFind && disclaimerFind.value !== null && disclaimerFind.value !== undefined) {
                if (disclaimerFind.value === 'true') {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzDateFromDisclamer(disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = this.ajustDate(defaultValue);
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    returnValue = this.ajustDate(item.value);
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectCharFromDisclamer(disclaimers, property, defaultValue) {
        return this.atzMultiSelectFromDisclamer('char', disclaimers, property, defaultValue);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectNumberFromDisclamer(disclaimers, property, defaultValue) {
        return this.atzMultiSelectFromDisclamer('number', disclaimers, property, defaultValue);
    }
    /**
     * @param {?} type
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    atzMultiSelectFromDisclamer(type, disclaimers, property, defaultValue) {
        /** @type {?} */
        let returnValue = [];
        defaultValue.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            returnValue.push(item.value);
        }));
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null || item.value === 'all' || item.value === 'none') {
                        return false;
                    }
                    returnValue = [];
                    item.value.split(',').forEach((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    itemOpt => {
                        if (type === 'char') {
                            returnValue.push(itemOpt);
                        }
                        if (type === 'number') {
                            returnValue.push(+itemOpt);
                        }
                    }));
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} options
     * @return {?}
     */
    atzCheckboxFromDisclamer(disclaimers, property, options) {
        /** @type {?} */
        let returnValue = [];
        options.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            returnValue.push(item.value);
        }));
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null || item.value === 'all' || item.value === 'none') {
                        return false;
                    }
                    returnValue = [];
                    item.value.split(',').forEach((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    itemOpt => {
                        returnValue.push(itemOpt);
                    }));
                    return true;
                }
                return false;
            }));
        }
        return returnValue;
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeChar
     * @return {?}
     */
    atzRangeCharFromDisclamer(disclaimers, property, rangeChar) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeCharFromQueryParam(value, rangeChar);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeNum
     * @return {?}
     */
    atzRangeNumFromDisclamer(disclaimers, property, rangeNum) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeNumFromQueryParam(value, rangeNum);
    }
    /**
     * @param {?} disclaimers
     * @param {?} property
     * @param {?} rangeDate
     * @return {?}
     */
    atzRangeDateFromDisclamer(disclaimers, property, rangeDate) {
        /** @type {?} */
        let value = '';
        if (disclaimers && disclaimers.length > 0) {
            disclaimers.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.property === property) {
                    if (item.value === null) {
                        return false;
                    }
                    value = item.value;
                    return true;
                }
                return false;
            }));
        }
        return this.atzRangeDateFromQueryParam(value, rangeDate);
    }
    /**
     * @param {?} value
     * @param {?} rangeChar
     * @return {?}
     */
    atzRangeCharFromQueryParam(value, rangeChar) {
        rangeChar.valInitial = rangeChar.iniInitial;
        rangeChar.valFinal = rangeChar.iniFinal;
        if (!value || value === '') {
            return rangeChar;
        }
        rangeChar.valInitial = value.split(';')[0];
        rangeChar.valFinal = value.split(';')[1];
        if (rangeChar.valFinal === null || rangeChar.valFinal === undefined) {
            rangeChar.valFinal = rangeChar.iniFinal;
        }
        return rangeChar;
    }
    /**
     * @param {?} value
     * @param {?} rangeNum
     * @return {?}
     */
    atzRangeNumFromQueryParam(value, rangeNum) {
        rangeNum.valInitial = rangeNum.iniInitial;
        rangeNum.valFinal = rangeNum.iniFinal;
        if (!value || value === '') {
            return rangeNum;
        }
        rangeNum.valInitial = +value.split(';')[0];
        rangeNum.valFinal = +value.split(';')[1];
        if (rangeNum.valFinal === null || rangeNum.valFinal === undefined) {
            rangeNum.valFinal = rangeNum.iniFinal;
        }
        return rangeNum;
    }
    /**
     * @param {?} value
     * @param {?} rangeDate
     * @return {?}
     */
    atzRangeDateFromQueryParam(value, rangeDate) {
        rangeDate.valInitial = rangeDate.iniInitial;
        rangeDate.valFinal = rangeDate.iniFinal;
        if (!value || value === '') {
            return rangeDate;
        }
        rangeDate.valInitial = this.queryParamToDate(value.split(';')[0]);
        rangeDate.valFinal = this.queryParamToDate(value.split(';')[1]);
        if (rangeDate.valFinal === null || rangeDate.valFinal === undefined) {
            rangeDate.valFinal = rangeDate.iniFinal;
        }
        return rangeDate;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    dateToQueryParam(date) {
        /** @type {?} */
        const iDay = date.getDate();
        /** @type {?} */
        const iMonth = date.getMonth() + 1;
        /** @type {?} */
        const iYear = date.getFullYear();
        return `${iYear}-${this.pad(iMonth)}-${this.pad(iDay)}`;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    queryParamToDate(param) {
        /** @type {?} */
        const iDay = +param.split('-')[2];
        /** @type {?} */
        const iMonth = +param.split('-')[1];
        /** @type {?} */
        const iYear = +param.split('-')[0];
        return new Date(iYear, iMonth - 1, iDay);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValidDate(date) {
        return date instanceof Date && !isNaN(date.getTime());
    }
    /**
     * @param {?} param
     * @return {?}
     */
    ajustDate(param) {
        if (param instanceof Date) {
            return param;
        }
        if (!param) {
            return param;
        }
        return this.queryParamToDate(param.split('T')[0]);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }
}
if (false) {
    /** @type {?} */
    DisclaimerUtil.prototype.poNotification;
    /** @type {?} */
    DisclaimerUtil.prototype.poI18nPipe;
    /** @type {?} */
    DisclaimerUtil.prototype.literals;
}
//# sourceMappingURL=data:application/json;base64,