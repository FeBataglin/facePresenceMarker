/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/internal/operators';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
export class RpwService {
    // private apiUrl = '/genericsZoom';
    // private urlJobScheduler = '/jobScheduler';
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.apiUrl = '/dts/datasul-rest/resources/prg/cdp/v1/genericsZoom';
        this.urlJobScheduler = '/dts/datasul-rest/resources/prg/framework/v1/jobScheduler';
        this.filterRpw = {
            fields: 'cod_servid_exec,des_servid_exec',
            filter: 'cod_servid_exec',
            filterZoom: 'cod_servid_exec',
            order: 'cod_servid_exec',
            table: 'servid_exec'
        };
    }
    /**
     * @param {?} param
     * @param {?} appId
     * @return {?}
     */
    getFilteredData(param, appId) {
        /** @type {?} */
        const localParams = Object.assign({}, this.filterRpw);
        /** @type {?} */
        let url = `${this.apiUrl}?pageSize=10&page=1&table=${localParams.table}`;
        url += `&fields=${localParams.fields}&order=${localParams.order}`;
        if (param.value) {
            url += `&${localParams.filterZoom}=*${param.value}*`;
        }
        return this.http.get(url, {})
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.convertToArrayComboOption(response.items, 'codServidExec', 'desServidExec'))));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getObjectByValue(value) {
        return this.http.get(`${this.apiUrl}/${value}`)
            .pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.convertToThfComboOption(item, 'codServidExec', 'desServidExec'))));
    }
    /**
     * @param {?} parameters
     * @return {?}
     */
    createRpw(parameters) {
        /** @type {?} */
        const params = JSON.parse(JSON.stringify(parameters).replace(/\\\\/g, '*|'));
        return this.http.post(`${this.urlJobScheduler}`, params);
    }
    /* COMBO */
    /**
     * @param {?} items
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    convertToArrayComboOption(items, key, value) {
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            item => this.convertToThfComboOption(item, key, value)));
        }
        return [];
    }
    /**
     * @param {?} item
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    convertToThfComboOption(item, key, value) {
        item = item || {};
        return {
            value: item[key] || undefined,
            label: item[value] || undefined
        };
    }
}
RpwService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RpwService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.apiUrl;
    /**
     * @type {?}
     * @private
     */
    RpwService.prototype.urlJobScheduler;
    /** @type {?} */
    RpwService.prototype.filterRpw;
    /** @type {?} */
    RpwService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90dnMtc2NoZWR1bGUtZXhlY3V0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdG90dnMtc2NoZWR1bGUtZXhlY3V0aW9uL3RvdHZzLXNjaGVkdWxlLWV4ZWN1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNbEQsTUFBTSxPQUFPLFVBQVU7Ozs7OztJQU9uQixZQUFtQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTDNCLFdBQU0sR0FBRyxxREFBcUQsQ0FBQztRQUMvRCxvQkFBZSxHQUFHLDJEQUEyRCxDQUFDO1FBTXRFLGNBQVMsR0FBRztZQUN2QixNQUFNLEVBQUUsaUNBQWlDO1lBQ3pDLE1BQU0sRUFBRSxpQkFBaUI7WUFDekIsVUFBVSxFQUFFLGlCQUFpQjtZQUM3QixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLEtBQUssRUFBRSxhQUFhO1NBQ3hCLENBQUM7SUFScUMsQ0FBQzs7Ozs7O0lBVXhDLGVBQWUsQ0FBQyxLQUFVLEVBQUUsS0FBYTs7Y0FDL0IsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7O1lBQ2pELEdBQUcsR0FBSSxHQUFHLElBQUksQ0FBQyxNQUFNLDZCQUE2QixXQUFXLENBQUMsS0FBSyxFQUFFO1FBQ3JFLEdBQUcsSUFBSSxXQUFXLFdBQVcsQ0FBQyxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXRFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNiLEdBQUcsSUFBSSxJQUFJLFdBQVcsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRyxDQUFDO2FBQ3pCLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDeEgsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFLO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO2FBQzFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDakcsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsVUFBa0I7O2NBQ2xCLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNqQixHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLENBQ3BDLENBQUM7SUFDTixDQUFDOzs7Ozs7OztJQUdELHlCQUF5QixDQUFDLEtBQWlCLEVBQUUsR0FBVyxFQUFFLEtBQWE7UUFDbkUsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUMsQ0FBQztTQUM1RTtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7OztJQUVELHVCQUF1QixDQUFDLElBQVMsRUFBRSxHQUFXLEVBQUUsS0FBYTtRQUN6RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixPQUFPO1lBQ0gsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTO1lBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUztTQUNsQyxDQUFDO0lBQ04sQ0FBQzs7O1lBNURKLFVBQVU7Ozs7WUFKRixVQUFVOzs7Ozs7O0lBUWYsNEJBQXVFOzs7OztJQUN2RSxxQ0FBc0Y7O0lBTXRGLCtCQU1FOztJQVJVLDBCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFBvQ29tYm9PcHRpb24sIFBvQ29tYm9GaWx0ZXIgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgUnB3U2VydmljZSBpbXBsZW1lbnRzIFBvQ29tYm9GaWx0ZXIge1xyXG5cclxuICAgIHByaXZhdGUgYXBpVXJsID0gJy9kdHMvZGF0YXN1bC1yZXN0L3Jlc291cmNlcy9wcmcvY2RwL3YxL2dlbmVyaWNzWm9vbSc7XHJcbiAgICBwcml2YXRlIHVybEpvYlNjaGVkdWxlciA9ICcvZHRzL2RhdGFzdWwtcmVzdC9yZXNvdXJjZXMvcHJnL2ZyYW1ld29yay92MS9qb2JTY2hlZHVsZXInO1xyXG4gICAgLy8gcHJpdmF0ZSBhcGlVcmwgPSAnL2dlbmVyaWNzWm9vbSc7XHJcbiAgICAvLyBwcml2YXRlIHVybEpvYlNjaGVkdWxlciA9ICcvam9iU2NoZWR1bGVyJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGZpbHRlclJwdyA9IHtcclxuICAgICAgICAgZmllbGRzOiAnY29kX3NlcnZpZF9leGVjLGRlc19zZXJ2aWRfZXhlYycsXHJcbiAgICAgICAgIGZpbHRlcjogJ2NvZF9zZXJ2aWRfZXhlYycsXHJcbiAgICAgICAgIGZpbHRlclpvb206ICdjb2Rfc2VydmlkX2V4ZWMnLFxyXG4gICAgICAgICBvcmRlcjogJ2NvZF9zZXJ2aWRfZXhlYycsXHJcbiAgICAgICAgIHRhYmxlOiAnc2VydmlkX2V4ZWMnXHJcbiAgICB9O1xyXG5cclxuICAgIGdldEZpbHRlcmVkRGF0YShwYXJhbTogYW55LCBhcHBJZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxBcnJheTxQb0NvbWJvT3B0aW9uPj4ge1xyXG4gICAgICAgIGNvbnN0IGxvY2FsUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5maWx0ZXJScHcpO1xyXG4gICAgICAgIGxldCB1cmwgID0gYCR7dGhpcy5hcGlVcmx9P3BhZ2VTaXplPTEwJnBhZ2U9MSZ0YWJsZT0ke2xvY2FsUGFyYW1zLnRhYmxlfWA7XHJcbiAgICAgICAgICAgIHVybCArPSBgJmZpZWxkcz0ke2xvY2FsUGFyYW1zLmZpZWxkc30mb3JkZXI9JHtsb2NhbFBhcmFtcy5vcmRlcn1gO1xyXG5cclxuICAgICAgICBpZiAocGFyYW0udmFsdWUpIHtcclxuICAgICAgICAgICAgdXJsICs9IGAmJHtsb2NhbFBhcmFtcy5maWx0ZXJab29tfT0qJHtwYXJhbS52YWx1ZX0qYDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgeyB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAoKHJlc3BvbnNlOiBhbnkpID0+IHRoaXMuY29udmVydFRvQXJyYXlDb21ib09wdGlvbihyZXNwb25zZS5pdGVtcywgJ2NvZFNlcnZpZEV4ZWMnLCAnZGVzU2VydmlkRXhlYycpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZSk6IE9ic2VydmFibGU8UG9Db21ib09wdGlvbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMuYXBpVXJsfS8ke3ZhbHVlfWApXHJcbiAgICAgICAgICAgIC5waXBlKG1hcChpdGVtID0+IHRoaXMuY29udmVydFRvVGhmQ29tYm9PcHRpb24oaXRlbSwgJ2NvZFNlcnZpZEV4ZWMnLCAnZGVzU2VydmlkRXhlYycpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUnB3KHBhcmFtZXRlcnM6IE9iamVjdCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXJzKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnKnwnKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChcclxuICAgICAgICAgICAgYCR7dGhpcy51cmxKb2JTY2hlZHVsZXJ9YCwgcGFyYW1zXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBDT01CTyAqL1xyXG4gICAgY29udmVydFRvQXJyYXlDb21ib09wdGlvbihpdGVtczogQXJyYXk8YW55Piwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBBcnJheTxQb0NvbWJvT3B0aW9uPiB7XHJcbiAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHRoaXMuY29udmVydFRvVGhmQ29tYm9PcHRpb24oaXRlbSwga2V5LCB2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnZlcnRUb1RoZkNvbWJvT3B0aW9uKGl0ZW06IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQb0NvbWJvT3B0aW9uIHtcclxuICAgICAgICBpdGVtID0gaXRlbSB8fCB7fTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWx1ZTogaXRlbVtrZXldIHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgbGFiZWw6IGl0ZW1bdmFsdWVdIHx8IHVuZGVmaW5lZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKiBDT01CTyAqL1xyXG5cclxufVxyXG4iXX0=