/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
Versão: 1.003
Data Criação: 06/08/2018
*/
import { Injectable } from '@angular/core';
export class BreadcrumbControlService {
    constructor() { }
    /**
     * @return {?}
     */
    newBreadcrumb() {
        this.breadcrumb = { items: [] };
    }
    /**
     * @param {?} literal
     * @param {?} activatedRoute
     * @return {?}
     */
    addBreadcrumb(literal, activatedRoute) {
        this.addBreadcrumbURL(literal, decodeURIComponent(activatedRoute.snapshot['_routerState'].url));
    }
    /**
     * @param {?} literal
     * @param {?} url
     * @return {?}
     */
    addBreadcrumbURL(literal, url) {
        if (!literal || literal === '') {
            return;
        }
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        /** @type {?} */
        const breadcrumbAux = { items: [] };
        /** @type {?} */
        let idx = 0;
        for (idx = 0; idx < this.breadcrumb.items.length; idx++) {
            if (this.breadcrumb.items[idx].label !== literal) {
                breadcrumbAux.items.push(this.breadcrumb.items[idx]);
            }
            else {
                break;
            }
        }
        breadcrumbAux.items.push({ label: literal, link: url });
        this.breadcrumb = breadcrumbAux;
    }
    /**
     * @param {?} literal
     * @param {?} valueOld
     * @param {?} valueNew
     * @return {?}
     */
    updBreadcrumbURL(literal, valueOld, valueNew) {
        /** @type {?} */
        let currentRouterURL = this.getCurrentRouter();
        if (!currentRouterURL) {
            return;
        }
        if (!valueOld) {
            return;
        }
        if (!valueNew) {
            return;
        }
        currentRouterURL = currentRouterURL.replace(valueOld, valueNew);
        this.addBreadcrumbURL(literal, currentRouterURL);
    }
    /**
     * @return {?}
     */
    getBreadcrumb() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        return this.breadcrumb;
    }
    /**
     * @return {?}
     */
    getCurrentRouter() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 0) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 1].link;
    }
    /**
     * @return {?}
     */
    getPrevRouter() {
        if (!this.breadcrumb) {
            this.newBreadcrumb();
        }
        if (this.breadcrumb.items.length <= 1) {
            return '';
        }
        return this.breadcrumb.items[this.breadcrumb.items.length - 2].link;
    }
    /**
     * @return {?}
     */
    hasPreviousRouter() {
        return this.breadcrumb.items.length > 1;
    }
}
BreadcrumbControlService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BreadcrumbControlService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    BreadcrumbControlService.prototype.breadcrumb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi1jb250cm9sLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2JyZWFkY3J1bWItY29udHJvbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQyxNQUFNLE9BQU8sd0JBQXdCO0lBR2pDLGdCQUFnQixDQUFDOzs7O0lBRVYsYUFBYTtRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3BDLENBQUM7Ozs7OztJQUVNLGFBQWEsQ0FBQyxPQUFlLEVBQUUsY0FBOEI7UUFDaEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEcsQ0FBQzs7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsT0FBZSxFQUFFLEdBQVc7UUFDaEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQUU7O2NBRXpDLGFBQWEsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7O1lBRS9CLEdBQUcsR0FBRyxDQUFDO1FBQ1gsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFO2dCQUM5QyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNILE1BQU07YUFDVDtTQUNKO1FBRUQsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDO0lBQ3BDLENBQUM7Ozs7Ozs7SUFFTSxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjs7WUFDbkUsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1FBRTlDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUNsQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzFCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFMUIsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVNLGFBQWE7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FBRTtRQUMvQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVNLGdCQUFnQjtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUFFO1FBQy9DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUFFLE9BQU8sRUFBRSxDQUFDO1NBQUU7UUFFckQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hFLENBQUM7Ozs7SUFFTSxhQUFhO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQUU7UUFDL0MsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUM7U0FBRTtRQUVyRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDeEUsQ0FBQzs7OztJQUVNLGlCQUFpQjtRQUNwQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBbEVKLFVBQVU7Ozs7OztJQUVQLDhDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblZlcnPDo286IDEuMDAzXHJcbkRhdGEgQ3JpYcOnw6NvOiAwNi8wOC8yMDE4XHJcbiovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYkNvbnRyb2xTZXJ2aWNlIHtcclxuICAgIGJyZWFkY3J1bWI6IFBvQnJlYWRjcnVtYjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBuZXdCcmVhZGNydW1iKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IHsgaXRlbXM6IFtdIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEJyZWFkY3J1bWIobGl0ZXJhbDogc3RyaW5nLCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFkZEJyZWFkY3J1bWJVUkwobGl0ZXJhbCwgZGVjb2RlVVJJQ29tcG9uZW50KGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90Wydfcm91dGVyU3RhdGUnXS51cmwpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQnJlYWRjcnVtYlVSTChsaXRlcmFsOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFsaXRlcmFsIHx8IGxpdGVyYWwgPT09ICcnKSB7IHJldHVybjsgfVxyXG4gICAgICAgIGlmICghdGhpcy5icmVhZGNydW1iKSB7IHRoaXMubmV3QnJlYWRjcnVtYigpOyB9XHJcblxyXG4gICAgICAgIGNvbnN0IGJyZWFkY3J1bWJBdXggPSB7IGl0ZW1zOiBbXSB9O1xyXG5cclxuICAgICAgICBsZXQgaWR4ID0gMDtcclxuICAgICAgICBmb3IgKGlkeCA9IDA7IGlkeCA8IHRoaXMuYnJlYWRjcnVtYi5pdGVtcy5sZW5ndGg7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJyZWFkY3J1bWIuaXRlbXNbaWR4XS5sYWJlbCAhPT0gbGl0ZXJhbCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYkF1eC5pdGVtcy5wdXNoKHRoaXMuYnJlYWRjcnVtYi5pdGVtc1tpZHhdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicmVhZGNydW1iQXV4Lml0ZW1zLnB1c2goeyBsYWJlbDogbGl0ZXJhbCwgbGluazogdXJsIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmJyZWFkY3J1bWIgPSBicmVhZGNydW1iQXV4O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRCcmVhZGNydW1iVVJMKGxpdGVyYWw6IHN0cmluZywgdmFsdWVPbGQ6IHN0cmluZywgdmFsdWVOZXc6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGxldCBjdXJyZW50Um91dGVyVVJMID0gdGhpcy5nZXRDdXJyZW50Um91dGVyKCk7XHJcblxyXG4gICAgICAgIGlmICghY3VycmVudFJvdXRlclVSTCkgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAoIXZhbHVlT2xkKSB7IHJldHVybjsgfVxyXG4gICAgICAgIGlmICghdmFsdWVOZXcpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIGN1cnJlbnRSb3V0ZXJVUkwgPSBjdXJyZW50Um91dGVyVVJMLnJlcGxhY2UodmFsdWVPbGQsIHZhbHVlTmV3KTtcclxuICAgICAgICB0aGlzLmFkZEJyZWFkY3J1bWJVUkwobGl0ZXJhbCwgY3VycmVudFJvdXRlclVSTCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJyZWFkY3J1bWIoKTogUG9CcmVhZGNydW1iIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnJlYWRjcnVtYikgeyB0aGlzLm5ld0JyZWFkY3J1bWIoKTsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmJyZWFkY3J1bWI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEN1cnJlbnRSb3V0ZXIoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnJlYWRjcnVtYikgeyB0aGlzLm5ld0JyZWFkY3J1bWIoKTsgfVxyXG4gICAgICAgIGlmICh0aGlzLmJyZWFkY3J1bWIuaXRlbXMubGVuZ3RoIDw9IDApIHsgcmV0dXJuICcnOyB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmJyZWFkY3J1bWIuaXRlbXNbdGhpcy5icmVhZGNydW1iLml0ZW1zLmxlbmd0aCAtIDFdLmxpbms7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFByZXZSb3V0ZXIoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnJlYWRjcnVtYikgeyB0aGlzLm5ld0JyZWFkY3J1bWIoKTsgfVxyXG4gICAgICAgIGlmICh0aGlzLmJyZWFkY3J1bWIuaXRlbXMubGVuZ3RoIDw9IDEpIHsgcmV0dXJuICcnOyB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmJyZWFkY3J1bWIuaXRlbXNbdGhpcy5icmVhZGNydW1iLml0ZW1zLmxlbmd0aCAtIDJdLmxpbms7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhc1ByZXZpb3VzUm91dGVyKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJyZWFkY3J1bWIuaXRlbXMubGVuZ3RoID4gMTtcclxuICAgIH1cclxufVxyXG4iXX0=