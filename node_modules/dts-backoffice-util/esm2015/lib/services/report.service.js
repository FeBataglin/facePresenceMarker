/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators/map';
/**
 * @record
 */
export function IProperty() { }
if (false) {
    /** @type {?} */
    IProperty.prototype.name;
    /** @type {?} */
    IProperty.prototype.value;
}
/**
 * @record
 */
export function IReportServiceParams() { }
if (false) {
    /** @type {?} */
    IReportServiceParams.prototype.reportName;
    /** @type {?} */
    IReportServiceParams.prototype.programName;
    /** @type {?} */
    IReportServiceParams.prototype.properties;
    /** @type {?} */
    IReportServiceParams.prototype.dialect;
    /** @type {?} */
    IReportServiceParams.prototype.downloadName;
    /** @type {?} */
    IReportServiceParams.prototype.download;
    /** @type {?} */
    IReportServiceParams.prototype.format;
}
/** @enum {string} */
const ReportFormats = {
    XLSX: 'xlsx',
    PDF: 'pdf',
    DOCX: 'docx',
    HTML: 'html',
};
export { ReportFormats };
export class ReportService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.URL = window.location.href.indexOf('totvs-menu') > 0 ? '/totvs-menu/rest/report/run/'
            : '/dts/datasul-report/resources/run/';
    }
    /**
     * @param {?} params
     * @param {?=} showLoading
     * @return {?}
     */
    generate(params, showLoading = true) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': showLoading ? 'true' : 'false' };
        /** @type {?} */
        let reportURL = `${this.URL}${params.reportName}`;
        if (params.properties.length > 0) {
            reportURL += '?';
            params.properties.forEach((/**
             * @param {?} property
             * @param {?} index
             * @return {?}
             */
            (property, index) => {
                if (index > 0) {
                    reportURL += '&';
                }
                reportURL += `c_properties=${property.name}&c_values=${property.value}`;
            }));
        }
        reportURL += `&dialect=${params.dialect}&format=${params.format}`;
        reportURL += `&program=${params.programName}&resultFileName=${params.downloadName}`;
        return this.httpClient.post(reportURL, {}, { headers, responseType: 'blob' })
            .pipe(map((/**
         * @param {?} report
         * @return {?}
         */
        report => {
            if (params.download) {
                this.download(report, `${params.downloadName}.${params.format}`);
            }
            return report;
        })));
    }
    /**
     * @param {?} file
     * @param {?} fileName
     * @return {?}
     */
    download(file, fileName) {
        /** @type {?} */
        const binaryData = [file];
        /** @type {?} */
        const downloadLink = document.createElement('a');
        /** @type {?} */
        const urlDownload = window.URL.createObjectURL(new Blob(binaryData, { type: file.type }));
        downloadLink.href = urlDownload;
        downloadLink.setAttribute('download', fileName);
        document.body.appendChild(downloadLink);
        downloadLink.click();
        window.URL.revokeObjectURL(urlDownload);
        downloadLink.remove();
    }
}
ReportService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ReportService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    ReportService.prototype.URL;
    /** @type {?} */
    ReportService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kdHMtYmFja29mZmljZS11dGlsLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFFekMsK0JBR0M7OztJQUZDLHlCQUFhOztJQUNiLDBCQUFjOzs7OztBQUdoQiwwQ0FRQzs7O0lBUEMsMENBQW1COztJQUNuQiwyQ0FBb0I7O0lBQ3BCLDBDQUE2Qjs7SUFDN0IsdUNBQWdCOztJQUNoQiw0Q0FBcUI7O0lBQ3JCLHdDQUFrQjs7SUFDbEIsc0NBQXNCOzs7O0lBSXRCLE1BQU8sTUFBTTtJQUNiLEtBQU0sS0FBSztJQUNYLE1BQU8sTUFBTTtJQUNiLE1BQU8sTUFBTTs7O0FBS2YsTUFBTSxPQUFPLGFBQWE7Ozs7SUFLeEIsWUFBbUIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUp6QixRQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCO1lBQy9FLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQztJQUdoQixDQUFDOzs7Ozs7SUFFOUMsUUFBUSxDQUFDLE1BQTRCLEVBQUUsY0FBdUIsSUFBSTs7Y0FDMUQsT0FBTyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTs7WUFFbEUsU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFO1FBRWpELElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2hDLFNBQVMsSUFBSSxHQUFHLENBQUM7WUFFakIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7OztZQUFDLENBQUMsUUFBbUIsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDL0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO29CQUNiLFNBQVMsSUFBSSxHQUFHLENBQUM7aUJBQ2xCO2dCQUNELFNBQVMsSUFBSSxnQkFBZ0IsUUFBUSxDQUFDLElBQUksYUFBYSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDMUUsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELFNBQVMsSUFBSSxZQUFZLE1BQU0sQ0FBQyxPQUFPLFdBQVcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xFLFNBQVMsSUFBSSxZQUFZLE1BQU0sQ0FBQyxXQUFXLG1CQUFtQixNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQzthQUMxRSxJQUFJLENBQUMsR0FBRzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxJQUFVLEVBQUUsUUFBZ0I7O2NBQzdCLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQzs7Y0FDbkIsWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDOztjQUMxQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXpGLFlBQVksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLFlBQVksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBaERGLFVBQVU7Ozs7WUExQkYsVUFBVTs7OztJQTZCakIsNEJBQzZEOztJQUdqRCxtQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvbWFwJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BlcnR5IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUmVwb3J0U2VydmljZVBhcmFtcyB7XHJcbiAgcmVwb3J0TmFtZTogc3RyaW5nOyAvLyBOb21lIGRvIHJwdERlc2lnblxyXG4gIHByb2dyYW1OYW1lOiBzdHJpbmc7IC8vIFByb2dyYW1hIFByb2dyZXNzXHJcbiAgcHJvcGVydGllczogQXJyYXk8SVByb3BlcnR5PjtcclxuICBkaWFsZWN0OiBzdHJpbmc7XHJcbiAgZG93bmxvYWROYW1lOiBzdHJpbmc7XHJcbiAgZG93bmxvYWQ6IGJvb2xlYW47XHJcbiAgZm9ybWF0OiBSZXBvcnRGb3JtYXRzO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBSZXBvcnRGb3JtYXRzIHtcclxuICBYTFNYID0gJ3hsc3gnLFxyXG4gIFBERiA9ICdwZGYnLFxyXG4gIERPQ1ggPSAnZG9jeCcsXHJcbiAgSFRNTCA9ICdodG1sJ1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgUmVwb3J0U2VydmljZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IFVSTCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ3RvdHZzLW1lbnUnKSA+IDAgPyAnL3RvdHZzLW1lbnUvcmVzdC9yZXBvcnQvcnVuLydcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnL2R0cy9kYXRhc3VsLXJlcG9ydC9yZXNvdXJjZXMvcnVuLyc7XHJcblxyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaHR0cENsaWVudDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIGdlbmVyYXRlKHBhcmFtczogSVJlcG9ydFNlcnZpY2VQYXJhbXMsIHNob3dMb2FkaW5nOiBib29sZWFuID0gdHJ1ZSk6IE9ic2VydmFibGU8QmxvYj4ge1xyXG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ1gtUE8tU2NyZWVuLUxvY2snOiBzaG93TG9hZGluZyA/ICd0cnVlJyA6ICdmYWxzZScgfTtcclxuXHJcbiAgICBsZXQgcmVwb3J0VVJMID0gYCR7dGhpcy5VUkx9JHtwYXJhbXMucmVwb3J0TmFtZX1gO1xyXG5cclxuICAgIGlmIChwYXJhbXMucHJvcGVydGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJlcG9ydFVSTCArPSAnPyc7XHJcblxyXG4gICAgICBwYXJhbXMucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eTogSVByb3BlcnR5LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgcmVwb3J0VVJMICs9ICcmJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVwb3J0VVJMICs9IGBjX3Byb3BlcnRpZXM9JHtwcm9wZXJ0eS5uYW1lfSZjX3ZhbHVlcz0ke3Byb3BlcnR5LnZhbHVlfWA7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcG9ydFVSTCArPSBgJmRpYWxlY3Q9JHtwYXJhbXMuZGlhbGVjdH0mZm9ybWF0PSR7cGFyYW1zLmZvcm1hdH1gO1xyXG4gICAgcmVwb3J0VVJMICs9IGAmcHJvZ3JhbT0ke3BhcmFtcy5wcm9ncmFtTmFtZX0mcmVzdWx0RmlsZU5hbWU9JHtwYXJhbXMuZG93bmxvYWROYW1lfWA7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHJlcG9ydFVSTCwge30sIHsgaGVhZGVycywgcmVzcG9uc2VUeXBlOiAnYmxvYicgfSlcclxuICAgICAgLnBpcGUobWFwKHJlcG9ydCA9PiB7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5kb3dubG9hZCkge1xyXG4gICAgICAgICAgdGhpcy5kb3dubG9hZChyZXBvcnQsIGAke3BhcmFtcy5kb3dubG9hZE5hbWV9LiR7cGFyYW1zLmZvcm1hdH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcG9ydDtcclxuICAgICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgZG93bmxvYWQoZmlsZTogQmxvYiwgZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgYmluYXJ5RGF0YSA9IFtmaWxlXTtcclxuICAgIGNvbnN0IGRvd25sb2FkTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGNvbnN0IHVybERvd25sb2FkID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoYmluYXJ5RGF0YSwgeyB0eXBlOiBmaWxlLnR5cGUgfSkpO1xyXG5cclxuICAgIGRvd25sb2FkTGluay5ocmVmID0gdXJsRG93bmxvYWQ7XHJcbiAgICBkb3dubG9hZExpbmsuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGZpbGVOYW1lKTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRMaW5rKTtcclxuICAgIGRvd25sb2FkTGluay5jbGljaygpO1xyXG4gICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsRG93bmxvYWQpO1xyXG4gICAgZG93bmxvYWRMaW5rLnJlbW92ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=