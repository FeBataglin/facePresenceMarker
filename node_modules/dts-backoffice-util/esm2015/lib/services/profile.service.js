/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators/map';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * @record
 */
export function IProfile() { }
if (false) {
    /** @type {?} */
    IProfile.prototype.pageId;
    /** @type {?} */
    IProfile.prototype.dataCode;
    /** @type {?} */
    IProfile.prototype.userCode;
    /** @type {?|undefined} */
    IProfile.prototype.dataValue;
}
/**
 * @record
 */
export function IProfileResponse() { }
if (false) {
    /** @type {?} */
    IProfileResponse.prototype.message;
    /** @type {?} */
    IProfileResponse.prototype.length;
    /** @type {?} */
    IProfileResponse.prototype.data;
}
/** @enum {number} */
const EDataType = {
    STRING: 1,
    JSON: 2,
};
EDataType[EDataType.STRING] = 'STRING';
EDataType[EDataType.JSON] = 'JSON';
export class ProfileService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.apiURL = '/dts/datasul-rest/resources/api/btb/btapi930za';
    }
    /**
     * @param {?} profile
     * @return {?}
     */
    setProfile(profile) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': 'true' };
        const { pageId, userCode } = profile;
        return this.http
            .post(`${this.apiURL}/setProfile?userCode=${userCode}&pageId=${pageId}`, profile, { headers });
    }
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    getProfileAsString(profile, showLoading) {
        return this.getProfile(profile, EDataType.STRING, showLoading ? 'true' : 'false');
    }
    /**
     * @param {?} profile
     * @param {?=} showLoading
     * @return {?}
     */
    getProfileAsJSON(profile, showLoading) {
        return this.getProfile(profile, EDataType.JSON, showLoading ? 'true' : 'false');
    }
    /**
     * @private
     * @param {?} profile
     * @param {?} dataType
     * @param {?=} showLoading
     * @return {?}
     */
    getProfile(profile, dataType, showLoading) {
        /** @type {?} */
        const headers = { 'X-PO-Screen-Lock': showLoading };
        const { pageId, dataCode, userCode } = profile;
        return this.http
            .get(`${this.apiURL}/getProfile?userCode=${userCode}&pageId=${pageId}&dataCode=${dataCode}`, { headers })
            .pipe(map((/**
         * @param {?} preference
         * @return {?}
         */
        preference => {
            if (preference.data[0]) {
                if (dataType === EDataType.STRING) {
                    return preference.data[0].dataValue;
                }
                if (dataType === EDataType.JSON) {
                    return JSON.parse(preference.data[0].dataValue);
                }
            }
            else {
                return undefined;
            }
        })));
    }
}
ProfileService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ProfileService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ProfileService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProfileService_Factory() { return new ProfileService(i0.ɵɵinject(i1.HttpClient)); }, token: ProfileService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ProfileService.prototype.apiURL;
    /** @type {?} */
    ProfileService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZHRzLWJhY2tvZmZpY2UtdXRpbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wcm9maWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBRXpDLDhCQUtDOzs7SUFKRywwQkFBZTs7SUFDZiw0QkFBaUI7O0lBQ2pCLDRCQUFpQjs7SUFDakIsNkJBQW1COzs7OztBQUd2QixzQ0FJQzs7O0lBSEcsbUNBQXVCOztJQUN2QixrQ0FBZTs7SUFDZixnQ0FBaUI7Ozs7SUFJakIsU0FBVTtJQUNWLE9BQVE7Ozs7QUFNWixNQUFNLE9BQU8sY0FBYzs7OztJQUl2QixZQUFtQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBRjFCLFdBQU0sR0FBRyxnREFBZ0QsQ0FBQztJQUU1QixDQUFDOzs7OztJQUV4QyxVQUFVLENBQUMsT0FBaUI7O2NBQ2xCLE9BQU8sR0FBRyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRTtjQUN4QyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPO1FBRXBDLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDWCxJQUFJLENBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSx3QkFBd0IsUUFBUSxXQUFXLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFNUcsQ0FBQzs7Ozs7O0lBRUQsa0JBQWtCLENBQUMsT0FBaUIsRUFBRSxXQUFxQjtRQUN2RCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUFDLE9BQWlCLEVBQUUsV0FBcUI7UUFDckQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7Ozs7OztJQUVPLFVBQVUsQ0FBQyxPQUFpQixFQUFFLFFBQW1CLEVBQUUsV0FBb0I7O2NBQ3JFLE9BQU8sR0FBRyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRTtjQUM3QyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTztRQUU5QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ1gsR0FBRyxDQUFtQixHQUFHLElBQUksQ0FBQyxNQUFNLHdCQUF3QixRQUFRLFdBQVcsTUFBTSxhQUFhLFFBQVEsRUFBRSxFQUN6RyxFQUFFLE9BQU8sRUFBRSxDQUFDO2FBQ2YsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFVLENBQUMsRUFBRTtZQUNuQixJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQyxNQUFNLEVBQUU7b0JBQy9CLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7aUJBQ3ZDO2dCQUVELElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNuRDthQUNKO2lCQUFNO2dCQUNILE9BQU8sU0FBUyxDQUFDO2FBQ3BCO1FBQ0wsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNaLENBQUM7OztZQTlDSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUF2QlEsVUFBVTs7Ozs7SUEwQmYsZ0NBQW1FOztJQUV2RCw4QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMvbWFwJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVByb2ZpbGUge1xyXG4gICAgcGFnZUlkOiBzdHJpbmc7XHJcbiAgICBkYXRhQ29kZTogc3RyaW5nO1xyXG4gICAgdXNlckNvZGU6IHN0cmluZztcclxuICAgIGRhdGFWYWx1ZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUHJvZmlsZVJlc3BvbnNlIHtcclxuICAgIG1lc3NhZ2U6IEFycmF5PHN0cmluZz47XHJcbiAgICBsZW5ndGg6IG51bWJlcjtcclxuICAgIGRhdGE6IEFycmF5PGFueT47XHJcbn1cclxuXHJcbmVudW0gRURhdGFUeXBlIHtcclxuICAgIFNUUklORyA9IDEsXHJcbiAgICBKU09OID0gMlxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFByb2ZpbGVTZXJ2aWNlIHtcclxuXHJcbiAgICByZWFkb25seSBhcGlVUkwgPSAnL2R0cy9kYXRhc3VsLXJlc3QvcmVzb3VyY2VzL2FwaS9idGIvYnRhcGk5MzB6YSc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICAgIHNldFByb2ZpbGUocHJvZmlsZTogSVByb2ZpbGUpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLVNjcmVlbi1Mb2NrJzogJ3RydWUnIH07XHJcbiAgICAgICAgY29uc3QgeyBwYWdlSWQsIHVzZXJDb2RlIH0gPSBwcm9maWxlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgICAgICAgIC5wb3N0PGFueT4oYCR7dGhpcy5hcGlVUkx9L3NldFByb2ZpbGU/dXNlckNvZGU9JHt1c2VyQ29kZX0mcGFnZUlkPSR7cGFnZUlkfWAsIHByb2ZpbGUsIHsgaGVhZGVycyB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvZmlsZUFzU3RyaW5nKHByb2ZpbGU6IElQcm9maWxlLCBzaG93TG9hZGluZz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb2ZpbGUocHJvZmlsZSwgRURhdGFUeXBlLlNUUklORywgc2hvd0xvYWRpbmcgPyAndHJ1ZScgOiAnZmFsc2UnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9maWxlQXNKU09OKHByb2ZpbGU6IElQcm9maWxlLCBzaG93TG9hZGluZz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPG9iamVjdD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb2ZpbGUocHJvZmlsZSwgRURhdGFUeXBlLkpTT04sIHNob3dMb2FkaW5nID8gJ3RydWUnIDogJ2ZhbHNlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQcm9maWxlKHByb2ZpbGU6IElQcm9maWxlLCBkYXRhVHlwZTogRURhdGFUeXBlLCBzaG93TG9hZGluZz86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHsgJ1gtUE8tU2NyZWVuLUxvY2snOiBzaG93TG9hZGluZyB9O1xyXG4gICAgICAgIGNvbnN0IHsgcGFnZUlkLCBkYXRhQ29kZSwgdXNlckNvZGUgfSA9IHByb2ZpbGU7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgICAgICAgLmdldDxJUHJvZmlsZVJlc3BvbnNlPihgJHt0aGlzLmFwaVVSTH0vZ2V0UHJvZmlsZT91c2VyQ29kZT0ke3VzZXJDb2RlfSZwYWdlSWQ9JHtwYWdlSWR9JmRhdGFDb2RlPSR7ZGF0YUNvZGV9YCxcclxuICAgICAgICAgICAgICAgIHsgaGVhZGVycyB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocHJlZmVyZW5jZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJlZmVyZW5jZS5kYXRhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSBFRGF0YVR5cGUuU1RSSU5HKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVmZXJlbmNlLmRhdGFbMF0uZGF0YVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSBFRGF0YVR5cGUuSlNPTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShwcmVmZXJlbmNlLmRhdGFbMF0uZGF0YVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19