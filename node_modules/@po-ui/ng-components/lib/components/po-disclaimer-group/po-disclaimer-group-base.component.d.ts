import { DoCheck, EventEmitter, IterableDiffers } from '@angular/core';
import { PoDisclaimer } from '../po-disclaimer/po-disclaimer.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poDisclaimerGroupLiteralsDefault: {
    en: {
        removeAll: string;
    };
    es: {
        removeAll: string;
    };
    pt: {
        removeAll: string;
    };
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
export declare class PoDisclaimerGroupBaseComponent implements DoCheck {
    private _disclaimers;
    private _hideRemoveAll;
    private differ;
    private previousDisclaimers;
    readonly literals: any;
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value: Array<PoDisclaimer>);
    get disclaimers(): Array<PoDisclaimer>;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value: boolean);
    get hideRemoveAll(): boolean;
    /** Título do grupo de *disclaimers*. */
    title?: string;
    /** Função que será disparada quando a lista de *disclaimers* for modificada. */
    change?: EventEmitter<any>;
    /**
     * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
     *
     * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
     */
    remove?: EventEmitter<any>;
    /**
     * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
     * utilizando o botão "remover todos".
     *
     * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
     */
    removeAll?: EventEmitter<any>;
    constructor(differs: IterableDiffers);
    ngDoCheck(): void;
    onCloseAction(disclaimer: any): void;
    isRemoveAll(): boolean;
    onKeyPress(event: any): void;
    removeAllItems(): void;
    private removeDisclaimer;
    private checkChanges;
    private checkDisclaimers;
    private disclaimersAreChanged;
    private emitChangeDisclaimers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDisclaimerGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoDisclaimerGroupBaseComponent, never, never, { "disclaimers": "p-disclaimers"; "hideRemoveAll": "p-hide-remove-all"; "title": "p-title"; }, { "change": "p-change"; "remove": "p-remove"; "removeAll": "p-remove-all"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1ncm91cC1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1kaXNjbGFpbWVyLWdyb3VwLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9DaGVjaywgRXZlbnRFbWl0dGVyLCBJdGVyYWJsZURpZmZlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvRGlzY2xhaW1lciB9IGZyb20gJy4uL3BvLWRpc2NsYWltZXIvcG8tZGlzY2xhaW1lci5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9EaXNjbGFpbWVyR3JvdXBMaXRlcmFsc0RlZmF1bHQ6IHtcbiAgICBlbjoge1xuICAgICAgICByZW1vdmVBbGw6IHN0cmluZztcbiAgICB9O1xuICAgIGVzOiB7XG4gICAgICAgIHJlbW92ZUFsbDogc3RyaW5nO1xuICAgIH07XG4gICAgcHQ6IHtcbiAgICAgICAgcmVtb3ZlQWxsOiBzdHJpbmc7XG4gICAgfTtcbn07XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tZGlzY2xhaW1lci1ncm91cGAgw6kgcmVjb21lbmRhZG8gcGFyYSBtYW5pcHVsYXIgcGFsYXZyYXMtY2hhdmUgZGUgZmlsdHJvcyBhcGxpY2Fkb3MgZW0gdW1hIHBlc3F1aXNhLlxuICpcbiAqIMOAIHBhcnRpciBkZSBkb2lzICpkaXNjbGFpbWVycyogY29tIG8gYm90w6NvICoqZmVjaGFyKiogaGFiaWxpdGFkbywgbyBjb21wb25lbnRlIHJlbmRlcml6YSBkZSBmb3JtYSBhdXRvbcOhdGljYSB1bSBub3ZvIGUgZGVzdGFjYWRvXG4gKiAqZGlzY2xhaW1lciogcXVlIHBvc3NpYmlsaXRhICoqcmVtb3ZlciB0b2RvcyoqLCBtYXMgcXVlIHRhbWLDqW0gcG9kZSBzZXIgZGVzYWJpbGl0YWRvLlxuICpcbiAqIFRhbWLDqW0gw6kgcG9zc8OtdmVsIG5hdmVnYXIgZW50cmUgb3MgKmRpc2NsYWltZXJzKiBhdHJhdsOpcyBkbyB0ZWNsYWRvIHV0aWxpemFuZG8gYSB0ZWNsYSAqdGFiKiBlLCBwYXJhIHJlbW/Dp8OjbyBkbyAqZGlzY2xhaW1lciogc2VsZWNpb25hZG8sXG4gKiBiYXN0YSBwcmVzc2lvbmFyIGEgdGVjbGEgKmVudGVyKi4gRXN0YSBmdW5jaW9uYWxpZGFkZSBuw6NvIHNlIGFwbGljYSBjYXNvIGEgcHJvcHJpZWRhZGUgYGhpZGVDbG9zZWAgZXN0aXZlciBoYWJpbGl0YWRhLlxuICpcbiAqID4gVmVqYSBhIGludGVncmHDp8OjbyBkZXN0YXMgZnVuY2lvbmFsaWRhZGUgbm8gY29tcG9uZW50ZSBbcG8tcGFnZS1saXN0XSgvZG9jdW1lbnRhdGlvbi9wby1wYWdlLWxpc3QpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0Rpc2NsYWltZXJHcm91cEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrIHtcbiAgICBwcml2YXRlIF9kaXNjbGFpbWVycztcbiAgICBwcml2YXRlIF9oaWRlUmVtb3ZlQWxsO1xuICAgIHByaXZhdGUgZGlmZmVyO1xuICAgIHByaXZhdGUgcHJldmlvdXNEaXNjbGFpbWVycztcbiAgICByZWFkb25seSBsaXRlcmFsczogYW55O1xuICAgIC8qKiBMaXN0YSBkZSAqZGlzY2xhaW1lcnMqLiAqL1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogTGlzdGEgZGUgKmRpc2NsYWltZXJzKi5cbiAgICAgKlxuICAgICAqIFBhcmEgcXVlIGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBzZWphIGF0dWFsaXphZGEgZGluYW1pY2FtZW50ZSBkZXZlLXNlIHBhc3NhciB1bWEgbm92YSByZWZlcsOqbmNpYSBkbyBhcnJheSBkZSBgUG9EaXNjbGFpbWVyYC5cbiAgICAgKlxuICAgICAqIEV4ZW1wbG8gYWRpY2lvbmFuZG8gdW0gKmRpc2NsYWltZXIqIG5vIGFycmF5OlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogdGhpcy5kaXNjbGFpbWVycyA9IFsuLi50aGlzLmRpc2NsYWltZXJzLCBkaXNjbGFpbWVyXTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIG91XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiB0aGlzLmRpc2NsYWltZXJzID0gdGhpcy5kaXNjbGFpbWVycy5jb25jYXQoZGlzY2xhaW1lcik7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGRpc2NsYWltZXJzKHZhbHVlOiBBcnJheTxQb0Rpc2NsYWltZXI+KTtcbiAgICBnZXQgZGlzY2xhaW1lcnMoKTogQXJyYXk8UG9EaXNjbGFpbWVyPjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2N1bHRhIG8gYm90w6NvIHBhcmEgcmVtb3ZlciB0b2RvcyBvcyAqZGlzY2xhaW1lcnMqIGRvIGdydXBvLlxuICAgICAqXG4gICAgICogPiBQb3IgcGFkcsOjbywgbyBtZXNtbyDDqSBleGliaWRvIMOgIHBhcnRpciBkZSBkb2lzIG91IG1haXMgKmRpc2NsYWltZXJzKiBjb20gYSBvcMOnw6NvIGBoaWRlQ2xvc2VgIGhhYmlsaXRhZGEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGhpZGVSZW1vdmVBbGwodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBoaWRlUmVtb3ZlQWxsKCk6IGJvb2xlYW47XG4gICAgLyoqIFTDrXR1bG8gZG8gZ3J1cG8gZGUgKmRpc2NsYWltZXJzKi4gKi9cbiAgICB0aXRsZT86IHN0cmluZztcbiAgICAvKiogRnVuw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gYSBsaXN0YSBkZSAqZGlzY2xhaW1lcnMqIGZvciBtb2RpZmljYWRhLiAqL1xuICAgIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZ1bsOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIHVtICpkaXNjbGFpbWVyKiBmb3IgcmVtb3ZpZG8gZGEgbGlzdGEgZGUgKmRpc2NsYWltZXJzKiBwZWxvIHVzdcOhcmlvLlxuICAgICAqXG4gICAgICogUmVjZWJlIGNvbW8gcGFyw6JtZXRybyB1bSBvYmpldG8gY29uZm9ybWUgYSBpbnRlcmZhY2UgYFBvRGlzY2xhaW1lckdyb3VwUmVtb3ZlQWN0aW9uYC5cbiAgICAgKi9cbiAgICByZW1vdmU/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIHF1YW5kbyB0b2RvcyBvcyAqZGlzY2xhaW1lcnMqIGZvcmVtIHJlbW92aWRvcyBkYSBsaXN0YSBkZSAqZGlzY2xhaW1lcnMqIHBlbG8gdXN1w6FyaW8sXG4gICAgICogdXRpbGl6YW5kbyBvIGJvdMOjbyBcInJlbW92ZXIgdG9kb3NcIi5cbiAgICAgKlxuICAgICAqIFJlY2ViZSBjb21vIHBhcsOibWV0cm8gdW1hIGxpc3RhIGNvbnRlbmRvIHRvZG9zIG9zIGBkaXNjbGFpbWVyc2AgcmVtb3ZpZG9zLlxuICAgICAqL1xuICAgIHJlbW92ZUFsbD86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycyk7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgb25DbG9zZUFjdGlvbihkaXNjbGFpbWVyOiBhbnkpOiB2b2lkO1xuICAgIGlzUmVtb3ZlQWxsKCk6IGJvb2xlYW47XG4gICAgb25LZXlQcmVzcyhldmVudDogYW55KTogdm9pZDtcbiAgICByZW1vdmVBbGxJdGVtcygpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVtb3ZlRGlzY2xhaW1lcjtcbiAgICBwcml2YXRlIGNoZWNrQ2hhbmdlcztcbiAgICBwcml2YXRlIGNoZWNrRGlzY2xhaW1lcnM7XG4gICAgcHJpdmF0ZSBkaXNjbGFpbWVyc0FyZUNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBlbWl0Q2hhbmdlRGlzY2xhaW1lcnM7XG59XG4iXX0=