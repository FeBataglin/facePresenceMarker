import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter, OnInit } from '@angular/core';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoComboFilter } from './interfaces/po-combo-filter.interface';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboGroup } from './interfaces/po-combo-group.interface';
import { PoComboLiterals } from './interfaces/po-combo-literals.interface';
import { PoComboOption } from './interfaces/po-combo-option.interface';
import { PoComboOptionGroup } from './interfaces/po-combo-option-group.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poComboLiteralsDefault: {
    en: PoComboLiterals;
    es: PoComboLiterals;
    pt: PoComboLiterals;
    ru: PoComboLiterals;
};
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 */
export declare abstract class PoComboBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _changeOnEnter?;
    private _debounceTime?;
    private _disabled?;
    private _disabledInitFilter?;
    private _fieldLabel?;
    private _fieldValue?;
    private _filterMinlength?;
    private _filterMode?;
    private _filterParams?;
    private _literals?;
    private _options;
    private _required?;
    private _sort?;
    private language;
    protected cacheStaticOptions: Array<PoComboOption | PoComboGroup>;
    protected comboOptionsList: Array<PoComboOption | PoComboGroup>;
    cacheOptions: Array<PoComboOption | PoComboGroup>;
    defaultService: PoComboFilterService;
    firstInWriteValue: boolean;
    isFirstFilter: boolean;
    isFiltering: boolean;
    keyupSubscribe: any;
    onModelChange: any;
    onModelTouched: any;
    previousSearchValue: string;
    selectedOption: PoComboOption | PoComboGroup;
    selectedValue: any;
    selectedView: any;
    service: PoComboFilterService;
    visibleOptions: Array<PoComboOption | PoComboGroup>;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Label no componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder?: string;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
     * itens no componente.
     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.
     *
     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
     * `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     * Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     * ```
     * url + ?filter=Peter
     * ```
     *
     * Se for definida a propriedade `p-filter-params`, a mesma também será concatenada. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     */
    filterService: PoComboFilter | string;
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`p-filter-service`).
     *
     * @default `400`
     */
    set debounceTime(value: number);
    get debounceTime(): number;
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    set disabledInitFilter(value: boolean);
    get disabledInitFilter(): boolean;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `value`
     */
    set fieldValue(value: string);
    get fieldValue(): string;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `label`
     */
    set fieldLabel(value: string);
    get fieldLabel(): string;
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    set filterMinlength(value: number);
    get filterMinlength(): number;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    set changeOnEnter(changeOnEnter: boolean);
    get changeOnEnter(): boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     */
    icon?: string;
    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
    set sort(sort: boolean);
    get sort(): boolean;
    /**
     * Nesta propriedade define a lista de opções do `po-combo`.
     *
     * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
     * - Utilize `PoComboOption` para lista de opções simples.
     * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
     *
     * **Importante:**
     * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
     * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
     * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
     */
    set options(options: Array<PoComboOption | PoComboOptionGroup>);
    get options(): Array<PoComboOption | PoComboOptionGroup>;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    set filterMode(filterMode: PoComboFilterMode);
    get filterMode(): PoComboFilterMode;
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
     *
     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
     */
    set filterParams(filterParams: any);
    get filterParams(): any;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-combo
     *   [p-literals]="customLiterals">
     * </po-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value: PoComboLiterals);
    get literals(): PoComboLiterals;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    constructor(languageService: PoLanguageService);
    abstract setInputValue(value: any): void;
    abstract applyFilter(value: string): void;
    abstract getObjectByValue(value: string): void;
    abstract getInputValue(): string;
    abstract initInputObservable(): void;
    get isOptionGroupList(): boolean;
    ngOnInit(): void;
    onInitService(): void;
    setService(service: PoComboFilter | string): void;
    compareMethod(search: string, option: PoComboOption | PoComboGroup, filterMode: PoComboFilterMode): boolean;
    startsWith(search: string, option: PoComboOption | PoComboGroup): boolean;
    contains(search: string, option: PoComboOption | PoComboGroup): boolean;
    endsWith(search: string, option: PoComboOption | PoComboGroup): boolean;
    getOptionFromValue(value: any, options: any): any;
    getOptionFromLabel(label: any, options: any): any;
    updateSelectedValue(option: PoComboOption | PoComboGroup, isUpdateModel?: boolean, isWriteValue?: boolean): void;
    callModelChange(value: any): any;
    isEqual(value: any, inputValue: any): boolean;
    searchForLabel(search: string, options: Array<PoComboOption | PoComboGroup>, filterMode: PoComboFilterMode): void;
    updateComboList(options?: Array<PoComboOption | PoComboGroup>): void;
    getNextOption(value: any, options: Array<PoComboOption | PoComboGroup>, reverse?: boolean): any;
    getIndexSelectedView(): number;
    compareObjects(obj1: any, obj2: any): boolean;
    verifyValidOption(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    protected configAfterSetFilterService(service: PoComboFilter | string): void;
    protected unsubscribeKeyupObservable(): void;
    protected validateModel(model: any): void;
    private comboListDefinitions;
    private compareOptions;
    private hasDuplicatedOption;
    private listingComboOptions;
    private sortOptions;
    private validateValue;
    private verifyComboOptions;
    private verifyComboOptionsGroup;
    private verifyIfHasLabel;
    private updateInternalVariables;
    private updateModel;
    private updateSelectedValueWithOldOption;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoComboBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoComboBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "placeholder": "p-placeholder"; "debounceTime": "p-debounce-time"; "disabledInitFilter": "p-disabled-init-filter"; "fieldValue": "p-field-value"; "fieldLabel": "p-field-label"; "filterMinlength": "p-filter-minlength"; "required": "p-required"; "changeOnEnter": "p-change-on-enter"; "disabled": "p-disabled"; "sort": "p-sort"; "options": "p-options"; "filterMode": "p-filter-mode"; "filterParams": "p-filter-params"; "literals": "p-literals"; "label": "p-label"; "help": "p-help"; "name": "name"; "filterService": "p-filter-service"; "icon": "p-icon"; "optional": "p-optional"; }, { "change": "p-change"; "ngModelChange": "ngModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,