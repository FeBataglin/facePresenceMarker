import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';
import { formatBytes, poLocaleDefault } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poUploadLiteralsDefault } from '../po-upload-base.component';
let PoUploadFileRestrictionsComponent = class PoUploadFileRestrictionsComponent {
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y', 'ru': 'Ð¸' };
        return allowedExtensions
            ? allowedExtensions
                .join(', ')
                .toUpperCase()
                .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`)
            : undefined;
    }
    setLiterals() {
        this.literals = Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
};
PoUploadFileRestrictionsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PoLanguageService }
];
__decorate([
    Input('p-allowed-extensions'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", null);
__decorate([
    Input('p-max-files'),
    __metadata("design:type", Number)
], PoUploadFileRestrictionsComponent.prototype, "maxFiles", void 0);
__decorate([
    Input('p-max-file-size'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "maxFileSize", null);
__decorate([
    Input('p-min-file-size'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "minFileSize", null);
PoUploadFileRestrictionsComponent = __decorate([
    Component({
        selector: 'po-upload-file-restrictions',
        template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\n  </span>\n</p>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, PoLanguageService])
], PoUploadFileRestrictionsComponent);
export { PoUploadFileRestrictionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUV6RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU90RSxJQUFhLGlDQUFpQyxHQUE5QyxNQUFhLGlDQUFpQztJQWtDNUMsWUFBb0IsY0FBaUMsRUFBRSxlQUFrQztRQUFyRSxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFDbkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBNUI4QixJQUFJLGlCQUFpQixDQUFDLEtBQUs7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBTSxLQUFLLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUl5QixJQUFJLFdBQVcsQ0FBQyxLQUFLO1FBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFNLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUV5QixJQUFJLFdBQVcsQ0FBQyxLQUFLO1FBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFNLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQU1ELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVPLHVCQUF1QixDQUFDLGlCQUFnQztRQUM5RCxNQUFNLFdBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVyRSxPQUFPLGlCQUFpQjtZQUN0QixDQUFDLENBQUMsaUJBQWlCO2lCQUNkLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ1YsV0FBVyxFQUFFO2lCQUNiLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDN0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNoQixDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsUUFBUSxtQ0FDUix1QkFBdUIsQ0FBQyxlQUFlLENBQUMsR0FDeEMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMxQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTs7WUEzQnFDLGlCQUFpQjtZQUFtQixpQkFBaUI7O0FBMUIxRDtJQUE5QixLQUFLLENBQUMsc0JBQXNCLENBQUM7OzswRUFFN0I7QUFNcUI7SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7bUVBQWtCO0FBRWI7SUFBekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDOzs7b0VBRXhCO0FBTXlCO0lBQXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzs7O29FQUV4QjtBQTVCVSxpQ0FBaUM7SUFMN0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtRQUN2Qyx1d0JBQTJEO1FBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7cUNBbUNvQyxpQkFBaUIsRUFBbUIsaUJBQWlCO0dBbEM5RSxpQ0FBaUMsQ0E2RDdDO1NBN0RZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGZvcm1hdEJ5dGVzLCBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IHBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0IH0gZnJvbSAnLi4vcG8tdXBsb2FkLWJhc2UuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgX2FsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmc7XG4gIHByaXZhdGUgX21heEZpbGVTaXplOiBzdHJpbmc7XG4gIHByaXZhdGUgX21pbkZpbGVTaXplOiBzdHJpbmc7XG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcblxuICBsaXRlcmFsczogYW55O1xuXG4gIEBJbnB1dCgncC1hbGxvd2VkLWV4dGVuc2lvbnMnKSBzZXQgYWxsb3dlZEV4dGVuc2lvbnModmFsdWUpIHtcbiAgICB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucyA9IHRoaXMuZm9ybWF0QWxsb3dlZEV4dGVuc2lvbnMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgYWxsb3dlZEV4dGVuc2lvbnMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZEV4dGVuc2lvbnM7XG4gIH1cblxuICBASW5wdXQoJ3AtbWF4LWZpbGVzJykgbWF4RmlsZXM6IG51bWJlcjtcblxuICBASW5wdXQoJ3AtbWF4LWZpbGUtc2l6ZScpIHNldCBtYXhGaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21heEZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWF4RmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4RmlsZVNpemU7XG4gIH1cblxuICBASW5wdXQoJ3AtbWluLWZpbGUtc2l6ZScpIHNldCBtaW5GaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21pbkZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWluRmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRmlsZVNpemU7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZXRMaXRlcmFscygpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRBbGxvd2VkRXh0ZW5zaW9ucyhhbGxvd2VkRXh0ZW5zaW9uczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XG4gICAgY29uc3QgY29uanVuY3Rpb24gPSB7ICdwdCc6ICdlJywgJ2VuJzogJ2FuZCcsICdlcyc6ICd5JywgJ3J1JzogJ9C4JyB9O1xuXG4gICAgcmV0dXJuIGFsbG93ZWRFeHRlbnNpb25zXG4gICAgICA/IGFsbG93ZWRFeHRlbnNpb25zXG4gICAgICAgICAgLmpvaW4oJywgJylcbiAgICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgICAgIC5yZXBsYWNlKC8sKD89W14sXSokKS8sIGAgJHtjb25qdW5jdGlvblt0aGlzLmxhbmd1YWdlXX1gKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIHNldExpdGVyYWxzKCkge1xuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxuICAgICAgLi4ucG9VcGxvYWRMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV1cbiAgICB9O1xuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbn1cbiJdfQ==