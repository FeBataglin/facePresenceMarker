import { __decorate, __metadata } from "tslib";
import { Component, Input } from '@angular/core';
import { DatePipe } from '@angular/common';
import { PoInfoOrientation } from '@po-ui/ng-components';
let PoPageJobSchedulerSummaryComponent = class PoPageJobSchedulerSummaryComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = PoInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = {};
        this.parameters = [];
        this.value = {};
    }
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    }
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    getHourLabel(hour) {
        return `${this.literals.at} ${hour || '00:00'}h`;
    }
    getMonthlyLabelExecution(dayOfMonth, hour) {
        const hourLabel = this.getHourLabel(hour);
        return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;
    }
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    getTranslateWeekDay(day) {
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday
        };
        return days[day] || '';
    }
    getWeekDaysLabel(days = []) {
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map(day => this.getTranslateWeekDay(day)).join(', ');
    }
    getWeeklyLabelExecution(daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    sortWeekDays(days = []) {
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((a, b) => {
            const currDay = a.toLowerCase();
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        });
    }
};
PoPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
__decorate([
    Input('p-literals'),
    __metadata("design:type", Object)
], PoPageJobSchedulerSummaryComponent.prototype, "literals", void 0);
__decorate([
    Input('p-parameters'),
    __metadata("design:type", Array)
], PoPageJobSchedulerSummaryComponent.prototype, "parameters", void 0);
__decorate([
    Input('p-value'),
    __metadata("design:type", Object)
], PoPageJobSchedulerSummaryComponent.prototype, "value", void 0);
PoPageJobSchedulerSummaryComponent = __decorate([
    Component({
        selector: 'po-page-job-scheduler-summary',
        template: "<div class=\"po-md-12\">\n  <po-info [p-label]=\"literals.process\" [p-orientation]=\"infoOrientation\" [p-value]=\"value.processID\"> </po-info>\n\n  <po-info [p-label]=\"literals.periodicity\" [p-orientation]=\"infoOrientation\" [p-value]=\"periodicityValue\"> </po-info>\n\n  <po-info\n    *ngIf=\"value.periodicity !== 'single'\"\n    [p-label]=\"literals.execution\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"executionValue\"\n  >\n  </po-info>\n\n  <po-info [p-label]=\"literals.recurrent\" [p-orientation]=\"infoOrientation\" [p-value]=\"recurrentValue\"> </po-info>\n\n  <po-info [p-label]=\"literals.firstExecution\" [p-orientation]=\"infoOrientation\" [p-value]=\"firstExecutionValue\">\n  </po-info>\n</div>\n\n<po-widget *ngIf=\"parameters && parameters.length\" class=\"po-pt-1 po-pb-1 po-md-12\" [p-title]=\"literals.parameters\">\n  <po-dynamic-view [p-fields]=\"parameters\" [p-value]=\"value.executionParameter\"> </po-dynamic-view>\n</po-widget>\n"
    }),
    __metadata("design:paramtypes", [DatePipe])
], PoPageJobSchedulerSummaryComponent);
export { PoPageJobSchedulerSummaryComponent };
//# sourceMappingURL=data:application/json;base64,