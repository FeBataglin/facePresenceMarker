import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { PoPageJobSchedulerInternal } from './po-page-job-scheduler-internal';
import { PoPageJobSchedulerService } from './po-page-job-scheduler.service';
import { Subscription } from 'rxjs';
/**
 * @description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
let PoPageJobSchedulerBaseComponent = class PoPageJobSchedulerBaseComponent {
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        this._subscription = new Subscription();
        /** Objeto com as propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        this.model = new PoPageJobSchedulerInternal();
    }
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    loadData(id) {
        if (!id) {
            this.model = new PoPageJobSchedulerInternal();
            return;
        }
        this._subscription.add(this.poPageJobSchedulerService.getResource(id).subscribe((response) => {
            this.model = response;
        }, () => {
            this.model = new PoPageJobSchedulerInternal();
        }));
    }
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
};
PoPageJobSchedulerBaseComponent.ctorParameters = () => [
    { type: PoPageJobSchedulerService }
];
__decorate([
    Input('p-breadcrumb'),
    __metadata("design:type", Object)
], PoPageJobSchedulerBaseComponent.prototype, "breadcrumb", void 0);
__decorate([
    Input('p-service-api'),
    __metadata("design:type", String)
], PoPageJobSchedulerBaseComponent.prototype, "serviceApi", void 0);
__decorate([
    Input('p-title'),
    __metadata("design:type", String)
], PoPageJobSchedulerBaseComponent.prototype, "title", void 0);
PoPageJobSchedulerBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [PoPageJobSchedulerService])
], PoPageJobSchedulerBaseComponent);
export { PoPageJobSchedulerBaseComponent };
//# sourceMappingURL=data:application/json;base64,