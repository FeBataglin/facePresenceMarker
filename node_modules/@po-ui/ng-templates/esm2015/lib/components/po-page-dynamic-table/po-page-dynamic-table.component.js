import { __decorate, __metadata } from "tslib";
import { ActivatedRoute, Route, Router } from '@angular/router';
import { Component, Input } from '@angular/core';
import { Subscription, EMPTY, concat, of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { InputBoolean, PoDialogConfirmOptions, PoDialogService, PoNotificationService, PoPageAction, PoTableAction, PoTableColumnSort, PoTableColumnSortType } from '@po-ui/ng-components';
import * as util from '../../utils/util';
import { PoPageDynamicDetailComponent } from '../po-page-dynamic-detail/po-page-dynamic-detail.component';
import { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
import { PoPageDynamicTableActionsService } from './po-page-dynamic-table-actions.service';
export const poPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * @docsExtends PoPageDynamicListBaseComponent
 *
 * @description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post
 *   }
 * }
 *
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ],
 *   keepFilters: true
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-table-basic" title="PO Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="PO Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
let PoPageDynamicTableComponent = class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent {
    constructor(router, activatedRoute, poDialogService, poNotification, poPageDynamicService, poPageCustomizationService, poPageDynamicTableActionsService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poDialogService = poDialogService;
        this.poNotification = poNotification;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageCustomizationService = poPageCustomizationService;
        this.poPageDynamicTableActionsService = poPageDynamicTableActionsService;
        this._actions = {};
        this._pageActions = [];
        this._tableActions = [];
        this.page = 1;
        this.params = {};
        this.subscriptions = new Subscription();
        this.hasNext = false;
        this.items = [];
        this.literals = Object.assign(Object.assign({}, poPageDynamicTableLiteralsDefault[util.poLocaleDefault]), poPageDynamicTableLiteralsDefault[util.browserLanguage()]);
        /**
         * @optional
         *
         * @description
         *
         * Mantém na modal de `Busca Avançada` os valores preenchidos do último filtro realizado pelo usuário.
         *
         * @default `false`
         */
        this.keepFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
         *
         * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
         * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
         * rápida também na lista de `disclaimers` a aplicando uma nova busca com a concatenação.
         *
         * Por exemplo, com os seguintes filtros aplicados:
         *   - filtro avançado: `{ name: 'Mike', age: '12' }`
         *   - filtro rápido: `{ search: 'paper' }`
         *
         * A requisição dos dados na API ficará com os parâmetros:
         * ```
         * page=1&pageSize=10&name=Mike&age=12&search=paper
         * ```
         *
         * @default `false`
         */
        this.concatFilters = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ações da página e da tabela.
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    get actions() {
        return this._actions;
    }
    ngOnInit() {
        this.loadDataFromAPI();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    onAdvancedSearch(filter) {
        this.subscriptions.add(this.loadData(Object.assign({ page: 1 }, filter)).subscribe());
        this.params = filter;
        if (this.keepFilters) {
            this.updateFilterValue(filter);
        }
    }
    onChangeDisclaimers(disclaimers) {
        const filter = {};
        disclaimers.forEach(disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        });
        this.onAdvancedSearch(filter);
    }
    onQuickSearch(termTypedInQuickSearch) {
        const quickSearchParam = termTypedInQuickSearch ? { search: termTypedInQuickSearch } : {};
        this.params = this.concatFilters ? Object.assign(Object.assign({}, this.params), quickSearchParam) : Object.assign({}, quickSearchParam);
        this.subscriptions.add(this.loadData(termTypedInQuickSearch ? Object.assign({ page: 1 }, this.params) : undefined).subscribe());
    }
    onSort(sortedColumn) {
        this.sortedColumn = sortedColumn;
    }
    showMore() {
        this.subscriptions.add(this.loadData(Object.assign({ page: ++this.page }, this.params)).subscribe());
    }
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    get pageActions() {
        return [...this._pageActions];
    }
    get tableActions() {
        return this._tableActions;
    }
    confirmRemove(actionRemove, actionBeforeRemove, item) {
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item, actionRemove, actionBeforeRemove)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    confirmRemoveAll(actionRemoveAll, actionBeforeRemoveAll) {
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this, actionRemoveAll, actionBeforeRemoveAll)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    formatUniqueKey(item) {
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    getOrderParam(sortedColumn = { type: undefined }) {
        const { column, type } = sortedColumn;
        if (!column) {
            return {};
        }
        if (type === PoTableColumnSortType.Descending) {
            return { order: `-${column.property}` };
        }
        return { order: `${column.property}` };
    }
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.poNotification.error(this.literals.loadDataErrorNotification);
            return EMPTY;
        }
        const orderParam = this.getOrderParam(this.sortedColumn);
        const defaultParams = { page: 1, pageSize: 10 };
        const fullParams = Object.assign(Object.assign(Object.assign({}, defaultParams), params), orderParam);
        return this.poPageDynamicService.getResources(fullParams).pipe(tap(response => {
            this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        }));
    }
    getMetadata(serviceApiFromRoute, onLoad) {
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata().pipe(tap(response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
            }), switchMap(() => this.loadOptionsOnInitialize(onLoad)));
        }
        return this.loadOptionsOnInitialize(onLoad);
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params }).catch(() => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift({
                path: route.path,
                component: route.component,
                data: { serviceApi: this.serviceApi, autoRouter: true }
            });
            this.navigateTo(route, true);
        });
    }
    openDetail(action, item) {
        const id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDetail(this.actions.beforeDetail, id, item)
            .subscribe((beforeDetailResult) => this.executeDetail(action, beforeDetailResult, id, item)));
    }
    executeDetail(action, beforeDetailResult, id, item) {
        const before = beforeDetailResult !== null && beforeDetailResult !== void 0 ? beforeDetailResult : {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const { newUrl } = before;
        if (allowAction && action) {
            if (newUrl) {
                const path = this.getPathFromNewUrl(newUrl, id);
                return this.navigateTo({ path });
            }
            if (typeof action === 'string') {
                const url = this.resolveUrl(item, action);
                this.navigateTo({ path: action, url, component: PoPageDynamicDetailComponent });
            }
            else {
                action(id, item);
            }
        }
    }
    getPathFromNewUrl(newUrl, id) {
        if (newUrl.includes(':id')) {
            return newUrl.replace(/:id/g, id);
        }
        return newUrl;
    }
    openDuplicate(actionDuplicate, item) {
        const id = this.formatUniqueKey(item);
        const duplicates = util.removeKeysProperties(this.keys, util.mapObjectByProperties(item, this.duplicates));
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDuplicate(this.actions.beforeDuplicate, id, duplicates)
            .subscribe((beforeDuplicateResult) => this.executeDuplicate(actionDuplicate, beforeDuplicateResult, duplicates)));
    }
    executeDuplicate(actionDuplicate, beforeDuplicateResult, duplicates) {
        var _a;
        const before = beforeDuplicateResult !== null && beforeDuplicateResult !== void 0 ? beforeDuplicateResult : {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const beforeDuplicateResource = before.resource;
        const newAction = (_a = before.newUrl) !== null && _a !== void 0 ? _a : actionDuplicate;
        if (allowAction && actionDuplicate) {
            if (typeof beforeDuplicateResource === 'object' && beforeDuplicateResource !== null) {
                duplicates = util.removeKeysProperties(this.keys, beforeDuplicateResource);
            }
            if (typeof newAction === 'string') {
                return this.navigateTo({ path: newAction, params: { duplicate: JSON.stringify(duplicates) } });
            }
            return newAction(duplicates);
        }
    }
    openEdit(actionEdit, item) {
        const id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeEdit(this.actions.beforeEdit, id, item)
            .pipe(switchMap((beforeEditResult) => this.executeEditAction(actionEdit, beforeEditResult, item, id)))
            .subscribe());
    }
    executeEditAction(action, beforeEditResult, item, id) {
        var _a, _b;
        const newEditAction = (_a = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.newUrl) !== null && _a !== void 0 ? _a : action;
        const allowAction = (_b = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.allowAction) !== null && _b !== void 0 ? _b : true;
        if (!allowAction) {
            return EMPTY;
        }
        if (typeof newEditAction === 'string') {
            this.openEditUrl(newEditAction, item);
        }
        else {
            const updatedItem = newEditAction(id, item);
            if (typeof updatedItem === 'object' && updatedItem !== null) {
                this.modifyUITableItem(item, util.removeKeysProperties(this.keys, updatedItem));
            }
        }
        return EMPTY;
    }
    openEditUrl(path, item) {
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
    }
    modifyUITableItem(currentItem, newItemValue) {
        const tableItem = this.items.findIndex(item => item === currentItem);
        this.items[tableItem] = Object.assign(Object.assign({}, currentItem), newItemValue);
    }
    openNew(actionNew) {
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeNew(this.actions.beforeNew)
            .subscribe((beforeNewResult) => this.executeNew(actionNew, beforeNewResult)));
    }
    executeNew(actionNew, beforeNewResult) {
        const before = beforeNewResult !== null && beforeNewResult !== void 0 ? beforeNewResult : {};
        const allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        const { newUrl } = before;
        if (allowAction && actionNew) {
            if (newUrl) {
                return this.navigateTo({ path: newUrl });
            }
            if (typeof actionNew === 'string') {
                return this.navigateTo({ path: actionNew });
            }
            return actionNew();
        }
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'po' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|po
     */
    remove(item, actionRemove, actionBeforeRemove) {
        const uniqueKey = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemove(actionBeforeRemove, uniqueKey, item)
            .pipe(switchMap(beforeRemove => {
            return this.deleteAction(item, actionRemove, beforeRemove);
        }))
            .subscribe());
    }
    deleteAction(item, actionRemove, beforeRemove) {
        const { allowAction, newUrl } = beforeRemove || {};
        const allow = allowAction !== null && allowAction !== void 0 ? allowAction : true;
        if (allow) {
            const uniqueKey = this.formatUniqueKey(item);
            const resourceToRemoveKey = this.returnResourcesKeys([item]);
            if (typeof actionRemove === 'boolean' || newUrl) {
                return this.poPageDynamicService
                    .deleteResource(uniqueKey, newUrl)
                    .pipe(map(() => this.removeFromUI(resourceToRemoveKey, this.literals.removeSuccessNotification)));
            }
            return of(actionRemove(uniqueKey, item)).pipe(tap(remove => {
                const removeItem = remove !== null && remove !== void 0 ? remove : false;
                this.removeFromUI(resourceToRemoveKey, this.literals.removeSuccessNotification, removeItem);
            }));
        }
        return of({});
    }
    removeFromUI(items, message, remove = true) {
        if (remove === true && (items === null || items === void 0 ? void 0 : items.length)) {
            this.removeLocalItems(items);
            this.poNotification.success(message);
        }
    }
    removeAll(actionRemoveAll, actionBeforeRemoveAll) {
        const originalResourcesKeys = this.getSelectedItemsKeysToRemove();
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemoveAll(actionBeforeRemoveAll, originalResourcesKeys)
            .pipe(switchMap(beforeRemove => {
            return this.deleteAllAction(actionRemoveAll, beforeRemove, originalResourcesKeys);
        }))
            .subscribe());
    }
    getSelectedItemsKeysToRemove() {
        const resources = this.items.filter(item => item.$selected);
        if (resources.length === 0) {
            return;
        }
        return this.returnResourcesKeys(resources);
    }
    returnResourcesKeys(resources) {
        return util.mapArrayByProperties(resources, this.keys);
    }
    deleteAllAction(actionRemoveAll, beforeRemoveAll, originalResources) {
        const { allowAction, newUrl, resources } = beforeRemoveAll !== null && beforeRemoveAll !== void 0 ? beforeRemoveAll : {};
        const allow = allowAction !== null && allowAction !== void 0 ? allowAction : true;
        const resourcestoDelete = resources !== null && resources !== void 0 ? resources : originalResources;
        if (allow && Array.isArray(resourcestoDelete)) {
            if (typeof actionRemoveAll === 'boolean' || newUrl) {
                return this.poPageDynamicService.deleteResources(resourcestoDelete, newUrl).pipe(tap(() => {
                    this.removeFromUI(resourcestoDelete, this.literals.removeAllSuccessNotification);
                }));
            }
            return of(actionRemoveAll(resourcestoDelete)).pipe(tap(removeItems => this.removeFromUI(removeItems, this.literals.removeSuccessNotification)));
        }
        return of({});
    }
    removeLocalItems(itemsKeysToRemove = []) {
        if (itemsKeysToRemove.length) {
            this.items = this.items.filter(item => {
                const itemKey = this.formatUniqueKey(item);
                return !itemsKeysToRemove.find(itemKeyToRemove => util.valuesFromObject(itemKeyToRemove).join('|') === itemKey);
            });
        }
    }
    resolveUrl(item, path) {
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    setPageActions(actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new }
            ];
        }
    }
    setRemoveAllAction() {
        const action = this._actions;
        if (this.showRemove(action.removeAll)) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll,
                action: this.confirmRemoveAll.bind(this, action.removeAll, action.beforeRemoveAll),
                disabled: this.disableRemoveAll.bind(this)
            });
        }
    }
    disableRemoveAll() {
        return !this.getSelectedItemsKeysToRemove();
    }
    setTableActions(actions) {
        if (actions) {
            const visibleRemove = this.showRemove(actions.remove);
            this._tableActions = [
                {
                    action: this.openDetail.bind(this, actions.detail),
                    label: this.literals.tableActionView,
                    visible: !!this._actions.detail
                },
                {
                    action: this.openEdit.bind(this, actions.edit),
                    label: this.literals.tableActionEdit,
                    visible: !!this._actions.edit
                },
                {
                    action: this.openDuplicate.bind(this, actions.duplicate),
                    label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                {
                    action: this.confirmRemove.bind(this, actions.remove, actions.beforeRemove),
                    label: this.literals.tableActionDelete,
                    separator: true,
                    type: 'danger',
                    visible: visibleRemove
                }
            ];
        }
    }
    loadDataFromAPI() {
        const { serviceApi: serviceApiFromRoute, serviceMetadataApi, serviceLoadApi } = this.activatedRoute.snapshot.data;
        const onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        const metadata$ = this.getMetadata(serviceApiFromRoute, onLoad);
        const data$ = this.loadData();
        const initialFilters = this.getInitialValuesFromFilter();
        if (Object.keys(initialFilters).length) {
            this.subscriptions.add(metadata$.subscribe());
        }
        else {
            this.subscriptions.add(concat(metadata$, data$).subscribe());
        }
    }
    getInitialValuesFromFilter() {
        const initialFilters = this.filters.reduce((result, item) => Object.assign(result, { [item.property]: item.initValue }), {});
        Object.keys(initialFilters).forEach(key => {
            if (!initialFilters[key]) {
                delete initialFilters[key];
            }
        });
        return initialFilters;
    }
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
        }
        return EMPTY;
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title,
            keepFilters: this.keepFilters,
            concatFilters: this.concatFilters
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                },
                {
                    nameProp: 'keepFilters'
                },
                {
                    nameProp: 'concatFilters'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
    showRemove(actionRemove) {
        const action = actionRemove !== null && actionRemove !== void 0 ? actionRemove : false;
        if (typeof action === 'boolean') {
            return action;
        }
        return true;
    }
    updateFilterValue(filter) {
        return this.fields.map(item => {
            if (filter.hasOwnProperty(item.property)) {
                item.initValue = filter[item.property];
            }
        });
    }
};
PoPageDynamicTableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoDialogService },
    { type: PoNotificationService },
    { type: PoPageDynamicService },
    { type: PoPageCustomizationService },
    { type: PoPageDynamicTableActionsService }
];
__decorate([
    Input('p-load'),
    __metadata("design:type", Object)
], PoPageDynamicTableComponent.prototype, "onLoad", void 0);
__decorate([
    Input('p-actions'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoPageDynamicTableComponent.prototype, "actions", null);
__decorate([
    InputBoolean(),
    Input('p-keep-filters'),
    __metadata("design:type", Boolean)
], PoPageDynamicTableComponent.prototype, "keepFilters", void 0);
__decorate([
    InputBoolean(),
    Input('p-concat-filters'),
    __metadata("design:type", Boolean)
], PoPageDynamicTableComponent.prototype, "concatFilters", void 0);
PoPageDynamicTableComponent = __decorate([
    Component({
        selector: 'po-page-dynamic-table',
        template: "<po-page-dynamic-search\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-filters]=\"filters\"\n  [p-keep-filters]=\"keepFilters\"\n  [p-concat-filters]=\"concatFilters\"\n  [p-title]=\"title\"\n  (p-advanced-search)=\"onAdvancedSearch($event)\"\n  (p-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (p-quick-search)=\"onQuickSearch($event)\"\n>\n  <po-table\n    p-sort=\"true\"\n    [p-actions]=\"tableActions\"\n    [p-checkbox]=\"hasActionRemoveAll\"\n    [p-columns]=\"columns\"\n    [p-items]=\"items\"\n    [p-show-more-disabled]=\"!hasNext\"\n    (p-show-more)=\"showMore()\"\n    (p-sort-by)=\"onSort($event)\"\n  >\n  </po-table>\n</po-page-dynamic-search>\n",
        providers: [PoPageDynamicService]
    }),
    __metadata("design:paramtypes", [Router,
        ActivatedRoute,
        PoDialogService,
        PoNotificationService,
        PoPageDynamicService,
        PoPageCustomizationService,
        PoPageDynamicTableActionsService])
], PoPageDynamicTableComponent);
export { PoPageDynamicTableComponent };
//# sourceMappingURL=data:application/json;base64,