import { __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
let PoPageDynamicListBaseComponent = class PoPageDynamicListBaseComponent {
    constructor() {
        this._autoRouter = false;
        this._columns = [];
        this._duplicates = [];
        this._fields = [];
        this._filters = [];
        this._keys = [];
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
    }
    /**
     * @optional
     *
     * @description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
     *
     * As rotas criadas serão baseadas na propriedade `p-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * @default false
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na tabela e busca avançada.
     *
     *
     * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
        this.setFieldsProperties(this.fields);
    }
    get fields() {
        return this._fields;
    }
    set columns(value) {
        this._columns = [...value];
    }
    get columns() {
        return this._columns;
    }
    get duplicates() {
        return [...this._duplicates];
    }
    get filters() {
        return [...this._filters];
    }
    get keys() {
        return [...this._keys];
    }
    setFieldsProperties(fields) {
        this._filters = fields.filter(field => field.filter === true);
        this.columns = fields.filter(field => field.visible === undefined || field.visible === true);
        this._keys = fields.filter(field => field.key === true).map(field => field.property);
        this._duplicates = fields.filter(field => field.duplicate === true).map(field => field.property);
    }
};
__decorate([
    Input('p-auto-router'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PoPageDynamicListBaseComponent.prototype, "autoRouter", null);
__decorate([
    Input('p-breadcrumb'),
    __metadata("design:type", Object)
], PoPageDynamicListBaseComponent.prototype, "breadcrumb", void 0);
__decorate([
    Input('p-fields'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoPageDynamicListBaseComponent.prototype, "fields", null);
__decorate([
    Input('p-service-api'),
    __metadata("design:type", String)
], PoPageDynamicListBaseComponent.prototype, "serviceApi", void 0);
__decorate([
    Input('p-title'),
    __metadata("design:type", String)
], PoPageDynamicListBaseComponent.prototype, "title", void 0);
PoPageDynamicListBaseComponent = __decorate([
    Directive()
], PoPageDynamicListBaseComponent);
export { PoPageDynamicListBaseComponent };
//# sourceMappingURL=data:application/json;base64,