import { __decorate, __metadata } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { isExternalLink } from '../../utils/util';
import { PoI18nPipe, PoModalAction, PoModalComponent, PoRadioGroupOption } from '@po-ui/ng-components';
import { PoModalPasswordRecoveryBaseComponent } from './po-modal-password-recovery-base.component';
import { PoModalPasswordRecoveryModalContent } from './enums/po-modal-password-recovery-modal-content.enum';
import { PoModalPasswordRecoveryService } from './po-modal-password-recovery.service';
import { PoModalPasswordRecoveryType } from './enums/po-modal-password-recovery-type.enum';
/**
 * @docsExtends PoModalPasswordRecoveryBaseComponent
 *
 * @example
 *
 * <example name="po-modal-password-recovery-basic" title="PO Modal Password Recovery Basic">
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-labs" title="PO Modal Password Recovery Labs">
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-request" title="PO Modal Password Recovery Request">
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.ts"> </file>
 * </example>
 */
let PoModalPasswordRecoveryComponent = class PoModalPasswordRecoveryComponent extends PoModalPasswordRecoveryBaseComponent {
    constructor(router, poI18nPipe, poModalPasswordRecoveryService) {
        super();
        this.router = router;
        this.poI18nPipe = poI18nPipe;
        this.poModalPasswordRecoveryService = poModalPasswordRecoveryService;
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.codeMask = '9 9 9 9 9 9';
        this.emailModal = true;
        this.emailModalPhrases = { firstPhrase: null, secondPhrase: null };
        this.endpoint = '.';
        this.invalidCode = false;
        this.invalidEmail = false;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.submittedCodeValue = {};
        this.submittedContactValue = {};
        this.primaryAction = { label: undefined, action: () => { } };
        this.secondaryAction = { label: undefined, action: () => { } };
        this.typeFormOptions = [
            { label: 'e-mail', value: PoModalPasswordRecoveryType.Email },
            { label: 'SMS', value: PoModalPasswordRecoveryType.SMS }
        ];
    }
    ngOnDestroy() {
        if (this.passwordRecoverySubscription) {
            this.passwordRecoverySubscription.unsubscribe();
        }
        if (this.smsCodeSubscription) {
            this.smsCodeSubscription.unsubscribe();
        }
    }
    completed() {
        this.cancelAction();
    }
    formModelChangesCheck(form) {
        const invalidForm = form.invalid;
        this.invalidEmail = invalidForm && form.dirty;
        this.primaryAction.disabled = invalidForm;
        if (this.modalType === PoModalPasswordRecoveryModalContent.SMSCode) {
            const codeError = this.codeError !== undefined && this.codeError !== '';
            this.showCustomCodeError = codeError && form.pristine;
        }
    }
    getInputType(type) {
        this.type = type;
        this.pipeModalPhrases();
        setTimeout(() => {
            this.control = this.emailForm.controls[type];
            this.formModelChangesCheck(this.emailForm);
            this.resetFormFields(this.control);
        });
    }
    open() {
        const control = this.checkFormType(this.type);
        this.control = this.emailForm.controls[control];
        this.setEmailModalPhrasesAndActions();
        this.formModelChangesCheck(this.emailForm);
        this.recoveryModalElement.open();
    }
    openConfirmation() {
        this.modalTitle = this.literals.emailSentTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.Confirmation;
        this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);
    }
    openSmsCode() {
        this.modalTitle = this.literals.typeCodeTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.SMSCode;
        this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);
        setTimeout(() => {
            this.control = this.smsCodeForm.controls['sms'];
            this.formModelChangesCheck(this.smsCodeForm);
        });
    }
    resendSmsCode() {
        this.incrementRetryAttempts();
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    assignSmsResponse(responseObj) {
        this.smsBodyResponse = Object.assign({}, { hash: responseObj.hash });
        if (responseObj.urlValidationCode) {
            this.smsBodyResponse = Object.assign(this.smsBodyResponse, { urlValidationCode: responseObj.urlValidationCode });
        }
    }
    cancelAction() {
        this.resetFormFields(this.control);
        this.submittedContactValue = {};
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.type = this.modalPasswordRecoveryTypeAll ? PoModalPasswordRecoveryType.All : this.type;
        this.recoveryModalElement.close();
    }
    checkFormType(type) {
        return type !== PoModalPasswordRecoveryType.All ? type : PoModalPasswordRecoveryType.Email;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    getEmitValue(type) {
        return type === PoModalPasswordRecoveryType.SMS ? this.phone : this.email;
    }
    incrementRetryAttempts() {
        this.submittedContactValue.retry = this.submittedContactValue.retry + 1 || 1;
    }
    openExternalLink(url, queryParam) {
        window.open(`${url}?token=${queryParam}`, '_self');
    }
    openInternalLink(url, endpoint, queryParam) {
        this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });
    }
    pipeModalPhrases() {
        if (this.type === PoModalPasswordRecoveryType.SMS) {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);
        }
        else {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.email);
        }
    }
    redirectToChangePassword(recoveryToken) {
        const urlChangePassword = recoveryToken.urlChangePassword;
        if (urlChangePassword) {
            isExternalLink(urlChangePassword)
                ? this.openExternalLink(urlChangePassword, recoveryToken.token)
                : this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);
        }
        else {
            const changePasswordEndpoint = 'changePassword';
            this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);
        }
    }
    resetFormFields(control) {
        this.formReset(control);
        this.email = undefined;
        this.phone = undefined;
        this.smsCode = undefined;
    }
    setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {
        this.primaryAction.action = () => primaryAction.call(this);
        this.primaryAction.label = primarylabel;
        this.secondaryAction.action = () => secondaryAction.call(this);
        this.secondaryAction.label = secondaryLabel;
        this.primaryAction.disabled = disabled;
    }
    setEmailModalPhrasesAndActions() {
        this.modalTitle = this.literals.forgotPasswordTitle;
        this.pipeModalPhrases();
        this.modalPasswordRecoveryTypeAll = this.type === PoModalPasswordRecoveryType.All;
        this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);
    }
    setRequestEndpoint(urlValidationCode) {
        const endpoint = urlValidationCode || 'validation';
        return `${this.urlRecovery}/${endpoint}`;
    }
    setPipeArguments(literalAttr, arg) {
        return this.poI18nPipe.transform(literalAttr, arg);
    }
    submitAction() {
        this.modalType === PoModalPasswordRecoveryModalContent.Confirmation
            ? this.incrementRetryAttempts()
            : this.formReset(this.control);
        this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    submitActionRequest(data, modalType) {
        const params = modalType === PoModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;
        this.passwordRecoverySubscription = this.poModalPasswordRecoveryService
            .post(this.urlRecovery, data, params)
            .subscribe(response => {
            if ((modalType === PoModalPasswordRecoveryType.Email || modalType === PoModalPasswordRecoveryType.All) &&
                response.status === 204) {
                this.openConfirmation();
            }
            else if (modalType === PoModalPasswordRecoveryType.SMS && response.status === 200) {
                this.assignSmsResponse(response.body);
                this.openSmsCode();
            }
        });
    }
    submitSmsCodeAction() {
        this.submittedCodeValue.code = this.smsCode;
        if (this.urlRecovery) {
            this.submittedCodeValue = Object.assign(this.submittedCodeValue, { hash: this.smsBodyResponse.hash });
            this.submitSmsCodeRequest(this.submittedCodeValue);
        }
        else {
            this.codeSubmit.emit(this.submittedCodeValue);
        }
        this.resetFormFields(this.control);
    }
    submitSmsCodeRequest(data) {
        this.smsCodeSubscription = this.poModalPasswordRecoveryService
            .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)
            .subscribe(response => {
            const successStatus = response.status === 200;
            if (successStatus) {
                this.completed();
                this.redirectToChangePassword(response.body);
            }
        }, error => {
            this.codeError = error.error.message;
            this.openSmsCode();
        });
    }
};
PoModalPasswordRecoveryComponent.ctorParameters = () => [
    { type: Router },
    { type: PoI18nPipe },
    { type: PoModalPasswordRecoveryService }
];
__decorate([
    ViewChild('emailForm'),
    __metadata("design:type", NgForm)
], PoModalPasswordRecoveryComponent.prototype, "emailForm", void 0);
__decorate([
    ViewChild('recoveryModal', { static: true }),
    __metadata("design:type", PoModalComponent)
], PoModalPasswordRecoveryComponent.prototype, "recoveryModalElement", void 0);
__decorate([
    ViewChild('smsCodeForm'),
    __metadata("design:type", NgForm)
], PoModalPasswordRecoveryComponent.prototype, "smsCodeForm", void 0);
PoModalPasswordRecoveryComponent = __decorate([
    Component({
        selector: 'po-modal-password-recovery',
        template: "<po-modal\n  #recoveryModal\n  p-hide-close\n  p-size=\"auto\"\n  [ngSwitch]=\"modalType\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"modalTitle\"\n>\n  <div class=\"po-modal-password-recovery-wrapper\">\n    <div *ngSwitchCase=\"'email'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">\n        {{ emailModalPhrases.firstPhrase }}\n      </div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #emailForm=\"ngForm\">\n          <div *ngIf=\"modalPasswordRecoveryTypeAll\">\n            <po-radio-group\n              name=\"type\"\n              [(ngModel)]=\"chosenTypeFormOption\"\n              [p-options]=\"typeFormOptions\"\n              (p-change)=\"getInputType($event)\"\n            >\n            </po-radio-group>\n          </div>\n\n          <div class=\"po-mt-1\">\n            <po-email\n              *ngIf=\"type === 'email' || type === 'all'\"\n              name=\"email\"\n              [(ngModel)]=\"email\"\n              p-required\n              [p-label]=\"literals.insertEmail\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\"\n            >\n            </po-email>\n\n            <po-input\n              *ngIf=\"type === 'sms'\"\n              name=\"sms\"\n              [(ngModel)]=\"phone\"\n              p-icon=\"po-icon-telephone\"\n              p-required\n              [p-label]=\"literals.insertPhone\"\n              [p-mask]=\"phoneMask\"\n              [p-maxlength]=\"maxLength\"\n              [p-minlength]=\"minLength\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\"\n            >\n            </po-input>\n          </div>\n\n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message\n              *ngIf=\"invalidEmail && control.dirty\"\n              [p-text]=\"type === 'sms' ? literals.phoneErrorMessagePhrase : literals.emailErrorMessagePhrase\"\n            >\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">\n        {{ emailModalPhrases.secondPhrase }}\n        <span *ngIf=\"contactEmail\">\n          {{ literals.prepositionIn }}\n          <a class=\"po-modal-password-recovery-link\" href=\"mailto:{{ contactEmail }}\" target=\"_self\">\n            {{ contactEmail }}\n          </a>\n        </span>\n        {{ endpoint }}\n      </div>\n    </div>\n\n    <div #smsCodeModal *ngSwitchCase=\"'smsCode'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">{{ literals.sentSmsCodePhrase }}</div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #smsCodeForm=\"ngForm\">\n          <po-input\n            name=\"sms\"\n            [(ngModel)]=\"smsCode\"\n            p-maxlength=\"11\"\n            p-minlength=\"11\"\n            p-required\n            [p-label]=\"literals.insertCode\"\n            [p-mask]=\"codeMask\"\n            (p-change-model)=\"formModelChangesCheck(smsCodeForm)\"\n          >\n          </po-input>\n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message\n              *ngIf=\"invalidEmail\"\n              [p-text]=\"smsCodeErrorMessage || this.literals.smsCodeErrorMessagePhrase\"\n            >\n            </po-modal-password-recovery-error-message>\n            <po-modal-password-recovery-error-message *ngIf=\"showCustomCodeError\" [p-text]=\"codeError\">\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">\n        {{ literals.sendAgainPhrase }}\n        <span class=\"po-modal-password-recovery-link\" (click)=\"resendSmsCode()\">{{ literals.sendAgain }}</span>\n      </div>\n    </div>\n\n    <div #confirmationModal *ngSwitchCase=\"'confirmation'\" class=\"po-modal-password-recovery-content po-row\">\n      <img class=\"po-modal-password-recovery-user-image po-mb-2\" src=\"./assets/images/email-sent.svg\" />\n      <div class=\"po-modal-password-recovery-text\">\n        {{ literals.emailSentConfirmationPhrase }}\n      </div>\n    </div>\n  </div>\n</po-modal>\n"
    }),
    __metadata("design:paramtypes", [Router,
        PoI18nPipe,
        PoModalPasswordRecoveryService])
], PoModalPasswordRecoveryComponent);
export { PoModalPasswordRecoveryComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5L3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFtQixNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHdkcsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDbkcsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDNUcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFM0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFNSCxJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFpQyxTQUFRLG9DQUFvQztJQW1DeEYsWUFDVSxNQUFjLEVBQ2QsVUFBc0IsRUFDdEIsOEJBQThEO1FBRXRFLEtBQUssRUFBRSxDQUFDO1FBSkEsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFnQztRQXJDeEUseUJBQW9CLEdBQVcs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LENBQ1IsUUFBUSxDQUFDLEVBQUU7WUFDVCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztZQUM5QyxJQUFJLGFBQWEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNqQixJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlDO1FBQ0gsQ0FBQyxFQUNELEtBQUssQ0FBQyxFQUFFO1lBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUNGLENBQUM7SUFDTixDQUFDO0NBQ0YsQ0FBQTs7WUE3UG1CLE1BQU07WUFDRixVQUFVO1lBQ1UsOEJBQThCOztBQWxCaEQ7SUFBdkIsU0FBUyxDQUFDLFdBQVcsQ0FBQzs4QkFBWSxNQUFNO21FQUFDO0FBRUk7SUFBN0MsU0FBUyxDQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBdUIsZ0JBQWdCOzhFQUFDO0FBRTNEO0lBQXpCLFNBQVMsQ0FBQyxhQUFhLENBQUM7OEJBQWMsTUFBTTtxRUFBQztBQXhCbkMsZ0NBQWdDO0lBSjVDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsZzNJQUEwRDtLQUMzRCxDQUFDO3FDQXFDa0IsTUFBTTtRQUNGLFVBQVU7UUFDVSw4QkFBOEI7R0F0QzdELGdDQUFnQyxDQWlTNUM7U0FqU1ksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGlzRXh0ZXJuYWxMaW5rIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0kxOG5QaXBlLCBQb01vZGFsQWN0aW9uLCBQb01vZGFsQ29tcG9uZW50LCBQb1JhZGlvR3JvdXBPcHRpb24gfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5IH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeUJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5TW9kYWxDb250ZW50IH0gZnJvbSAnLi9lbnVtcy9wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1tb2RhbC1jb250ZW50LmVudW0nO1xuaW1wb3J0IHsgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlTZXJ2aWNlIH0gZnJvbSAnLi9wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZSB9IGZyb20gJy4vZW51bXMvcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktdHlwZS5lbnVtJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWNcIiB0aXRsZT1cIlBPIE1vZGFsIFBhc3N3b3JkIFJlY292ZXJ5IEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1iYXNpYy9zYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWMvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnNcIiB0aXRsZT1cIlBPIE1vZGFsIFBhc3N3b3JkIFJlY292ZXJ5IExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnMvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktbGFicy9zYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0XCIgdGl0bGU9XCJQTyBNb2RhbCBQYXNzd29yZCBSZWNvdmVyeSBSZXF1ZXN0XCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0L3NhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LXJlcXVlc3Qvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LXJlcXVlc3QuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlDb21wb25lbnQgZXh0ZW5kcyBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBjaG9zZW5UeXBlRm9ybU9wdGlvbjogc3RyaW5nID0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkVtYWlsO1xuICBjb2RlTWFzazogc3RyaW5nID0gJzkgOSA5IDkgOSA5JztcbiAgY29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICBlbWFpbE1vZGFsOiBib29sZWFuID0gdHJ1ZTtcbiAgZW1haWxNb2RhbFBocmFzZXMgPSB7IGZpcnN0UGhyYXNlOiBudWxsIGFzIHN0cmluZywgc2Vjb25kUGhyYXNlOiBudWxsIGFzIHN0cmluZyB9O1xuICBlbmRwb2ludDogc3RyaW5nID0gJy4nO1xuICBpbnZhbGlkQ29kZTogYm9vbGVhbiA9IGZhbHNlO1xuICBpbnZhbGlkRW1haWw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgbW9kYWxUaXRsZTogc3RyaW5nO1xuICBtb2RhbFR5cGU6IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5TW9kYWxDb250ZW50ID0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlNb2RhbENvbnRlbnQuRW1haWw7XG4gIHNob3dDdXN0b21Db2RlRXJyb3I6IGJvb2xlYW47XG4gIHNtc0NvZGVFcnJvck1lc3NhZ2VQaHJhc2U6IHN0cmluZztcbiAgc3VibWl0dGVkQ29kZVZhbHVlID0ge30gYXMgUG9Nb2RhbFBhc3N3b3JkUmVjb3Zlcnk7XG4gIHN1Ym1pdHRlZENvbnRhY3RWYWx1ZSA9IHt9IGFzIFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5O1xuXG4gIHByaXZhdGUgcGFzc3dvcmRSZWNvdmVyeVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHNtc0JvZHlSZXNwb25zZTtcbiAgcHJpdmF0ZSBzbXNDb2RlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQFZpZXdDaGlsZCgnZW1haWxGb3JtJykgZW1haWxGb3JtOiBOZ0Zvcm07XG5cbiAgQFZpZXdDaGlsZCgncmVjb3ZlcnlNb2RhbCcsIHsgc3RhdGljOiB0cnVlIH0pIHJlY292ZXJ5TW9kYWxFbGVtZW50OiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ3Ntc0NvZGVGb3JtJykgc21zQ29kZUZvcm06IE5nRm9ybTtcblxuICBwcmltYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uID0geyBsYWJlbDogdW5kZWZpbmVkLCBhY3Rpb246ICgpID0+IHt9IH07XG5cbiAgc2Vjb25kYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uID0geyBsYWJlbDogdW5kZWZpbmVkLCBhY3Rpb246ICgpID0+IHt9IH07XG5cbiAgdHlwZUZvcm1PcHRpb25zOiBBcnJheTxQb1JhZGlvR3JvdXBPcHRpb24+ID0gW1xuICAgIHsgbGFiZWw6ICdlLW1haWwnLCB2YWx1ZTogUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkVtYWlsIH0sXG4gICAgeyBsYWJlbDogJ1NNUycsIHZhbHVlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuU01TIH1cbiAgXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgcG9JMThuUGlwZTogUG9JMThuUGlwZSxcbiAgICBwcml2YXRlIHBvTW9kYWxQYXNzd29yZFJlY292ZXJ5U2VydmljZTogUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wYXNzd29yZFJlY292ZXJ5U3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkUmVjb3ZlcnlTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zbXNDb2RlU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnNtc0NvZGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBjb21wbGV0ZWQoKSB7XG4gICAgdGhpcy5jYW5jZWxBY3Rpb24oKTtcbiAgfVxuXG4gIGZvcm1Nb2RlbENoYW5nZXNDaGVjayhmb3JtOiBOZ0Zvcm0pIHtcbiAgICBjb25zdCBpbnZhbGlkRm9ybSA9IGZvcm0uaW52YWxpZDtcbiAgICB0aGlzLmludmFsaWRFbWFpbCA9IGludmFsaWRGb3JtICYmIGZvcm0uZGlydHk7XG4gICAgdGhpcy5wcmltYXJ5QWN0aW9uLmRpc2FibGVkID0gaW52YWxpZEZvcm07XG5cbiAgICBpZiAodGhpcy5tb2RhbFR5cGUgPT09IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5TW9kYWxDb250ZW50LlNNU0NvZGUpIHtcbiAgICAgIGNvbnN0IGNvZGVFcnJvcjogYm9vbGVhbiA9IHRoaXMuY29kZUVycm9yICE9PSB1bmRlZmluZWQgJiYgdGhpcy5jb2RlRXJyb3IgIT09ICcnO1xuICAgICAgdGhpcy5zaG93Q3VzdG9tQ29kZUVycm9yID0gY29kZUVycm9yICYmIGZvcm0ucHJpc3RpbmU7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5wdXRUeXBlKHR5cGUpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMucGlwZU1vZGFsUGhyYXNlcygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9sID0gdGhpcy5lbWFpbEZvcm0uY29udHJvbHNbdHlwZV07XG4gICAgICB0aGlzLmZvcm1Nb2RlbENoYW5nZXNDaGVjayh0aGlzLmVtYWlsRm9ybSk7XG4gICAgICB0aGlzLnJlc2V0Rm9ybUZpZWxkcyh0aGlzLmNvbnRyb2wpO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICBjb25zdCBjb250cm9sID0gdGhpcy5jaGVja0Zvcm1UeXBlKHRoaXMudHlwZSk7XG4gICAgdGhpcy5jb250cm9sID0gdGhpcy5lbWFpbEZvcm0uY29udHJvbHNbY29udHJvbF07XG4gICAgdGhpcy5zZXRFbWFpbE1vZGFsUGhyYXNlc0FuZEFjdGlvbnMoKTtcbiAgICB0aGlzLmZvcm1Nb2RlbENoYW5nZXNDaGVjayh0aGlzLmVtYWlsRm9ybSk7XG4gICAgdGhpcy5yZWNvdmVyeU1vZGFsRWxlbWVudC5vcGVuKCk7XG4gIH1cblxuICBvcGVuQ29uZmlybWF0aW9uKCkge1xuICAgIHRoaXMubW9kYWxUaXRsZSA9IHRoaXMubGl0ZXJhbHMuZW1haWxTZW50VGl0bGU7XG4gICAgdGhpcy5tb2RhbFR5cGUgPSBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeU1vZGFsQ29udGVudC5Db25maXJtYXRpb247XG4gICAgdGhpcy5zZXRBY3Rpb25zKFxuICAgICAgdGhpcy5jYW5jZWxBY3Rpb24sXG4gICAgICB0aGlzLmxpdGVyYWxzLmNsb3NlQnV0dG9uLFxuICAgICAgdGhpcy5zdWJtaXRBY3Rpb24sXG4gICAgICB0aGlzLmxpdGVyYWxzLnJlc2VuZEVtYWlsQnV0dG9uLFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9XG5cbiAgb3BlblNtc0NvZGUoKSB7XG4gICAgdGhpcy5tb2RhbFRpdGxlID0gdGhpcy5saXRlcmFscy50eXBlQ29kZVRpdGxlO1xuICAgIHRoaXMubW9kYWxUeXBlID0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlNb2RhbENvbnRlbnQuU01TQ29kZTtcbiAgICB0aGlzLnNldEFjdGlvbnMoXG4gICAgICB0aGlzLnN1Ym1pdFNtc0NvZGVBY3Rpb24sXG4gICAgICB0aGlzLmxpdGVyYWxzLmNvbnRpbnVlQnV0dG9uLFxuICAgICAgdGhpcy5jYW5jZWxBY3Rpb24sXG4gICAgICB0aGlzLmxpdGVyYWxzLmNhbmNlbEJ1dHRvbixcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLnNtc0NvZGVGb3JtLmNvbnRyb2xzWydzbXMnXTtcbiAgICAgIHRoaXMuZm9ybU1vZGVsQ2hhbmdlc0NoZWNrKHRoaXMuc21zQ29kZUZvcm0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzZW5kU21zQ29kZSgpIHtcbiAgICB0aGlzLmluY3JlbWVudFJldHJ5QXR0ZW1wdHMoKTtcbiAgICBpZiAodGhpcy51cmxSZWNvdmVyeSkge1xuICAgICAgdGhpcy5zdWJtaXRBY3Rpb25SZXF1ZXN0KHRoaXMuc3VibWl0dGVkQ29udGFjdFZhbHVlLCB0aGlzLnR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1Ym1pdC5lbWl0KHRoaXMuc3VibWl0dGVkQ29udGFjdFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzc2lnblNtc1Jlc3BvbnNlKHJlc3BvbnNlT2JqKSB7XG4gICAgdGhpcy5zbXNCb2R5UmVzcG9uc2UgPSBPYmplY3QuYXNzaWduKHt9LCB7IGhhc2g6IHJlc3BvbnNlT2JqLmhhc2ggfSk7XG4gICAgaWYgKHJlc3BvbnNlT2JqLnVybFZhbGlkYXRpb25Db2RlKSB7XG4gICAgICB0aGlzLnNtc0JvZHlSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24odGhpcy5zbXNCb2R5UmVzcG9uc2UsIHsgdXJsVmFsaWRhdGlvbkNvZGU6IHJlc3BvbnNlT2JqLnVybFZhbGlkYXRpb25Db2RlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FuY2VsQWN0aW9uKCkge1xuICAgIHRoaXMucmVzZXRGb3JtRmllbGRzKHRoaXMuY29udHJvbCk7XG4gICAgdGhpcy5zdWJtaXR0ZWRDb250YWN0VmFsdWUgPSB7fTtcblxuICAgIHRoaXMuY2hvc2VuVHlwZUZvcm1PcHRpb24gPSBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuRW1haWw7XG4gICAgdGhpcy5tb2RhbFR5cGUgPSBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeU1vZGFsQ29udGVudC5FbWFpbDtcbiAgICB0aGlzLnR5cGUgPSB0aGlzLm1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGVBbGwgPyBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuQWxsIDogdGhpcy50eXBlO1xuICAgIHRoaXMucmVjb3ZlcnlNb2RhbEVsZW1lbnQuY2xvc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tGb3JtVHlwZSh0eXBlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSAhPT0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkFsbCA/IHR5cGUgOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuRW1haWw7XG4gIH1cblxuICBwcml2YXRlIGZvcm1SZXNldChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcbiAgICBjb250cm9sLm1hcmtBc1ByaXN0aW5lKCk7XG4gICAgY29udHJvbC5tYXJrQXNVbnRvdWNoZWQoKTtcbiAgICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RW1pdFZhbHVlKHR5cGU6IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuU01TID8gdGhpcy5waG9uZSA6IHRoaXMuZW1haWw7XG4gIH1cblxuICBwcml2YXRlIGluY3JlbWVudFJldHJ5QXR0ZW1wdHMoKSB7XG4gICAgdGhpcy5zdWJtaXR0ZWRDb250YWN0VmFsdWUucmV0cnkgPSB0aGlzLnN1Ym1pdHRlZENvbnRhY3RWYWx1ZS5yZXRyeSArIDEgfHwgMTtcbiAgfVxuXG4gIHByaXZhdGUgb3BlbkV4dGVybmFsTGluayh1cmwsIHF1ZXJ5UGFyYW0pIHtcbiAgICB3aW5kb3cub3BlbihgJHt1cmx9P3Rva2VuPSR7cXVlcnlQYXJhbX1gLCAnX3NlbGYnKTtcbiAgfVxuXG4gIHByaXZhdGUgb3BlbkludGVybmFsTGluayh1cmwsIGVuZHBvaW50LCBxdWVyeVBhcmFtKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2Ake3VybH0vJHtlbmRwb2ludH1gXSwgeyBxdWVyeVBhcmFtczogeyB0b2tlbjogcXVlcnlQYXJhbSB9IH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBwaXBlTW9kYWxQaHJhc2VzKCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZS5TTVMpIHtcbiAgICAgIHRoaXMuZW1haWxNb2RhbFBocmFzZXMuZmlyc3RQaHJhc2UgPSB0aGlzLnNldFBpcGVBcmd1bWVudHMoXG4gICAgICAgIHRoaXMubGl0ZXJhbHMucmVjb3ZlcnlQYXNzd29yZFBocmFzZSxcbiAgICAgICAgdGhpcy5saXRlcmFscy5zbXNcbiAgICAgICk7XG4gICAgICB0aGlzLmVtYWlsTW9kYWxQaHJhc2VzLnNlY29uZFBocmFzZSA9IHRoaXMuc2V0UGlwZUFyZ3VtZW50cyhcbiAgICAgICAgdGhpcy5saXRlcmFscy5zdXBwb3J0Q29udGFjdCxcbiAgICAgICAgdGhpcy5saXRlcmFscy50ZWxlcGhvbmVcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1haWxNb2RhbFBocmFzZXMuZmlyc3RQaHJhc2UgPSB0aGlzLnNldFBpcGVBcmd1bWVudHMoXG4gICAgICAgIHRoaXMubGl0ZXJhbHMucmVjb3ZlcnlQYXNzd29yZFBocmFzZSxcbiAgICAgICAgdGhpcy5saXRlcmFscy5lbWFpbFxuICAgICAgKTtcbiAgICAgIHRoaXMuZW1haWxNb2RhbFBocmFzZXMuc2Vjb25kUGhyYXNlID0gdGhpcy5zZXRQaXBlQXJndW1lbnRzKHRoaXMubGl0ZXJhbHMuc3VwcG9ydENvbnRhY3QsIHRoaXMubGl0ZXJhbHMuZW1haWwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVkaXJlY3RUb0NoYW5nZVBhc3N3b3JkKHJlY292ZXJ5VG9rZW46IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5KSB7XG4gICAgY29uc3QgdXJsQ2hhbmdlUGFzc3dvcmQgPSByZWNvdmVyeVRva2VuLnVybENoYW5nZVBhc3N3b3JkO1xuICAgIGlmICh1cmxDaGFuZ2VQYXNzd29yZCkge1xuICAgICAgaXNFeHRlcm5hbExpbmsodXJsQ2hhbmdlUGFzc3dvcmQpXG4gICAgICAgID8gdGhpcy5vcGVuRXh0ZXJuYWxMaW5rKHVybENoYW5nZVBhc3N3b3JkLCByZWNvdmVyeVRva2VuLnRva2VuKVxuICAgICAgICA6IHRoaXMub3BlbkludGVybmFsTGluayh0aGlzLnVybFJlY292ZXJ5LCB1cmxDaGFuZ2VQYXNzd29yZCwgcmVjb3ZlcnlUb2tlbi50b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNoYW5nZVBhc3N3b3JkRW5kcG9pbnQgPSAnY2hhbmdlUGFzc3dvcmQnO1xuICAgICAgdGhpcy5vcGVuSW50ZXJuYWxMaW5rKHRoaXMudXJsUmVjb3ZlcnksIGNoYW5nZVBhc3N3b3JkRW5kcG9pbnQsIHJlY292ZXJ5VG9rZW4udG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVzZXRGb3JtRmllbGRzKGNvbnRyb2wpIHtcbiAgICB0aGlzLmZvcm1SZXNldChjb250cm9sKTtcbiAgICB0aGlzLmVtYWlsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGhvbmUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zbXNDb2RlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRBY3Rpb25zKHByaW1hcnlBY3Rpb24sIHByaW1hcnlsYWJlbCwgc2Vjb25kYXJ5QWN0aW9uLCBzZWNvbmRhcnlMYWJlbCwgZGlzYWJsZWQpIHtcbiAgICB0aGlzLnByaW1hcnlBY3Rpb24uYWN0aW9uID0gKCkgPT4gcHJpbWFyeUFjdGlvbi5jYWxsKHRoaXMpO1xuICAgIHRoaXMucHJpbWFyeUFjdGlvbi5sYWJlbCA9IHByaW1hcnlsYWJlbDtcbiAgICB0aGlzLnNlY29uZGFyeUFjdGlvbi5hY3Rpb24gPSAoKSA9PiBzZWNvbmRhcnlBY3Rpb24uY2FsbCh0aGlzKTtcbiAgICB0aGlzLnNlY29uZGFyeUFjdGlvbi5sYWJlbCA9IHNlY29uZGFyeUxhYmVsO1xuICAgIHRoaXMucHJpbWFyeUFjdGlvbi5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRFbWFpbE1vZGFsUGhyYXNlc0FuZEFjdGlvbnMoKSB7XG4gICAgdGhpcy5tb2RhbFRpdGxlID0gdGhpcy5saXRlcmFscy5mb3Jnb3RQYXNzd29yZFRpdGxlO1xuICAgIHRoaXMucGlwZU1vZGFsUGhyYXNlcygpO1xuICAgIHRoaXMubW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZUFsbCA9IHRoaXMudHlwZSA9PT0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkFsbDtcbiAgICB0aGlzLnNldEFjdGlvbnModGhpcy5zdWJtaXRBY3Rpb24sIHRoaXMubGl0ZXJhbHMuc2VuZEJ1dHRvbiwgdGhpcy5jYW5jZWxBY3Rpb24sIHRoaXMubGl0ZXJhbHMuY2FuY2VsQnV0dG9uLCB0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0UmVxdWVzdEVuZHBvaW50KHVybFZhbGlkYXRpb25Db2RlPzogc3RyaW5nKSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSB1cmxWYWxpZGF0aW9uQ29kZSB8fCAndmFsaWRhdGlvbic7XG5cbiAgICByZXR1cm4gYCR7dGhpcy51cmxSZWNvdmVyeX0vJHtlbmRwb2ludH1gO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQaXBlQXJndW1lbnRzKGxpdGVyYWxBdHRyOiBzdHJpbmcsIGFyZzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMucG9JMThuUGlwZS50cmFuc2Zvcm0obGl0ZXJhbEF0dHIsIGFyZyk7XG4gIH1cblxuICBwcml2YXRlIHN1Ym1pdEFjdGlvbigpIHtcbiAgICB0aGlzLm1vZGFsVHlwZSA9PT0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlNb2RhbENvbnRlbnQuQ29uZmlybWF0aW9uXG4gICAgICA/IHRoaXMuaW5jcmVtZW50UmV0cnlBdHRlbXB0cygpXG4gICAgICA6IHRoaXMuZm9ybVJlc2V0KHRoaXMuY29udHJvbCk7XG4gICAgdGhpcy5zdWJtaXR0ZWRDb250YWN0VmFsdWVbdGhpcy5jaGVja0Zvcm1UeXBlKHRoaXMudHlwZSldID0gdGhpcy5nZXRFbWl0VmFsdWUodGhpcy50eXBlKTtcbiAgICBpZiAodGhpcy51cmxSZWNvdmVyeSkge1xuICAgICAgdGhpcy5zdWJtaXRBY3Rpb25SZXF1ZXN0KHRoaXMuc3VibWl0dGVkQ29udGFjdFZhbHVlLCB0aGlzLnR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1Ym1pdC5lbWl0KHRoaXMuc3VibWl0dGVkQ29udGFjdFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN1Ym1pdEFjdGlvblJlcXVlc3QoZGF0YTogUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnksIG1vZGFsVHlwZTogUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gbW9kYWxUeXBlID09PSBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuU01TID8geyB0eXBlOiAnc21zJyB9IDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5wYXNzd29yZFJlY292ZXJ5U3Vic2NyaXB0aW9uID0gdGhpcy5wb01vZGFsUGFzc3dvcmRSZWNvdmVyeVNlcnZpY2VcbiAgICAgIC5wb3N0KHRoaXMudXJsUmVjb3ZlcnksIGRhdGEsIHBhcmFtcylcbiAgICAgIC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKG1vZGFsVHlwZSA9PT0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkVtYWlsIHx8IG1vZGFsVHlwZSA9PT0gUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLkFsbCkgJiZcbiAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDIwNFxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9wZW5Db25maXJtYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIGlmIChtb2RhbFR5cGUgPT09IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZS5TTVMgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICB0aGlzLmFzc2lnblNtc1Jlc3BvbnNlKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIHRoaXMub3BlblNtc0NvZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN1Ym1pdFNtc0NvZGVBY3Rpb24oKSB7XG4gICAgdGhpcy5zdWJtaXR0ZWRDb2RlVmFsdWUuY29kZSA9IHRoaXMuc21zQ29kZTtcblxuICAgIGlmICh0aGlzLnVybFJlY292ZXJ5KSB7XG4gICAgICB0aGlzLnN1Ym1pdHRlZENvZGVWYWx1ZSA9IE9iamVjdC5hc3NpZ24odGhpcy5zdWJtaXR0ZWRDb2RlVmFsdWUsIHsgaGFzaDogdGhpcy5zbXNCb2R5UmVzcG9uc2UuaGFzaCB9KTtcbiAgICAgIHRoaXMuc3VibWl0U21zQ29kZVJlcXVlc3QodGhpcy5zdWJtaXR0ZWRDb2RlVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvZGVTdWJtaXQuZW1pdCh0aGlzLnN1Ym1pdHRlZENvZGVWYWx1ZSk7XG4gICAgfVxuICAgIHRoaXMucmVzZXRGb3JtRmllbGRzKHRoaXMuY29udHJvbCk7XG4gIH1cblxuICBwcml2YXRlIHN1Ym1pdFNtc0NvZGVSZXF1ZXN0KGRhdGE6IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5KSB7XG4gICAgdGhpcy5zbXNDb2RlU3Vic2NyaXB0aW9uID0gdGhpcy5wb01vZGFsUGFzc3dvcmRSZWNvdmVyeVNlcnZpY2VcbiAgICAgIC5wb3N0KHRoaXMuc2V0UmVxdWVzdEVuZHBvaW50KHRoaXMuc21zQm9keVJlc3BvbnNlLnVybFZhbGlkYXRpb25Db2RlKSwgZGF0YSlcbiAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzU3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzID09PSAyMDA7XG4gICAgICAgICAgaWYgKHN1Y2Nlc3NTdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkKCk7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VG9DaGFuZ2VQYXNzd29yZChyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLmNvZGVFcnJvciA9IGVycm9yLmVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgdGhpcy5vcGVuU21zQ29kZSgpO1xuICAgICAgICB9XG4gICAgICApO1xuICB9XG59XG4iXX0=