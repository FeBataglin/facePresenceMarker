import { __decorate, __metadata } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { PoDynamicFormComponent, PoLanguageService } from '@po-ui/ng-components';
import { PoAdvancedFilterBaseComponent } from './po-advanced-filter-base.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoAdvancedFilterBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-advanced-filter" title="PO Busca AvanÃ§ada">
 *   <file name="sample-po-advanced-filter.component.html"> </file>
 *   <file name="sample-po-advanced-filter.component.ts"> </file>
 * </example-private>
 */
let PoAdvancedFilterComponent = class PoAdvancedFilterComponent extends PoAdvancedFilterBaseComponent {
    constructor(languageService) {
        super(languageService);
    }
    open() {
        this.filter = this.keepFilters ? this.getInitialValuesFromFilter(this.filters) : {};
        this.poModal.open();
    }
    getInitialValuesFromFilter(filters) {
        return filters.reduce((result, item) => Object.assign(result, { [item.property]: item.initValue }), {});
    }
};
PoAdvancedFilterComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
__decorate([
    ViewChild(PoDynamicFormComponent, { static: true }),
    __metadata("design:type", PoDynamicFormComponent)
], PoAdvancedFilterComponent.prototype, "poDynamicForm", void 0);
PoAdvancedFilterComponent = __decorate([
    Component({
        selector: 'po-advanced-filter',
        template: "<po-modal\n  p-hide-close\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"literals.title\"\n>\n  <po-dynamic-form [p-fields]=\"filters\" [p-value]=\"filter\"> </po-dynamic-form>\n</po-modal>\n"
    }),
    __metadata("design:paramtypes", [PoLanguageService])
], PoAdvancedFilterComponent);
export { PoAdvancedFilterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWR5bmFtaWMtc2VhcmNoL3BvLWFkdmFuY2VkLWZpbHRlci9wby1hZHZhbmNlZC1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVqRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUdwRjs7Ozs7Ozs7Ozs7R0FXRztBQUtILElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQTBCLFNBQVEsNkJBQTZCO0lBRzFFLFlBQVksZUFBa0M7UUFDNUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFcEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sMEJBQTBCLENBQUMsT0FBMEM7UUFDM0UsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxRyxDQUFDO0NBQ0YsQ0FBQTs7WUFiOEIsaUJBQWlCOztBQUZPO0lBQXBELFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBZ0Isc0JBQXNCO2dFQUFDO0FBRGhGLHlCQUF5QjtJQUpyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLCtQQUFrRDtLQUNuRCxDQUFDO3FDQUk2QixpQkFBaUI7R0FIbkMseUJBQXlCLENBZ0JyQztTQWhCWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtQ29tcG9uZW50LCBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgUG9BZHZhbmNlZEZpbHRlckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWFkdmFuY2VkLWZpbHRlci1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljU2VhcmNoRmlsdGVycyB9IGZyb20gJy4uL3BvLXBhZ2UtZHluYW1pYy1zZWFyY2gtZmlsdGVycy5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkb2NzRXh0ZW5kcyBQb0FkdmFuY2VkRmlsdGVyQmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlUHJpdmF0ZVxuICpcbiAqIDxleGFtcGxlLXByaXZhdGUgbmFtZT1cInBvLWFkdmFuY2VkLWZpbHRlclwiIHRpdGxlPVwiUE8gQnVzY2EgQXZhbsOnYWRhXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1hZHZhbmNlZC1maWx0ZXIuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZS1wcml2YXRlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1hZHZhbmNlZC1maWx0ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0FkdmFuY2VkRmlsdGVyQ29tcG9uZW50IGV4dGVuZHMgUG9BZHZhbmNlZEZpbHRlckJhc2VDb21wb25lbnQge1xuICBAVmlld0NoaWxkKFBvRHluYW1pY0Zvcm1Db21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIHBvRHluYW1pY0Zvcm06IFBvRHluYW1pY0Zvcm1Db21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHN1cGVyKGxhbmd1YWdlU2VydmljZSk7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuZmlsdGVyID0gdGhpcy5rZWVwRmlsdGVycyA/IHRoaXMuZ2V0SW5pdGlhbFZhbHVlc0Zyb21GaWx0ZXIodGhpcy5maWx0ZXJzKSA6IHt9O1xuXG4gICAgdGhpcy5wb01vZGFsLm9wZW4oKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW5pdGlhbFZhbHVlc0Zyb21GaWx0ZXIoZmlsdGVyczogQXJyYXk8UG9QYWdlRHluYW1pY1NlYXJjaEZpbHRlcnM+KSB7XG4gICAgcmV0dXJuIGZpbHRlcnMucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtpdGVtLnByb3BlcnR5XTogaXRlbS5pbml0VmFsdWUgfSksIHt9KTtcbiAgfVxufVxuIl19