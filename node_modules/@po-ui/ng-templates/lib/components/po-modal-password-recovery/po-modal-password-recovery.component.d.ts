import { OnDestroy } from '@angular/core';
import { AbstractControl, NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { PoI18nPipe, PoModalAction, PoModalComponent, PoRadioGroupOption } from '@po-ui/ng-components';
import { PoModalPasswordRecovery } from './interfaces/po-modal-password-recovery.interface';
import { PoModalPasswordRecoveryBaseComponent } from './po-modal-password-recovery-base.component';
import { PoModalPasswordRecoveryModalContent } from './enums/po-modal-password-recovery-modal-content.enum';
import { PoModalPasswordRecoveryService } from './po-modal-password-recovery.service';
/**
 * @docsExtends PoModalPasswordRecoveryBaseComponent
 *
 * @example
 *
 * <example name="po-modal-password-recovery-basic" title="PO Modal Password Recovery Basic">
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-labs" title="PO Modal Password Recovery Labs">
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-request" title="PO Modal Password Recovery Request">
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoModalPasswordRecoveryComponent extends PoModalPasswordRecoveryBaseComponent implements OnDestroy {
    private router;
    private poI18nPipe;
    private poModalPasswordRecoveryService;
    chosenTypeFormOption: string;
    codeMask: string;
    control: AbstractControl;
    emailModal: boolean;
    emailModalPhrases: {
        firstPhrase: string;
        secondPhrase: string;
    };
    endpoint: string;
    invalidCode: boolean;
    invalidEmail: boolean;
    modalTitle: string;
    modalType: PoModalPasswordRecoveryModalContent;
    showCustomCodeError: boolean;
    smsCodeErrorMessagePhrase: string;
    submittedCodeValue: PoModalPasswordRecovery;
    submittedContactValue: PoModalPasswordRecovery;
    private passwordRecoverySubscription;
    private smsBodyResponse;
    private smsCodeSubscription;
    emailForm: NgForm;
    recoveryModalElement: PoModalComponent;
    smsCodeForm: NgForm;
    primaryAction: PoModalAction;
    secondaryAction: PoModalAction;
    typeFormOptions: Array<PoRadioGroupOption>;
    constructor(router: Router, poI18nPipe: PoI18nPipe, poModalPasswordRecoveryService: PoModalPasswordRecoveryService);
    ngOnDestroy(): void;
    completed(): void;
    formModelChangesCheck(form: NgForm): void;
    getInputType(type: any): void;
    open(): void;
    openConfirmation(): void;
    openSmsCode(): void;
    resendSmsCode(): void;
    private assignSmsResponse;
    private cancelAction;
    private checkFormType;
    private formReset;
    private getEmitValue;
    private incrementRetryAttempts;
    private openExternalLink;
    private openInternalLink;
    private pipeModalPhrases;
    private redirectToChangePassword;
    private resetFormFields;
    private setActions;
    private setEmailModalPhrasesAndActions;
    private setRequestEndpoint;
    private setPipeArguments;
    private submitAction;
    private submitActionRequest;
    private submitSmsCodeAction;
    private submitSmsCodeRequest;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoModalPasswordRecoveryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoModalPasswordRecoveryComponent, "po-modal-password-recovery", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUG9JMThuUGlwZSwgUG9Nb2RhbEFjdGlvbiwgUG9Nb2RhbENvbXBvbmVudCwgUG9SYWRpb0dyb3VwT3B0aW9uIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnkgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlNb2RhbENvbnRlbnQgfSBmcm9tICcuL2VudW1zL3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LW1vZGFsLWNvbnRlbnQuZW51bSc7XG5pbXBvcnQgeyBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVNlcnZpY2UgfSBmcm9tICcuL3BvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LnNlcnZpY2UnO1xuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWNcIiB0aXRsZT1cIlBPIE1vZGFsIFBhc3N3b3JkIFJlY292ZXJ5IEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1iYXNpYy9zYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktYmFzaWMvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnNcIiB0aXRsZT1cIlBPIE1vZGFsIFBhc3N3b3JkIFJlY292ZXJ5IExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnMvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktbGFicy9zYW1wbGUtcG8tbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnktbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0XCIgdGl0bGU9XCJQTyBNb2RhbCBQYXNzd29yZCBSZWNvdmVyeSBSZXF1ZXN0XCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0L3NhbXBsZS1wby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS1yZXF1ZXN0LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LXJlcXVlc3Qvc2FtcGxlLXBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LXJlcXVlc3QuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlDb21wb25lbnQgZXh0ZW5kcyBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcm91dGVyO1xuICAgIHByaXZhdGUgcG9JMThuUGlwZTtcbiAgICBwcml2YXRlIHBvTW9kYWxQYXNzd29yZFJlY292ZXJ5U2VydmljZTtcbiAgICBjaG9zZW5UeXBlRm9ybU9wdGlvbjogc3RyaW5nO1xuICAgIGNvZGVNYXNrOiBzdHJpbmc7XG4gICAgY29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIGVtYWlsTW9kYWw6IGJvb2xlYW47XG4gICAgZW1haWxNb2RhbFBocmFzZXM6IHtcbiAgICAgICAgZmlyc3RQaHJhc2U6IHN0cmluZztcbiAgICAgICAgc2Vjb25kUGhyYXNlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBlbmRwb2ludDogc3RyaW5nO1xuICAgIGludmFsaWRDb2RlOiBib29sZWFuO1xuICAgIGludmFsaWRFbWFpbDogYm9vbGVhbjtcbiAgICBtb2RhbFRpdGxlOiBzdHJpbmc7XG4gICAgbW9kYWxUeXBlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeU1vZGFsQ29udGVudDtcbiAgICBzaG93Q3VzdG9tQ29kZUVycm9yOiBib29sZWFuO1xuICAgIHNtc0NvZGVFcnJvck1lc3NhZ2VQaHJhc2U6IHN0cmluZztcbiAgICBzdWJtaXR0ZWRDb2RlVmFsdWU6IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5O1xuICAgIHN1Ym1pdHRlZENvbnRhY3RWYWx1ZTogUG9Nb2RhbFBhc3N3b3JkUmVjb3Zlcnk7XG4gICAgcHJpdmF0ZSBwYXNzd29yZFJlY292ZXJ5U3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc21zQm9keVJlc3BvbnNlO1xuICAgIHByaXZhdGUgc21zQ29kZVN1YnNjcmlwdGlvbjtcbiAgICBlbWFpbEZvcm06IE5nRm9ybTtcbiAgICByZWNvdmVyeU1vZGFsRWxlbWVudDogUG9Nb2RhbENvbXBvbmVudDtcbiAgICBzbXNDb2RlRm9ybTogTmdGb3JtO1xuICAgIHByaW1hcnlBY3Rpb246IFBvTW9kYWxBY3Rpb247XG4gICAgc2Vjb25kYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uO1xuICAgIHR5cGVGb3JtT3B0aW9uczogQXJyYXk8UG9SYWRpb0dyb3VwT3B0aW9uPjtcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgcG9JMThuUGlwZTogUG9JMThuUGlwZSwgcG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlTZXJ2aWNlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgY29tcGxldGVkKCk6IHZvaWQ7XG4gICAgZm9ybU1vZGVsQ2hhbmdlc0NoZWNrKGZvcm06IE5nRm9ybSk6IHZvaWQ7XG4gICAgZ2V0SW5wdXRUeXBlKHR5cGU6IGFueSk6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIG9wZW5Db25maXJtYXRpb24oKTogdm9pZDtcbiAgICBvcGVuU21zQ29kZSgpOiB2b2lkO1xuICAgIHJlc2VuZFNtc0NvZGUoKTogdm9pZDtcbiAgICBwcml2YXRlIGFzc2lnblNtc1Jlc3BvbnNlO1xuICAgIHByaXZhdGUgY2FuY2VsQWN0aW9uO1xuICAgIHByaXZhdGUgY2hlY2tGb3JtVHlwZTtcbiAgICBwcml2YXRlIGZvcm1SZXNldDtcbiAgICBwcml2YXRlIGdldEVtaXRWYWx1ZTtcbiAgICBwcml2YXRlIGluY3JlbWVudFJldHJ5QXR0ZW1wdHM7XG4gICAgcHJpdmF0ZSBvcGVuRXh0ZXJuYWxMaW5rO1xuICAgIHByaXZhdGUgb3BlbkludGVybmFsTGluaztcbiAgICBwcml2YXRlIHBpcGVNb2RhbFBocmFzZXM7XG4gICAgcHJpdmF0ZSByZWRpcmVjdFRvQ2hhbmdlUGFzc3dvcmQ7XG4gICAgcHJpdmF0ZSByZXNldEZvcm1GaWVsZHM7XG4gICAgcHJpdmF0ZSBzZXRBY3Rpb25zO1xuICAgIHByaXZhdGUgc2V0RW1haWxNb2RhbFBocmFzZXNBbmRBY3Rpb25zO1xuICAgIHByaXZhdGUgc2V0UmVxdWVzdEVuZHBvaW50O1xuICAgIHByaXZhdGUgc2V0UGlwZUFyZ3VtZW50cztcbiAgICBwcml2YXRlIHN1Ym1pdEFjdGlvbjtcbiAgICBwcml2YXRlIHN1Ym1pdEFjdGlvblJlcXVlc3Q7XG4gICAgcHJpdmF0ZSBzdWJtaXRTbXNDb2RlQWN0aW9uO1xuICAgIHByaXZhdGUgc3VibWl0U21zQ29kZVJlcXVlc3Q7XG59XG4iXX0=