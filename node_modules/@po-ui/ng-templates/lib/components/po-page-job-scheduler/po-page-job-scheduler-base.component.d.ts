import { AbstractControl } from '@angular/forms';
import { OnDestroy } from '@angular/core';
import { PoBreadcrumb } from '@po-ui/ng-components';
import { PoJobSchedulerInternal } from './interfaces/po-job-scheduler-internal.interface';
import { PoPageJobSchedulerService } from './po-page-job-scheduler.service';
/**
 * @description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoPageJobSchedulerBaseComponent implements OnDestroy {
    protected poPageJobSchedulerService: PoPageJobSchedulerService;
    private _subscription;
    /** Objeto com as propriedades do breadcrumb. */
    breadcrumb?: PoBreadcrumb;
    /**
     * Endpoint usado pelo componente para busca dos processos e parâmetros que serão utilizados para criação e edição dos agendamentos.
     *
     * #### Processos
     *
     * Os processos são as tarefas que estarão disponíveis para o usuário poder fazer os agendamentos.
     * Ao inicializar o componente, será feito uma requisição `GET` para o endpoint `{service-api}/processes`, para buscar
     * essa lista de processos.
     *
     * Este endpoint `{service-api}/processes` deve retornar uma lista de objetos que seguem a definição de dados abaixo:
     *
     * ```
     * GET {service-api}/processes
     * ```
     *
     * ```
     * {
     *   items: [
     *     { "processID": "ac4f", "description": "Gerar folha de pagamento" },
     *     { "processID": "df6l", "description": "Relatório de imposto a recolher" },
     *     { "processID": "dk3p", "description": "Títulos em aberto" },
     *   ]
     * }
     * ```
     *
     * Desta forma será renderizado um componente para selecionar o processo e/ou filtrá-los.
     *
     * Para realizar o filtro de busca do processo, será feita uma requisição enviando o conteúdo digitado na busca através do
     * parâmetro `search`. Da seguinte forma:
     *
     * ```
     * GET {service-api}/processes?search=relatorio
     * ```
     *
     * > Veja mais sobre paginação e filtros no [Guia de implementação de APIs](guides/api).
     *
     * Também é possível fazer um agendamento de um processo específico, sem que seja necessário um endpoint para busca desses
     * processos. Então, caso o endpoint `{service-api}/processes` não seja válido, será apresentado um campo de entrada de
     * texto para o usuário informar diretamente
     * o **identificador do processo - `processID`** e ao salvar será enviado um `POST` para o endpoint difinido `serviceApi` conforme abaixo:
     *
     * ```
     * POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "daily": { "hour": 10, "minute": 12 },
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "processID": "ac0405"
     *   ...
     * }
     * ```
     *
     * Caso seja necessário informar parâmetros e adicionar configurações no processo selecionado, será realizado um `GET`
     * como exemplificado abaixo. Os parâmetros devem retornar uma lista de objetos que seguem a interface
     * [PoDynamicFormField](/documentation/po-dynamic-form).
     *
     * ```
     * GET {service-api}/processes/:id/parameters
     * ...
     * {
     *   items: [
     *     { "property": "vencimento", type: "date" },
     *     { "property": "imposto-retido", "label": "Imposto Retido", type: "boolean" }
     *   ]
     * }
     * ```
     *
     * #### Salvar e Atualizar
     *
     * Para salvar o agendamento, será feita uma requisição de criação, passando os valores preenchidos pelo usuário via *payload*.
     * Abaixo uma requisição `POST` disparada, onde as propriedades do *Job Scheduler* foram preenchidas:
     *
     * ```
     *  POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "daily": { "hour": 10, "minute": 12 },
     *   "processID": "ac0405"
     * }
     * ```
     *
     * Caso queira que o componente carregue um agendamento já existente, deve ser incluído um parâmetro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.
     *
     * ```
     * GET {service-api}/{id}
     * ```
     *
     * Ao atualizar o agendamento, será disparado um `PUT` com os dados preenchidos.
     * Veja abaixo uma requisição `PUT` disparada, onde a propriedade *recurrent* e *daily* foram atualizadas:
     *
     * ```
     *  PUT {service-api}/{id}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": false,
     *   "daily": { "hour": 11, "minute": 30 },
     *   "processID": "ac0405"
     * }
     * ```
     */
    serviceApi: string;
    /** Título da página. */
    title: string;
    model: PoJobSchedulerInternal;
    constructor(poPageJobSchedulerService: PoPageJobSchedulerService);
    ngOnDestroy(): void;
    protected loadData(id: string | number): void;
    protected markAsDirtyInvalidControls(controls: {
        [key: string]: AbstractControl;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageJobSchedulerBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPageJobSchedulerBaseComponent, never, never, { "breadcrumb": "p-breadcrumb"; "serviceApi": "p-service-api"; "title": "p-title"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1qb2Itc2NoZWR1bGVyLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXBhZ2Utam9iLXNjaGVkdWxlci1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0JyZWFkY3J1bWIgfSBmcm9tICdAcG8tdWkvbmctY29tcG9uZW50cyc7XG5pbXBvcnQgeyBQb0pvYlNjaGVkdWxlckludGVybmFsIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWpvYi1zY2hlZHVsZXItaW50ZXJuYWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2UgfSBmcm9tICcuL3BvLXBhZ2Utam9iLXNjaGVkdWxlci5zZXJ2aWNlJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tcGFnZS1qb2Itc2NoZWR1bGVyYCDDqSB1bWEgcMOhZ2luYSBwYXJhIGNyaWHDp8OjbyBlIGF0dWFsaXphw6fDo28gZGUgYWdlbmRhbWVudG9zIGRhIGV4ZWN1w6fDo28gZGUgcHJvY2Vzc29zIChKb2IgU2NoZWR1bGVyKSxcbiAqIGNvbW8gcG9yIGV4ZW1wbG86IGEgZ2VyYcOnw6NvIGRhIGZvbGhhIGRlIHBhZ2FtZW50byBkb3MgZnVuY2lvbsOhcmlvcy5cbiAqXG4gKiBQYXJhIHV0aWxpemFyIGVzdGEgcMOhZ2luYSwgYmFzdGEgaW5mb3JtYXIgbyBzZXJ2acOnbyAoZW5kcG9pbnQpIHBhcmEgY29uc3VtbyxcbiAqIHNlbSBhIG5lY2Vzc2lkYWRlIGRlIGNyaWFyIGNvbXBvbmVudGVzIGUgdHJhdGFtZW50b3MgZG9zIGRhZG9zLlxuICpcbiAqIFZlamEgbWFpcyBzb2JyZSBvcyBwYWRyw7VlcyB1dGlsaXphZG9zIG5hcyByZXF1aXNpw6fDtWVzIG5vIFtHdWlhIGRlIGltcGxlbWVudGHDp8OjbyBkZSBBUElzXShndWlkZXMvYXBpKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9QYWdlSm9iU2NoZWR1bGVyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIHBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2U6IFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uO1xuICAgIC8qKiBPYmpldG8gY29tIGFzIHByb3ByaWVkYWRlcyBkbyBicmVhZGNydW1iLiAqL1xuICAgIGJyZWFkY3J1bWI/OiBQb0JyZWFkY3J1bWI7XG4gICAgLyoqXG4gICAgICogRW5kcG9pbnQgdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgYnVzY2EgZG9zIHByb2Nlc3NvcyBlIHBhcsOibWV0cm9zIHF1ZSBzZXLDo28gdXRpbGl6YWRvcyBwYXJhIGNyaWHDp8OjbyBlIGVkacOnw6NvIGRvcyBhZ2VuZGFtZW50b3MuXG4gICAgICpcbiAgICAgKiAjIyMjIFByb2Nlc3Nvc1xuICAgICAqXG4gICAgICogT3MgcHJvY2Vzc29zIHPDo28gYXMgdGFyZWZhcyBxdWUgZXN0YXLDo28gZGlzcG9uw612ZWlzIHBhcmEgbyB1c3XDoXJpbyBwb2RlciBmYXplciBvcyBhZ2VuZGFtZW50b3MuXG4gICAgICogQW8gaW5pY2lhbGl6YXIgbyBjb21wb25lbnRlLCBzZXLDoSBmZWl0byB1bWEgcmVxdWlzacOnw6NvIGBHRVRgIHBhcmEgbyBlbmRwb2ludCBge3NlcnZpY2UtYXBpfS9wcm9jZXNzZXNgLCBwYXJhIGJ1c2NhclxuICAgICAqIGVzc2EgbGlzdGEgZGUgcHJvY2Vzc29zLlxuICAgICAqXG4gICAgICogRXN0ZSBlbmRwb2ludCBge3NlcnZpY2UtYXBpfS9wcm9jZXNzZXNgIGRldmUgcmV0b3JuYXIgdW1hIGxpc3RhIGRlIG9iamV0b3MgcXVlIHNlZ3VlbSBhIGRlZmluacOnw6NvIGRlIGRhZG9zIGFiYWl4bzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEdFVCB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlc1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqICAgaXRlbXM6IFtcbiAgICAgKiAgICAgeyBcInByb2Nlc3NJRFwiOiBcImFjNGZcIiwgXCJkZXNjcmlwdGlvblwiOiBcIkdlcmFyIGZvbGhhIGRlIHBhZ2FtZW50b1wiIH0sXG4gICAgICogICAgIHsgXCJwcm9jZXNzSURcIjogXCJkZjZsXCIsIFwiZGVzY3JpcHRpb25cIjogXCJSZWxhdMOzcmlvIGRlIGltcG9zdG8gYSByZWNvbGhlclwiIH0sXG4gICAgICogICAgIHsgXCJwcm9jZXNzSURcIjogXCJkazNwXCIsIFwiZGVzY3JpcHRpb25cIjogXCJUw610dWxvcyBlbSBhYmVydG9cIiB9LFxuICAgICAqICAgXVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIERlc3RhIGZvcm1hIHNlcsOhIHJlbmRlcml6YWRvIHVtIGNvbXBvbmVudGUgcGFyYSBzZWxlY2lvbmFyIG8gcHJvY2Vzc28gZS9vdSBmaWx0csOhLWxvcy5cbiAgICAgKlxuICAgICAqIFBhcmEgcmVhbGl6YXIgbyBmaWx0cm8gZGUgYnVzY2EgZG8gcHJvY2Vzc28sIHNlcsOhIGZlaXRhIHVtYSByZXF1aXNpw6fDo28gZW52aWFuZG8gbyBjb250ZcO6ZG8gZGlnaXRhZG8gbmEgYnVzY2EgYXRyYXbDqXMgZG9cbiAgICAgKiBwYXLDom1ldHJvIGBzZWFyY2hgLiBEYSBzZWd1aW50ZSBmb3JtYTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEdFVCB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlcz9zZWFyY2g9cmVsYXRvcmlvXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IFZlamEgbWFpcyBzb2JyZSBwYWdpbmHDp8OjbyBlIGZpbHRyb3Mgbm8gW0d1aWEgZGUgaW1wbGVtZW50YcOnw6NvIGRlIEFQSXNdKGd1aWRlcy9hcGkpLlxuICAgICAqXG4gICAgICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgZmF6ZXIgdW0gYWdlbmRhbWVudG8gZGUgdW0gcHJvY2Vzc28gZXNwZWPDrWZpY28sIHNlbSBxdWUgc2VqYSBuZWNlc3PDoXJpbyB1bSBlbmRwb2ludCBwYXJhIGJ1c2NhIGRlc3Nlc1xuICAgICAqIHByb2Nlc3Nvcy4gRW50w6NvLCBjYXNvIG8gZW5kcG9pbnQgYHtzZXJ2aWNlLWFwaX0vcHJvY2Vzc2VzYCBuw6NvIHNlamEgdsOhbGlkbywgc2Vyw6EgYXByZXNlbnRhZG8gdW0gY2FtcG8gZGUgZW50cmFkYSBkZVxuICAgICAqIHRleHRvIHBhcmEgbyB1c3XDoXJpbyBpbmZvcm1hciBkaXJldGFtZW50ZVxuICAgICAqIG8gKippZGVudGlmaWNhZG9yIGRvIHByb2Nlc3NvIC0gYHByb2Nlc3NJRGAqKiBlIGFvIHNhbHZhciBzZXLDoSBlbnZpYWRvIHVtIGBQT1NUYCBwYXJhIG8gZW5kcG9pbnQgZGlmaW5pZG8gYHNlcnZpY2VBcGlgIGNvbmZvcm1lIGFiYWl4bzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIFBPU1Qge3NlcnZpY2UtYXBpfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogKlJlcXVlc3QgcGF5bG9hZCogLSBlc3RydXR1cmEgZGUgZGFkb3MgZW52aWFkYSBubyBjb3JwbyBkYSByZXF1aXNpw6fDo28gY29uZm9ybWUgaW50ZXJmYWNlIGBQb0pvYlNjaGVkdWxlcmA6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiB7XG4gICAgICogICBcImRhaWx5XCI6IHsgXCJob3VyXCI6IDEwLCBcIm1pbnV0ZVwiOiAxMiB9LFxuICAgICAqICAgXCJmaXJzdEV4ZWN1dGlvblwiOiBcIjIwMTgtMTItMDdUMDA6MDA6MDEtMDA6MDBcIixcbiAgICAgKiAgIFwicmVjdXJyZW50XCI6IHRydWUsXG4gICAgICogICBcInByb2Nlc3NJRFwiOiBcImFjMDQwNVwiXG4gICAgICogICAuLi5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBDYXNvIHNlamEgbmVjZXNzw6FyaW8gaW5mb3JtYXIgcGFyw6JtZXRyb3MgZSBhZGljaW9uYXIgY29uZmlndXJhw6fDtWVzIG5vIHByb2Nlc3NvIHNlbGVjaW9uYWRvLCBzZXLDoSByZWFsaXphZG8gdW0gYEdFVGBcbiAgICAgKiBjb21vIGV4ZW1wbGlmaWNhZG8gYWJhaXhvLiBPcyBwYXLDom1ldHJvcyBkZXZlbSByZXRvcm5hciB1bWEgbGlzdGEgZGUgb2JqZXRvcyBxdWUgc2VndWVtIGEgaW50ZXJmYWNlXG4gICAgICogW1BvRHluYW1pY0Zvcm1GaWVsZF0oL2RvY3VtZW50YXRpb24vcG8tZHluYW1pYy1mb3JtKS5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEdFVCB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlcy86aWQvcGFyYW1ldGVyc1xuICAgICAqIC4uLlxuICAgICAqIHtcbiAgICAgKiAgIGl0ZW1zOiBbXG4gICAgICogICAgIHsgXCJwcm9wZXJ0eVwiOiBcInZlbmNpbWVudG9cIiwgdHlwZTogXCJkYXRlXCIgfSxcbiAgICAgKiAgICAgeyBcInByb3BlcnR5XCI6IFwiaW1wb3N0by1yZXRpZG9cIiwgXCJsYWJlbFwiOiBcIkltcG9zdG8gUmV0aWRvXCIsIHR5cGU6IFwiYm9vbGVhblwiIH1cbiAgICAgKiAgIF1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIFNhbHZhciBlIEF0dWFsaXphclxuICAgICAqXG4gICAgICogUGFyYSBzYWx2YXIgbyBhZ2VuZGFtZW50bywgc2Vyw6EgZmVpdGEgdW1hIHJlcXVpc2nDp8OjbyBkZSBjcmlhw6fDo28sIHBhc3NhbmRvIG9zIHZhbG9yZXMgcHJlZW5jaGlkb3MgcGVsbyB1c3XDoXJpbyB2aWEgKnBheWxvYWQqLlxuICAgICAqIEFiYWl4byB1bWEgcmVxdWlzacOnw6NvIGBQT1NUYCBkaXNwYXJhZGEsIG9uZGUgYXMgcHJvcHJpZWRhZGVzIGRvICpKb2IgU2NoZWR1bGVyKiBmb3JhbSBwcmVlbmNoaWRhczpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBQT1NUIHtzZXJ2aWNlLWFwaX1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICpSZXF1ZXN0IHBheWxvYWQqIC0gZXN0cnV0dXJhIGRlIGRhZG9zIGVudmlhZGEgbm8gY29ycG8gZGEgcmVxdWlzacOnw6NvIGNvbmZvcm1lIGludGVyZmFjZSBgUG9Kb2JTY2hlZHVsZXJgOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqICAgXCJmaXJzdEV4ZWN1dGlvblwiOiBcIjIwMTgtMTItMDdUMDA6MDA6MDEtMDA6MDBcIixcbiAgICAgKiAgIFwicmVjdXJyZW50XCI6IHRydWUsXG4gICAgICogICBcImRhaWx5XCI6IHsgXCJob3VyXCI6IDEwLCBcIm1pbnV0ZVwiOiAxMiB9LFxuICAgICAqICAgXCJwcm9jZXNzSURcIjogXCJhYzA0MDVcIlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENhc28gcXVlaXJhIHF1ZSBvIGNvbXBvbmVudGUgY2FycmVndWUgdW0gYWdlbmRhbWVudG8gasOhIGV4aXN0ZW50ZSwgZGV2ZSBzZXIgaW5jbHXDrWRvIHVtIHBhcsOibWV0cm8gbmEgcm90YSBjaGFtYWRvIGBpZGAuXG4gICAgICpcbiAgICAgKiBFeGVtcGxvIGRlIGNvbmZpZ3VyYcOnw6NvIGRlIHJvdGE6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgUm91dGVyTW9kdWxlLmZvclJvb3QoW1xuICAgICAqICAgIC4uLlxuICAgICAqICAgIHsgcGF0aDogJ2VkaXQvOmlkJywgY29tcG9uZW50OiBFeGFtcGxlSm9iU2NoZWR1bGVyQ29tcG9uZW50IH0sXG4gICAgICogICAgLi4uXG4gICAgICogIF0sXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBCYXNlYWRvIG5pc3NvLCBuYSBpbmljaWFsaXphw6fDo28gZG8gdGVtcGxhdGUgc2Vyw6EgZGlzcGFyYWRvIHVtYSByZXF1aXNpw6fDo28gcGFyYSBidXNjYXIgbyByZWN1cnNvIHF1ZSBzZXLDoSBlZGl0YWRvLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogR0VUIHtzZXJ2aWNlLWFwaX0ve2lkfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQW8gYXR1YWxpemFyIG8gYWdlbmRhbWVudG8sIHNlcsOhIGRpc3BhcmFkbyB1bSBgUFVUYCBjb20gb3MgZGFkb3MgcHJlZW5jaGlkb3MuXG4gICAgICogVmVqYSBhYmFpeG8gdW1hIHJlcXVpc2nDp8OjbyBgUFVUYCBkaXNwYXJhZGEsIG9uZGUgYSBwcm9wcmllZGFkZSAqcmVjdXJyZW50KiBlICpkYWlseSogZm9yYW0gYXR1YWxpemFkYXM6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgUFVUIHtzZXJ2aWNlLWFwaX0ve2lkfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogKlJlcXVlc3QgcGF5bG9hZCogLSBlc3RydXR1cmEgZGUgZGFkb3MgZW52aWFkYSBubyBjb3JwbyBkYSByZXF1aXNpw6fDo28gY29uZm9ybWUgaW50ZXJmYWNlIGBQb0pvYlNjaGVkdWxlcmA6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiB7XG4gICAgICogICBcImZpcnN0RXhlY3V0aW9uXCI6IFwiMjAxOC0xMi0wN1QwMDowMDowMS0wMDowMFwiLFxuICAgICAqICAgXCJyZWN1cnJlbnRcIjogZmFsc2UsXG4gICAgICogICBcImRhaWx5XCI6IHsgXCJob3VyXCI6IDExLCBcIm1pbnV0ZVwiOiAzMCB9LFxuICAgICAqICAgXCJwcm9jZXNzSURcIjogXCJhYzA0MDVcIlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXJ2aWNlQXBpOiBzdHJpbmc7XG4gICAgLyoqIFTDrXR1bG8gZGEgcMOhZ2luYS4gKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIG1vZGVsOiBQb0pvYlNjaGVkdWxlckludGVybmFsO1xuICAgIGNvbnN0cnVjdG9yKHBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2U6IFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGxvYWREYXRhKGlkOiBzdHJpbmcgfCBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBtYXJrQXNEaXJ0eUludmFsaWRDb250cm9scyhjb250cm9sczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgfSk6IHZvaWQ7XG59XG4iXX0=