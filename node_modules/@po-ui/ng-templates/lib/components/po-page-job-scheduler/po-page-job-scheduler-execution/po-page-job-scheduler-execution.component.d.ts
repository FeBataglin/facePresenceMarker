import { AfterViewInit, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { NgForm } from '@angular/forms';
import { PoCheckboxGroupOption, PoRadioGroupOption } from '@po-ui/ng-components';
import { PoPageJobSchedulerLookupService } from '../po-page-job-scheduler-lookup.service';
import { PoPageJobSchedulerService } from '../po-page-job-scheduler.service';
import * as ɵngcc0 from '@angular/core';
export declare class PoPageJobSchedulerExecutionComponent implements OnInit, AfterViewInit {
    private poPageJobSchedulerService;
    poPageJobSchedulerLookup: PoPageJobSchedulerLookupService;
    private _value;
    dayPattern: string;
    existProcessAPI: boolean;
    minDateFirstExecution: Date;
    periodicityOptions: Array<PoRadioGroupOption>;
    periodicityTemplates: {
        daily: TemplateRef<any>;
        weekly: TemplateRef<any>;
        monthly: TemplateRef<any>;
    };
    timePattern: string;
    weekDays: Array<PoCheckboxGroupOption>;
    form: NgForm;
    dailyTemplate: any;
    monthlyTemplate: any;
    weeklyTempalte: any;
    isEdit: boolean;
    literals: any;
    set value(value: any);
    get value(): any;
    changeProcess: EventEmitter<any>;
    constructor(poPageJobSchedulerService: PoPageJobSchedulerService, poPageJobSchedulerLookup: PoPageJobSchedulerLookupService);
    get startDateFirstExecution(): Date;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    private checkExistsProcessesAPI;
    private getPeriodicityOptions;
    private getWeekDays;
    private subscribeProcessIdValueChanges;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageJobSchedulerExecutionComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoPageJobSchedulerExecutionComponent, "po-page-job-scheduler-execution", never, { "isEdit": "p-is-edit"; "literals": "p-literals"; "value": "p-value"; }, { "changeProcess": "p-change-process"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1qb2Itc2NoZWR1bGVyLWV4ZWN1dGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcGFnZS1qb2Itc2NoZWR1bGVyLWV4ZWN1dGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBQb0NoZWNrYm94R3JvdXBPcHRpb24sIFBvUmFkaW9Hcm91cE9wdGlvbiB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcbmltcG9ydCB7IFBvUGFnZUpvYlNjaGVkdWxlckxvb2t1cFNlcnZpY2UgfSBmcm9tICcuLi9wby1wYWdlLWpvYi1zY2hlZHVsZXItbG9va3VwLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9QYWdlSm9iU2NoZWR1bGVyU2VydmljZSB9IGZyb20gJy4uL3BvLXBhZ2Utam9iLXNjaGVkdWxlci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUGFnZUpvYlNjaGVkdWxlckV4ZWN1dGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBwb1BhZ2VKb2JTY2hlZHVsZXJTZXJ2aWNlO1xuICAgIHBvUGFnZUpvYlNjaGVkdWxlckxvb2t1cDogUG9QYWdlSm9iU2NoZWR1bGVyTG9va3VwU2VydmljZTtcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBkYXlQYXR0ZXJuOiBzdHJpbmc7XG4gICAgZXhpc3RQcm9jZXNzQVBJOiBib29sZWFuO1xuICAgIG1pbkRhdGVGaXJzdEV4ZWN1dGlvbjogRGF0ZTtcbiAgICBwZXJpb2RpY2l0eU9wdGlvbnM6IEFycmF5PFBvUmFkaW9Hcm91cE9wdGlvbj47XG4gICAgcGVyaW9kaWNpdHlUZW1wbGF0ZXM6IHtcbiAgICAgICAgZGFpbHk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgICAgIHdlZWtseTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAgICAgbW9udGhseTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB9O1xuICAgIHRpbWVQYXR0ZXJuOiBzdHJpbmc7XG4gICAgd2Vla0RheXM6IEFycmF5PFBvQ2hlY2tib3hHcm91cE9wdGlvbj47XG4gICAgZm9ybTogTmdGb3JtO1xuICAgIGRhaWx5VGVtcGxhdGU6IGFueTtcbiAgICBtb250aGx5VGVtcGxhdGU6IGFueTtcbiAgICB3ZWVrbHlUZW1wYWx0ZTogYW55O1xuICAgIGlzRWRpdDogYm9vbGVhbjtcbiAgICBsaXRlcmFsczogYW55O1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogYW55KTtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIGNoYW5nZVByb2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKHBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2U6IFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2UsIHBvUGFnZUpvYlNjaGVkdWxlckxvb2t1cDogUG9QYWdlSm9iU2NoZWR1bGVyTG9va3VwU2VydmljZSk7XG4gICAgZ2V0IHN0YXJ0RGF0ZUZpcnN0RXhlY3V0aW9uKCk6IERhdGU7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIGNoZWNrRXhpc3RzUHJvY2Vzc2VzQVBJO1xuICAgIHByaXZhdGUgZ2V0UGVyaW9kaWNpdHlPcHRpb25zO1xuICAgIHByaXZhdGUgZ2V0V2Vla0RheXM7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVQcm9jZXNzSWRWYWx1ZUNoYW5nZXM7XG59XG4iXX0=