import { EventEmitter } from '@angular/core';
import { PoModalAction } from '@po-ui/ng-components';
import { PoPageChangePasswordRecovery } from './interfaces/po-page-change-password-recovery.interface';
import { PoPageChangePasswordRequirement } from './interfaces/po-page-change-password-requirement.interface';
/**
 * @description
 *
 * O componente `po-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `p-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/@po-ui/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoPageChangePasswordBaseComponent {
    private _hideCurrentPassword;
    private _recovery;
    private _requirements;
    private _urlHome;
    protected validatorChange: any;
    confirmPassword: string;
    currentPassword: string;
    modalAction: PoModalAction;
    newPassword: string;
    recoveryUrlType: string;
    showRequirements: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo `Senha atual` para que o template seja para criação de senha.
     *
     * @default `false`
     */
    set hideCurrentPassword(value: boolean);
    get hideCurrentPassword(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     */
    logo?: string;
    /**
     * @optional
     *
     * @description
     *
     * URL para a ação do link `Esqueceu a senha`.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <po-page-change-password>
     *      [recovery]="this.myFunc.bind(this)";
     * </po-page-change-password>
     * ```
     *
     * - **PoPageChangePasswordRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     *
     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
     */
    set recovery(value: string | Function | PoPageChangePasswordRecovery);
    get recovery(): string | Function | PoPageChangePasswordRecovery;
    /**
     * @optional
     *
     * @description
     *
     * Lista de regras para criação e alteração de senha.
     */
    set requirements(value: Array<PoPageChangePasswordRequirement>);
    get requirements(): Array<PoPageChangePasswordRequirement>;
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca localizada no rodapé.
     */
    secondaryLogo?: string;
    /**
     * Token para solicitação de troca/recuperação de senha.
     *
     * > Esta propriedade será ignorada caso exista um token como parâmetro na URL inicial do template.
     */
    token?: string;
    /**
     * @optional
     *
     * @description
     *
     * URL para a ação de retorno da página.
     *
     * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
     * falsa.
     *
     * @default `/`
     */
    urlBack: string;
    /**
     * Endpoint usado pelo template para realizar um POST. Quando preenchido, o método `p-submit` será ignorado e o componente adquirirá
     * automatização para o processo de cadastro/troca de senha.
     *
     * ### Processo
     * Ao digitar um valor válido nos campos de senha e pressionar **salvar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo
     * usuário.
     *
     * ```
     * body {
     *  token?: token,
     *  oldPassword?: oldPassword,
     *  newPassword: newPassword
     * }
     * ```
     *
     * O código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de senha alterada.
     *
     * > O token será informado pela propriedade `p-token`do componente ou por um *query parameter* na URL do template.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `po-page-change-password` no restante da aplicação. O exemplo abaixo
     * exemplifica a forma dinâmica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e
     * também como ele se comunica com o serviço para efetuação do processo de troca de senha do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { PoModalPasswordRecoveryType, PoPageChangePasswordComponent } from '@po-ui/ng-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'change-password', component: PoPageChangePasswordComponent, data: {
     *         serviceApi: 'https://po-ui.io/sample/api/new-password',
     *         recovery: {
     *           url: 'https://po-ui.io/sample/api/users',
     *           type: PoModalPasswordRecoveryType.All,
     *           contactMail: 'dev.po@po-ui.com',
     *           phoneMask: '9-999-999-9999'
     *         }
     *       }
     *     }
     *     ...
     *   ];
     *
     *   @NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de troca de senha. E `recovery` é a interface
     * `PoPageChangePasswordRecovery` responsável pelas especificações contidas na modal de recuperação de senha.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     */
    urlNewPassword?: string;
    /**
     * @optional
     *
     * @description
     *
     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
     * `openConfirmation`.
     *
     * @default `/`
     */
    set urlHome(value: string);
    get urlHome(): string;
    /**
     * @optional
     *
     * @description
     *
     * Função executada ao submeter o form pelo botão salvar.
     *
     * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
     * método `openConfirmation`. Exemplo:
     *
     * ```
     * @ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
     *
     * onSubmit() {
     *  this.changePassword.openConfirmation();
     * }
     *
     * ```
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
     */
    submit: EventEmitter<any>;
    abstract navigateTo(url: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageChangePasswordBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPageChangePasswordBaseComponent, never, never, { "urlBack": "p-url-back"; "hideCurrentPassword": "p-hide-current-password"; "recovery": "p-recovery"; "requirements": "p-requirements"; "urlHome": "p-url-home"; "logo": "p-logo"; "secondaryLogo": "p-secondary-logo"; "token": "p-token"; "urlNewPassword": "p-url-new-password"; }, { "submit": "p-submit"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmQtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmQtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZWNvdmVyeSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC1yZWNvdmVyeS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZXF1aXJlbWVudCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC1yZXF1aXJlbWVudC5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXBhZ2UtY2hhbmdlLXBhc3N3b3JkYCDDqSB1dGlsaXphZG8gY29tbyB0ZW1wbGF0ZSBwYXJhIHRlbGEgZGUgY2FkYXN0cm8gb3UgYWx0ZXJhw6fDo28gZGUgc2VuaGEuXG4gKlxuICogQXByZXNlbnRhIGRpY2FzIGUgcmVncmFzIHBhcmEgc2VuaGFzIG1haXMgc2VndXJhcyBlIHRhbWLDqW0gcG9zc2liaWxpZGFkZSBkZSBwZXJzb25hbGl6YXIgbyByZWRpcmVjaW9uYW1lbnRvIHBhcmEgYXMgdGVsYXNcbiAqICdlc3F1ZWNldSBhIHNlbmhhJywgJ3ZvbHRhcicgZSAnZW50cmFyIG5vIHNpc3RlbWEnLiBPcyB0ZXh0b3MgZGFzIHRlbGFzIHPDo28gcHLDqS1kZWZpbmlkb3MgZSBpbXV0w6F2ZWlzLlxuICpcbiAqIEEgcHJvcHJpZWRhZGUgYHAtdXJsLW5ldy1wYXNzd29yZGAgYXV0b21hdGl6YSBhIHJvdGluYSBkbyB0ZW1wbGF0ZSBlIHNpbXBsaWZpY2EgbyBwcm9jZXNzbyBkZSBjYWRhc3Ryby9hbHRlcmHDp8OjbyBkZSBzZW5oYSwgYmFzdGFuZG9cbiAqIGRlZmluaXIgdW1hIHVybCBwYXJhIFBPU1QgZGFzIGluZm9ybWHDp8O1ZXMgZGlnaXRhZGFzIHBlbG8gdXN1w6FyaW8uICBBIGZsZXhpYmlsaWRhZGUgZSBwcmF0aWNpZGFkZSBwb2RlbSBjaGVnYXIgYSB1bSBuw612ZWwgZW0gcXVlIG9cbiAqIGRlc2Vudm9sdmltZW50byBkYSBhcGxpY2HDp8OjbyBubyAqY2xpZW50IHNpZGUqIMOpIGRlc3Byb3ZpZGEgZGUgcXVhbHF1ZXIgY8OzZGlnby1mb250ZSByZWxhY2lvbmFkbyDDoCByb3RpbmEgZGUgY2FkYXN0cm8vYWx0ZXJhw6fDo28gZGUgc2VuaGEuXG4gKiBTZXUgZGV0YWxoYW1lbnRvIHBhcmEgdXNvIHBvZGUgc2VyIHZpc3RvIGxvZ28gYWJhaXhvIGVtICpwcm9wcmllZGFkZXMqLlxuICogQ2FzbyBqdWxndWUgbmVjZXNzw6FyaW8sIHBvZGUtc2UgdGFtYsOpbSBkZWZpbmlyIG1hbnVhbG1lbnRlIGEgcm90aW5hIGRvIGNvbXBvbmVudGUuXG4gKlxuICogUGFyYSBxdWUgYXMgaW1hZ2VucyBzZWphbSBleGliaWRhcyBjb3JyZXRhbWVudGUsIMOpIG5lY2Vzc8OhcmlvIGluY2x1aXIgbyBjYW1pbmhvIGRlbGFzIGFvIHByb2pldG8uIFBhcmEgaXNzbywgZWRpdGVcbiAqIG8gKmFzc2V0cyogbm8gYXJxdWl2byAqKmFuZ3VsYXIuanNvbioqIGRhIGFwbGljYcOnw6NvIG5hIHNlZ3VpbnRlIG9yZGVtOlxuICogYGBgXG4gKiAgIFwiYXNzZXRzXCI6IFtcbiAqICAgICBcInNyYy9hc3NldHNcIixcbiAqICAgICBcInNyYy9mYXZpY29uLmljb1wiLFxuICogICAgIHtcbiAqICAgICAgIFwiZ2xvYlwiOiBcIioqXFwvKlwiLFxuICogICAgICAgXCJpbnB1dFwiOiBcIm5vZGVfbW9kdWxlcy9AcG8tdWkvc3R5bGUvaW1hZ2VzXCIsXG4gKiAgICAgICBcIm91dHB1dFwiOiBcImFzc2V0cy9pbWFnZXNcIlxuICogICAgIH1cbiAqICAgXVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBvUGFnZUNoYW5nZVBhc3N3b3JkQmFzZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfaGlkZUN1cnJlbnRQYXNzd29yZDtcbiAgICBwcml2YXRlIF9yZWNvdmVyeTtcbiAgICBwcml2YXRlIF9yZXF1aXJlbWVudHM7XG4gICAgcHJpdmF0ZSBfdXJsSG9tZTtcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdG9yQ2hhbmdlOiBhbnk7XG4gICAgY29uZmlybVBhc3N3b3JkOiBzdHJpbmc7XG4gICAgY3VycmVudFBhc3N3b3JkOiBzdHJpbmc7XG4gICAgbW9kYWxBY3Rpb246IFBvTW9kYWxBY3Rpb247XG4gICAgbmV3UGFzc3dvcmQ6IHN0cmluZztcbiAgICByZWNvdmVyeVVybFR5cGU6IHN0cmluZztcbiAgICBzaG93UmVxdWlyZW1lbnRzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBFc2NvbmRlIG8gY2FtcG8gYFNlbmhhIGF0dWFsYCBwYXJhIHF1ZSBvIHRlbXBsYXRlIHNlamEgcGFyYSBjcmlhw6fDo28gZGUgc2VuaGEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGhpZGVDdXJyZW50UGFzc3dvcmQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBoaWRlQ3VycmVudFBhc3N3b3JkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENhbWluaG8gcGFyYSBhIGxvZ29tYXJjYSBsb2NhbGl6YWRhIG5hIHBhcnRlIHN1cGVyaW9yLlxuICAgICAqXG4gICAgICogPiBDYXNvIHNlamEgaW5kZWZpbmlkYSBvIGVzcGHDp28gc2UgbWFudMOpbSBwcmVzZXJ2YWRvIHBvcsOpbSB2YXppby5cbiAgICAgKi9cbiAgICBsb2dvPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBVUkwgcGFyYSBhIGHDp8OjbyBkbyBsaW5rIGBFc3F1ZWNldSBhIHNlbmhhYC5cbiAgICAgKlxuICAgICAqIEEgcHJvcHJpZWRhZGUgYWNlaXRhIG9zIHNlZ3VpbnRlcyB0aXBvczpcbiAgICAgKlxuICAgICAqIC0gKipTdHJpbmcqKjogaW5mb3JtZSB1bWEgdXJsIGV4dGVybmEgb3UgdW1hIHJvdGEgdsOhbGlkYTtcbiAgICAgKiAtICoqRnVuY3Rpb24qKjogcG9kZS1zZSBjdXN0b21pemFyIGEgYcOnw6NvLiBQYXJhIGVzdGEgcG9zc2lsaWRhZGUgYmFzdGEgYXRyaWJ1aXI6XG4gICAgICogYGBgXG4gICAgICogPHBvLXBhZ2UtY2hhbmdlLXBhc3N3b3JkPlxuICAgICAqICAgICAgW3JlY292ZXJ5XT1cInRoaXMubXlGdW5jLmJpbmQodGhpcylcIjtcbiAgICAgKiA8L3BvLXBhZ2UtY2hhbmdlLXBhc3N3b3JkPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogLSAqKlBvUGFnZUNoYW5nZVBhc3N3b3JkUmVjb3ZlcnkqKjogY3JpYS1zZSB2w61uY3VsbyBhdXRvbcOhdGljbyBjb20gbyB0ZW1wbGF0ZSAqKnBvLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5KiouXG4gICAgICogICBPIG9iamV0byBkZXZlIGNvbnRlciBhICoqdXJsKiogcGFyYSByZXF1aXNpw6fDo28gZG9zIHJlY3Vyc29zIGUgcG9kZS1zZSBkZWZpbmlyIG8gKip0aXBvKiogZGUgbW9kYWwgcGFyYSByZWN1cGVyYcOnw6NvIGRlIHNlbmhhLFxuICAgICAqICAgKiplbWFpbCoqIHBhcmEgY29udGF0byBlICoqbcOhc2NhcmEqKiBkbyBjYW1wbyBkZSB0ZWxlZm9uZS5cbiAgICAgKlxuICAgICAqID4gQ2FzbyBuw6NvIHRlbmhhIHZhbG9yIG8gbGluayBgRXNxdWVjZXUgYSBzZW5oYWAgZGVzYXBhcmVjZS5cbiAgICAgKi9cbiAgICBzZXQgcmVjb3ZlcnkodmFsdWU6IHN0cmluZyB8IEZ1bmN0aW9uIHwgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZWNvdmVyeSk7XG4gICAgZ2V0IHJlY292ZXJ5KCk6IHN0cmluZyB8IEZ1bmN0aW9uIHwgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZWNvdmVyeTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogTGlzdGEgZGUgcmVncmFzIHBhcmEgY3JpYcOnw6NvIGUgYWx0ZXJhw6fDo28gZGUgc2VuaGEuXG4gICAgICovXG4gICAgc2V0IHJlcXVpcmVtZW50cyh2YWx1ZTogQXJyYXk8UG9QYWdlQ2hhbmdlUGFzc3dvcmRSZXF1aXJlbWVudD4pO1xuICAgIGdldCByZXF1aXJlbWVudHMoKTogQXJyYXk8UG9QYWdlQ2hhbmdlUGFzc3dvcmRSZXF1aXJlbWVudD47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENhbWluaG8gcGFyYSBhIGxvZ29tYXJjYSBsb2NhbGl6YWRhIG5vIHJvZGFww6kuXG4gICAgICovXG4gICAgc2Vjb25kYXJ5TG9nbz86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUb2tlbiBwYXJhIHNvbGljaXRhw6fDo28gZGUgdHJvY2EvcmVjdXBlcmHDp8OjbyBkZSBzZW5oYS5cbiAgICAgKlxuICAgICAqID4gRXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYSBjYXNvIGV4aXN0YSB1bSB0b2tlbiBjb21vIHBhcsOibWV0cm8gbmEgVVJMIGluaWNpYWwgZG8gdGVtcGxhdGUuXG4gICAgICovXG4gICAgdG9rZW4/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFVSTCBwYXJhIGEgYcOnw6NvIGRlIHJldG9ybm8gZGEgcMOhZ2luYS5cbiAgICAgKlxuICAgICAqID4gTyBib3TDo28gYFZvbHRhcmAgYXBhcmVjZSBhcGVuYXMgcGFyYSB0ZWxhcyBkZSBhbHRlcmHDp8OjbyBkZSBzZW5oYSwgb3Ugc2VqYSwgc8OzIGFwYXJlY2Ugc2UgYSBwcm9wcmllZGFkZSBgcC1oaWRlLWN1cnJlbnQtcGFzc3dvcmRgIGZvclxuICAgICAqIGZhbHNhLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYC9gXG4gICAgICovXG4gICAgdXJsQmFjazogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEVuZHBvaW50IHVzYWRvIHBlbG8gdGVtcGxhdGUgcGFyYSByZWFsaXphciB1bSBQT1NULiBRdWFuZG8gcHJlZW5jaGlkbywgbyBtw6l0b2RvIGBwLXN1Ym1pdGAgc2Vyw6EgaWdub3JhZG8gZSBvIGNvbXBvbmVudGUgYWRxdWlyaXLDoVxuICAgICAqIGF1dG9tYXRpemHDp8OjbyBwYXJhIG8gcHJvY2Vzc28gZGUgY2FkYXN0cm8vdHJvY2EgZGUgc2VuaGEuXG4gICAgICpcbiAgICAgKiAjIyMgUHJvY2Vzc29cbiAgICAgKiBBbyBkaWdpdGFyIHVtIHZhbG9yIHbDoWxpZG8gbm9zIGNhbXBvcyBkZSBzZW5oYSBlIHByZXNzaW9uYXIgKipzYWx2YXIqKixcbiAgICAgKiBvIGNvbXBvbmVudGUgZmFyw6EgdW1hIHJlcXVpc2nDp8OjbyBgUE9TVGAgbmEgdXJsIGVzcGVjaWZpY2FkYSBuZXN0YSBwcm9wcmllZGFkZSBwYXNzYW5kbyBvIG9iamV0byBjb250ZW5kbyBvcyB2YWxvcmVzIGRlZmluaWRvcyBwZWxvXG4gICAgICogdXN1w6FyaW8uXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBib2R5IHtcbiAgICAgKiAgdG9rZW4/OiB0b2tlbixcbiAgICAgKiAgb2xkUGFzc3dvcmQ/OiBvbGRQYXNzd29yZCxcbiAgICAgKiAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogTyBjw7NkaWdvIGRlIHJlc3Bvc3RhIEhUVFAgZGUgc3RhdHVzIGVzcGVyYWRvIMOpIGAyMDRgLlxuICAgICAqXG4gICAgICogRW0gY2FzbyBkZSAqKnN1Y2Vzc28qKiwgc2Vyw6EgZXhpYmlkYSBhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gZGUgc2VuaGEgYWx0ZXJhZGEuXG4gICAgICpcbiAgICAgKiA+IE8gdG9rZW4gc2Vyw6EgaW5mb3JtYWRvIHBlbGEgcHJvcHJpZWRhZGUgYHAtdG9rZW5gZG8gY29tcG9uZW50ZSBvdSBwb3IgdW0gKnF1ZXJ5IHBhcmFtZXRlciogbmEgVVJMIGRvIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogKlByb2Nlc3NvIGZpbmFsaXphZG8uKlxuICAgICAqXG4gICAgICogX19fX19fX19fX19fX19fXG4gICAgICpcbiAgICAgKiAjIyMjIFByYXRpY2lkYWRlXG4gICAgICogQXMgaW5mb3JtYcOnw7VlcyBkbyBzZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8OjbyB0YW1iw6ltIHBvZGVtIHNlciB0cmFuc21pdGlkYXMgZGlyZXRhbWVudGUgcGVsYXMgY29uZmlndXJhw6fDo29zIGRlIHJvdGEgZSwgZGVzdGEgbWFuZWlyYSxcbiAgICAgKiBkaXNwZW5zYS1zZSBxdWFscXVlciBtZW7Dp8OjbyBlL291IGltcG9ydGHDp8OjbyBkbyBjb21wb25lbnRlIGBwby1wYWdlLWNoYW5nZS1wYXNzd29yZGAgbm8gcmVzdGFudGUgZGEgYXBsaWNhw6fDo28uIE8gZXhlbXBsbyBhYmFpeG9cbiAgICAgKiBleGVtcGxpZmljYSBhIGZvcm1hIGRpbsOibWljYSBjb20gYSBxdWFsIG8gdGVtcGxhdGUgZGUgdGVsYSBkZSB0cm9jYSBkZSBzZW5oYSBwb2RlIHNlciBnZXJhZG8gYW8gbmF2ZWdhciBwYXJhIHJvdGEgYC9jaGFuZ2UtcGFzc3dvcmRgLCBlXG4gICAgICogdGFtYsOpbSBjb21vIGVsZSBzZSBjb211bmljYSBjb20gbyBzZXJ2acOnbyBwYXJhIGVmZXR1YcOnw6NvIGRvIHByb2Nlc3NvIGRlIHRyb2NhIGRlIHNlbmhhIGRvIHVzdcOhcmlvIGUgc29saWNpdGHDp8OjbyBkZSBub3ZhIHNlbmhhLlxuICAgICAqIEJhc3RhIGRlZmluaXIgbmFzIGNvbmZpZ3VyYcOnw7VlcyBkZSByb3RhOlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgIGltcG9ydCB7IFBvTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZSwgUG9QYWdlQ2hhbmdlUGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICdAcG8tdWkvbmctdGVtcGxhdGVzJztcbiAgICAgKlxuICAgICAqICAgLi4uXG4gICAgICogICBjb25zdCByb3V0ZXM6IFJvdXRlcyA9IFtcbiAgICAgKiAgICAge1xuICAgICAqICAgICAgIHBhdGg6ICdjaGFuZ2UtcGFzc3dvcmQnLCBjb21wb25lbnQ6IFBvUGFnZUNoYW5nZVBhc3N3b3JkQ29tcG9uZW50LCBkYXRhOiB7XG4gICAgICogICAgICAgICBzZXJ2aWNlQXBpOiAnaHR0cHM6Ly9wby11aS5pby9zYW1wbGUvYXBpL25ldy1wYXNzd29yZCcsXG4gICAgICogICAgICAgICByZWNvdmVyeToge1xuICAgICAqICAgICAgICAgICB1cmw6ICdodHRwczovL3BvLXVpLmlvL3NhbXBsZS9hcGkvdXNlcnMnLFxuICAgICAqICAgICAgICAgICB0eXBlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuQWxsLFxuICAgICAqICAgICAgICAgICBjb250YWN0TWFpbDogJ2Rldi5wb0Bwby11aS5jb20nLFxuICAgICAqICAgICAgICAgICBwaG9uZU1hc2s6ICc5LTk5OS05OTktOTk5OSdcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKiAgICAgLi4uXG4gICAgICogICBdO1xuICAgICAqXG4gICAgICogICBATmdNb2R1bGUoe1xuICAgICAqICAgICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKV0sXG4gICAgICogICAgIGV4cG9ydHM6IFtSb3V0ZXJNb2R1bGVdXG4gICAgICogICB9KVxuICAgICAqICAgZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUgeyB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqIE8gbWV0YWRhZG8gYHNlcnZpY2VBcGlgIGRldmUgc2VyIGEgKip1cmwqKiBwYXJhIHJlcXVpc2nDp8OjbyBkb3MgcmVjdXJzb3MgZGUgdHJvY2EgZGUgc2VuaGEuIEUgYHJlY292ZXJ5YCDDqSBhIGludGVyZmFjZVxuICAgICAqIGBQb1BhZ2VDaGFuZ2VQYXNzd29yZFJlY292ZXJ5YCByZXNwb25zw6F2ZWwgcGVsYXMgZXNwZWNpZmljYcOnw7VlcyBjb250aWRhcyBuYSBtb2RhbCBkZSByZWN1cGVyYcOnw6NvIGRlIHNlbmhhLlxuICAgICAqXG4gICAgICogPiDDiSBlc3NlbmNpYWwgcXVlIHNpZ2EgYSBub21lbmNsYXR1cmEgZG9zIGF0cmlidXRvcyBleGVtcGxpZmljYWRvcyBhY2ltYSBwYXJhIHN1YSBlZmV0aXZhIGZ1bmNpb25hbGlkYWRlLlxuICAgICAqXG4gICAgICovXG4gICAgdXJsTmV3UGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFVSTCBwYXJhIGEgYcOnw6NvIGRvIGJvdMOjbyBgRW50cmFyIG5vIHNpc3RlbWFgIGRhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gcXVlIGFwYXJlY2UgYXDDs3Mgc2FsdmFyIGEgc2VuaGEgb3Ugc2UgY2hhbWFkYSBwZWxvIG3DqXRvZG9cbiAgICAgKiBgb3BlbkNvbmZpcm1hdGlvbmAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgL2BcbiAgICAgKi9cbiAgICBzZXQgdXJsSG9tZSh2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgdXJsSG9tZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEZ1bsOnw6NvIGV4ZWN1dGFkYSBhbyBzdWJtZXRlciBvIGZvcm0gcGVsbyBib3TDo28gc2FsdmFyLlxuICAgICAqXG4gICAgICogQ2FzbyBkZWZpbmlkYSBlc3NhIGZ1bsOnw6NvLCBhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gbsOjbyBhcGFyZWNlLCBtYXMgcG9kZSBzZXIgY2hhbWFkYSBwZWxvXG4gICAgICogbcOpdG9kbyBgb3BlbkNvbmZpcm1hdGlvbmAuIEV4ZW1wbG86XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAVmlld0NoaWxkKFBvUGFnZUNoYW5nZVBhc3N3b3JkQ29tcG9uZW50KSBjaGFuZ2VQYXNzd29yZDogUG9QYWdlQ2hhbmdlUGFzc3dvcmRDb21wb25lbnQ7XG4gICAgICpcbiAgICAgKiBvblN1Ym1pdCgpIHtcbiAgICAgKiAgdGhpcy5jaGFuZ2VQYXNzd29yZC5vcGVuQ29uZmlybWF0aW9uKCk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPiBFc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIHNlIGZvciBkZWZpbmlkbyB2YWxvciBwYXJhIGEgcHJvcHJpZWRhZGUgYHAtdXJsLW5ldy1wYXNzd29yZGAuXG4gICAgICovXG4gICAgc3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhYnN0cmFjdCBuYXZpZ2F0ZVRvKHVybDogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==