import { ActivatedRoute, Router } from '@angular/router';
import { OnInit, OnDestroy } from '@angular/core';
import { PoDialogService, PoNotificationService, PoPageAction, PoTableAction, PoTableColumnSort } from '@po-ui/ng-components';
import { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageDynamicTableActions } from './interfaces/po-page-dynamic-table-actions.interface';
import { PoPageDynamicTableOptions } from './interfaces/po-page-dynamic-table-options.interface';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
import { PoPageDynamicTableActionsService } from './po-page-dynamic-table-actions.service';
import * as ɵngcc0 from '@angular/core';
export declare const poPageDynamicTableLiteralsDefault: {
    en: {
        pageAction: string;
        pageActionRemoveAll: string;
        tableActionView: string;
        tableActionEdit: string;
        tableActionDuplicate: string;
        tableActionDelete: string;
        confirmRemoveTitle: string;
        confirmRemoveMessage: string;
        confirmRemoveAllTitle: string;
        confirmRemoveAllMessage: string;
        loadDataErrorNotification: string;
        removeSuccessNotification: string;
        removeAllSuccessNotification: string;
    };
    es: {
        pageAction: string;
        pageActionRemoveAll: string;
        tableActionView: string;
        tableActionEdit: string;
        tableActionDuplicate: string;
        tableActionDelete: string;
        confirmRemoveTitle: string;
        confirmRemoveMessage: string;
        confirmRemoveAllTitle: string;
        confirmRemoveAllMessage: string;
        loadDataErrorNotification: string;
        removeSuccessNotification: string;
        removeAllSuccessNotification: string;
    };
    pt: {
        pageAction: string;
        pageActionRemoveAll: string;
        tableActionView: string;
        tableActionEdit: string;
        tableActionDuplicate: string;
        tableActionDelete: string;
        confirmRemoveTitle: string;
        confirmRemoveMessage: string;
        confirmRemoveAllTitle: string;
        confirmRemoveAllMessage: string;
        loadDataErrorNotification: string;
        removeSuccessNotification: string;
        removeAllSuccessNotification: string;
    };
};
/**
 * @docsExtends PoPageDynamicListBaseComponent
 *
 * @description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post
 *   }
 * }
 *
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ],
 *   keepFilters: true
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-table-basic" title="PO Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="PO Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
export declare class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent implements OnInit, OnDestroy {
    private router;
    private activatedRoute;
    private poDialogService;
    private poNotification;
    private poPageDynamicService;
    private poPageCustomizationService;
    private poPageDynamicTableActionsService;
    private _actions;
    private _pageActions;
    private _tableActions;
    private page;
    private params;
    private sortedColumn;
    private subscriptions;
    hasNext: boolean;
    items: any[];
    literals: any;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicTableOptions`,
     * onde o usuário poderá customizar novos campos, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicTableOptions {
     * return {
     *   actions:
     *     { new: 'new', edit: 'edit/:id', remove: true },
     *   fields: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     */
    onLoad: string | (() => PoPageDynamicTableOptions);
    /**
     * @optional
     *
     * @description
     *
     * Ações da página e da tabela.
     */
    set actions(value: PoPageDynamicTableActions);
    get actions(): PoPageDynamicTableActions;
    /**
     * @optional
     *
     * @description
     *
     * Mantém na modal de `Busca Avançada` os valores preenchidos do último filtro realizado pelo usuário.
     *
     * @default `false`
     */
    keepFilters: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
     *
     * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
     * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
     * rápida também na lista de `disclaimers` a aplicando uma nova busca com a concatenação.
     *
     * Por exemplo, com os seguintes filtros aplicados:
     *   - filtro avançado: `{ name: 'Mike', age: '12' }`
     *   - filtro rápido: `{ search: 'paper' }`
     *
     * A requisição dos dados na API ficará com os parâmetros:
     * ```
     * page=1&pageSize=10&name=Mike&age=12&search=paper
     * ```
     *
     * @default `false`
     */
    concatFilters: boolean;
    constructor(router: Router, activatedRoute: ActivatedRoute, poDialogService: PoDialogService, poNotification: PoNotificationService, poPageDynamicService: PoPageDynamicService, poPageCustomizationService: PoPageCustomizationService, poPageDynamicTableActionsService: PoPageDynamicTableActionsService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onAdvancedSearch(filter: any): void;
    onChangeDisclaimers(disclaimers: any): void;
    onQuickSearch(termTypedInQuickSearch: any): void;
    onSort(sortedColumn: PoTableColumnSort): void;
    showMore(): void;
    get hasActionRemoveAll(): boolean;
    get pageActions(): PoPageAction[];
    get tableActions(): PoTableAction[];
    private confirmRemove;
    private confirmRemoveAll;
    private formatUniqueKey;
    private getOrderParam;
    private loadData;
    private getMetadata;
    private navigateTo;
    private openDetail;
    private executeDetail;
    private getPathFromNewUrl;
    private openDuplicate;
    private executeDuplicate;
    private openEdit;
    private executeEditAction;
    private openEditUrl;
    private modifyUITableItem;
    private openNew;
    private executeNew;
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'po' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|po
     */
    private remove;
    private deleteAction;
    private removeFromUI;
    private removeAll;
    private getSelectedItemsKeysToRemove;
    private returnResourcesKeys;
    private deleteAllAction;
    private removeLocalItems;
    private resolveUrl;
    private setPageActions;
    private setRemoveAllAction;
    private disableRemoveAll;
    private setTableActions;
    private loadDataFromAPI;
    private getInitialValuesFromFilter;
    private loadOptionsOnInitialize;
    private getPoDynamicPageOptions;
    private showRemove;
    private updateFilterValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageDynamicTableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoPageDynamicTableComponent, "po-page-dynamic-table", never, { "keepFilters": "p-keep-filters"; "concatFilters": "p-concat-filters"; "actions": "p-actions"; "onLoad": "p-load"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,