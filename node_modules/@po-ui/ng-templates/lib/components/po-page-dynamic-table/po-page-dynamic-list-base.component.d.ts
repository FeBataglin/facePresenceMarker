import { PoBreadcrumb } from '@po-ui/ng-components';
import { PoPageDynamicTableFilters } from './interfaces/po-page-dynamic-table-filters.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoPageDynamicListBaseComponent {
    private _autoRouter;
    private _columns;
    private _duplicates;
    private _fields;
    private _filters;
    private _keys;
    /**
     * @optional
     *
     * @description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
     *
     * As rotas criadas serão baseadas na propriedade `p-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * @default false
     */
    set autoRouter(value: boolean);
    get autoRouter(): boolean;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb?: PoBreadcrumb;
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na tabela e busca avançada.
     *
     *
     * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
     */
    set fields(fields: Array<PoPageDynamicTableFilters>);
    get fields(): Array<PoPageDynamicTableFilters>;
    /** Endpoint da API dos recursos que serão exibidos. */
    /**
     * @description
     *
     * Endpoint usado pelo template para requisição dos recursos que serão exibidos.
     *
     * Ao realizar requisições de busca, podem ser enviados os parâmetros (caso possuam valor): `page`, `pageSize`, `search` e `order`.
     *
     * Caso a coluna estiver ordenada descendentemente será enviada da seguinte forma: `-name`, se for ordenada
     * ascendentemente será enviada apenas com o nome da coluna, por exemplo: `name`.
     *
     * Exemplo de uma requisição de busca:
     *
     * > `GET {end-point}/{resource}?page=1&pageSize=10&search=components&order=-name`
     *
     * Caso a ação `remove` estiver configurada, será feito uma requisição de exclusão nesse mesmo endpoint passando os campos
     * setados como `key: true`.
     *
     * > `DELETE {end-point}/{keys}`
     *
     * ```
     *  <po-page-dynamic-table
     *    [p-actions]="{ remove: true }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-table>
     * ```
     *
     * Resquisição disparada, onde a propriedade `id` é igual a 2:
     *
     * ```
     *  DELETE /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Para a ação `removeAll`, será feito uma requisição de exclusão em lote para esse mesmo endpoint passando, uma lista
     * de objetos com os campos setados como `key: true` via `payload`.
     *
     * > `DELETE {end-point}`
     *
     * > `Payload: [ {key}, {key} ... {key} ]`
     *
     * ```
     *  <po-page-dynamic-table
     *    [p-actions]="{ removeAll: true }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-table>
     * ```
     *
     * Resquisição disparada, onde foram selecionados 3 itens para serem removidos:
     *
     * ```
     *  DELETE /api/po-samples/v1/people HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * [{"id":2},{"id":4},{"id":5}]
     * ```
     *
     * > Caso esteja usando metadados com o template, será disparado uma requisição na inicialização do template para buscar
     * > os metadados da página passando o tipo do metadado esperado e a versão cacheada pelo browser.
     * >
     * > `GET {end-point}/metadata?type=list&version={version}`
     */
    serviceApi: string;
    /** Título da página. */
    title: string;
    set columns(value: any[]);
    get columns(): any[];
    get duplicates(): any[];
    get filters(): any[];
    get keys(): any[];
    private setFieldsProperties;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageDynamicListBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPageDynamicListBaseComponent, never, never, { "breadcrumb": "p-breadcrumb"; "autoRouter": "p-auto-router"; "fields": "p-fields"; "serviceApi": "p-service-api"; "title": "p-title"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLWxpc3QtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcGFnZS1keW5hbWljLWxpc3QtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUZpbHRlcnMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWZpbHRlcnMuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUGFnZUR5bmFtaWNMaXN0QmFzZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfYXV0b1JvdXRlcjtcbiAgICBwcml2YXRlIF9jb2x1bW5zO1xuICAgIHByaXZhdGUgX2R1cGxpY2F0ZXM7XG4gICAgcHJpdmF0ZSBfZmllbGRzO1xuICAgIHByaXZhdGUgX2ZpbHRlcnM7XG4gICAgcHJpdmF0ZSBfa2V5cztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQ3JpYSBhdXRvbWF0aWNhbWVudGUgYXMgcm90YXMgZGUgZWRpw6fDo28gKG5vdm8vZHVwbGljYXRlKSBlIGRldGFsaGVzIGNhc28gc2VqYW0gZGVmaW5pZGFzIGHDp8O1ZXMgbmEgcHJvcHJpZWRhZGUgYHAtYWN0aW9uc2BcbiAgICAgKlxuICAgICAqIEFzIHJvdGFzIGNyaWFkYXMgc2Vyw6NvIGJhc2VhZGFzIG5hIHByb3ByaWVkYWRlIGBwLWFjdGlvbnNgLlxuICAgICAqXG4gICAgICogPiBQYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIG7Do28gcG9kZSBoYXZlciBuZW5odW1hIHJvdGEgY29yaW5nYSAoYCoqYCkgZXNwZWNpZmljYWRhLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBzZXQgYXV0b1JvdXRlcih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGF1dG9Sb3V0ZXIoKTogYm9vbGVhbjtcbiAgICAvKiogT2JqZXRvIGNvbSBwcm9wcmllZGFkZXMgZG8gYnJlYWRjcnVtYi4gKi9cbiAgICBicmVhZGNydW1iPzogUG9CcmVhZGNydW1iO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBMaXN0YSBkb3MgY2FtcG9zIHVzYWRvcyBuYSB0YWJlbGEgZSBidXNjYSBhdmFuw6dhZGEuXG4gICAgICpcbiAgICAgKlxuICAgICAqID4gQ2FzbyBuw6NvIHNlamEgZGVmaW5pZG8gZmllbGRzIGEgdGFiZWxhIGFzc3VtaXLDoSBvIGNvbXBvcnRhbWVudG8gcGFkcsOjby5cbiAgICAgKi9cbiAgICBzZXQgZmllbGRzKGZpZWxkczogQXJyYXk8UG9QYWdlRHluYW1pY1RhYmxlRmlsdGVycz4pO1xuICAgIGdldCBmaWVsZHMoKTogQXJyYXk8UG9QYWdlRHluYW1pY1RhYmxlRmlsdGVycz47XG4gICAgLyoqIEVuZHBvaW50IGRhIEFQSSBkb3MgcmVjdXJzb3MgcXVlIHNlcsOjbyBleGliaWRvcy4gKi9cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEVuZHBvaW50IHVzYWRvIHBlbG8gdGVtcGxhdGUgcGFyYSByZXF1aXNpw6fDo28gZG9zIHJlY3Vyc29zIHF1ZSBzZXLDo28gZXhpYmlkb3MuXG4gICAgICpcbiAgICAgKiBBbyByZWFsaXphciByZXF1aXNpw6fDtWVzIGRlIGJ1c2NhLCBwb2RlbSBzZXIgZW52aWFkb3Mgb3MgcGFyw6JtZXRyb3MgKGNhc28gcG9zc3VhbSB2YWxvcik6IGBwYWdlYCwgYHBhZ2VTaXplYCwgYHNlYXJjaGAgZSBgb3JkZXJgLlxuICAgICAqXG4gICAgICogQ2FzbyBhIGNvbHVuYSBlc3RpdmVyIG9yZGVuYWRhIGRlc2NlbmRlbnRlbWVudGUgc2Vyw6EgZW52aWFkYSBkYSBzZWd1aW50ZSBmb3JtYTogYC1uYW1lYCwgc2UgZm9yIG9yZGVuYWRhXG4gICAgICogYXNjZW5kZW50ZW1lbnRlIHNlcsOhIGVudmlhZGEgYXBlbmFzIGNvbSBvIG5vbWUgZGEgY29sdW5hLCBwb3IgZXhlbXBsbzogYG5hbWVgLlxuICAgICAqXG4gICAgICogRXhlbXBsbyBkZSB1bWEgcmVxdWlzacOnw6NvIGRlIGJ1c2NhOlxuICAgICAqXG4gICAgICogPiBgR0VUIHtlbmQtcG9pbnR9L3tyZXNvdXJjZX0/cGFnZT0xJnBhZ2VTaXplPTEwJnNlYXJjaD1jb21wb25lbnRzJm9yZGVyPS1uYW1lYFxuICAgICAqXG4gICAgICogQ2FzbyBhIGHDp8OjbyBgcmVtb3ZlYCBlc3RpdmVyIGNvbmZpZ3VyYWRhLCBzZXLDoSBmZWl0byB1bWEgcmVxdWlzacOnw6NvIGRlIGV4Y2x1c8OjbyBuZXNzZSBtZXNtbyBlbmRwb2ludCBwYXNzYW5kbyBvcyBjYW1wb3NcbiAgICAgKiBzZXRhZG9zIGNvbW8gYGtleTogdHJ1ZWAuXG4gICAgICpcbiAgICAgKiA+IGBERUxFVEUge2VuZC1wb2ludH0ve2tleXN9YFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIDxwby1wYWdlLWR5bmFtaWMtdGFibGVcbiAgICAgKiAgICBbcC1hY3Rpb25zXT1cInsgcmVtb3ZlOiB0cnVlIH1cIlxuICAgICAqICAgIFtwLWZpZWxkc109XCJbIHsgcHJvcGVydHk6ICdpZCcsIGtleTogdHJ1ZSB9IF1cIlxuICAgICAqICAgIHAtc2VydmljZT1cIi9hcGkvcG8tc2FtcGxlcy92MS9wZW9wbGVcIlxuICAgICAqICAgIC4uLj5cbiAgICAgKiAgPC9wby1wYWdlLWR5bmFtaWMtdGFibGU+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBSZXNxdWlzacOnw6NvIGRpc3BhcmFkYSwgb25kZSBhIHByb3ByaWVkYWRlIGBpZGAgw6kgaWd1YWwgYSAyOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIERFTEVURSAvYXBpL3BvLXNhbXBsZXMvdjEvcGVvcGxlLzIgSFRUUC8xLjFcbiAgICAgKiAgSG9zdDogbG9jYWxob3N0OjQwMDBcbiAgICAgKiAgQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICAgICAqICBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW5cbiAgICAgKiAgLi4uXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBQYXJhIGEgYcOnw6NvIGByZW1vdmVBbGxgLCBzZXLDoSBmZWl0byB1bWEgcmVxdWlzacOnw6NvIGRlIGV4Y2x1c8OjbyBlbSBsb3RlIHBhcmEgZXNzZSBtZXNtbyBlbmRwb2ludCBwYXNzYW5kbywgdW1hIGxpc3RhXG4gICAgICogZGUgb2JqZXRvcyBjb20gb3MgY2FtcG9zIHNldGFkb3MgY29tbyBga2V5OiB0cnVlYCB2aWEgYHBheWxvYWRgLlxuICAgICAqXG4gICAgICogPiBgREVMRVRFIHtlbmQtcG9pbnR9YFxuICAgICAqXG4gICAgICogPiBgUGF5bG9hZDogWyB7a2V5fSwge2tleX0gLi4uIHtrZXl9IF1gXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgPHBvLXBhZ2UtZHluYW1pYy10YWJsZVxuICAgICAqICAgIFtwLWFjdGlvbnNdPVwieyByZW1vdmVBbGw6IHRydWUgfVwiXG4gICAgICogICAgW3AtZmllbGRzXT1cIlsgeyBwcm9wZXJ0eTogJ2lkJywga2V5OiB0cnVlIH0gXVwiXG4gICAgICogICAgcC1zZXJ2aWNlPVwiL2FwaS9wby1zYW1wbGVzL3YxL3Blb3BsZVwiXG4gICAgICogICAgLi4uPlxuICAgICAqICA8L3BvLXBhZ2UtZHluYW1pYy10YWJsZT5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFJlc3F1aXNpw6fDo28gZGlzcGFyYWRhLCBvbmRlIGZvcmFtIHNlbGVjaW9uYWRvcyAzIGl0ZW5zIHBhcmEgc2VyZW0gcmVtb3ZpZG9zOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIERFTEVURSAvYXBpL3BvLXNhbXBsZXMvdjEvcGVvcGxlIEhUVFAvMS4xXG4gICAgICogIEhvc3Q6IGxvY2FsaG9zdDo0MDAwXG4gICAgICogIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAgICAgKiAgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluXG4gICAgICogIC4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogUmVxdWVzdCBwYXlsb2FkOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogW3tcImlkXCI6Mn0se1wiaWRcIjo0fSx7XCJpZFwiOjV9XVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogPiBDYXNvIGVzdGVqYSB1c2FuZG8gbWV0YWRhZG9zIGNvbSBvIHRlbXBsYXRlLCBzZXLDoSBkaXNwYXJhZG8gdW1hIHJlcXVpc2nDp8OjbyBuYSBpbmljaWFsaXphw6fDo28gZG8gdGVtcGxhdGUgcGFyYSBidXNjYXJcbiAgICAgKiA+IG9zIG1ldGFkYWRvcyBkYSBww6FnaW5hIHBhc3NhbmRvIG8gdGlwbyBkbyBtZXRhZGFkbyBlc3BlcmFkbyBlIGEgdmVyc8OjbyBjYWNoZWFkYSBwZWxvIGJyb3dzZXIuXG4gICAgICogPlxuICAgICAqID4gYEdFVCB7ZW5kLXBvaW50fS9tZXRhZGF0YT90eXBlPWxpc3QmdmVyc2lvbj17dmVyc2lvbn1gXG4gICAgICovXG4gICAgc2VydmljZUFwaTogc3RyaW5nO1xuICAgIC8qKiBUw610dWxvIGRhIHDDoWdpbmEuICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBzZXQgY29sdW1ucyh2YWx1ZTogYW55W10pO1xuICAgIGdldCBjb2x1bW5zKCk6IGFueVtdO1xuICAgIGdldCBkdXBsaWNhdGVzKCk6IGFueVtdO1xuICAgIGdldCBmaWx0ZXJzKCk6IGFueVtdO1xuICAgIGdldCBrZXlzKCk6IGFueVtdO1xuICAgIHByaXZhdGUgc2V0RmllbGRzUHJvcGVydGllcztcbn1cbiJdfQ==