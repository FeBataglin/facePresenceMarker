import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { InputBoolean, PoBreadcrumb, PoDynamicFormField, PoLanguageService, PoPageAction } from '@po-ui/ng-components';
import { poLocaleDefault } from '../../utils/util';
import { poAdvancedFiltersLiteralsDefault } from './po-advanced-filter/po-advanced-filter-base.component';
export var poPageDynamicSearchLiteralsDefault = {
    en: {
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    },
    es: {
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar'
    },
    pt: {
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    },
    ru: {
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    }
};
/**
 * @description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
var PoPageDynamicSearchBaseComponent = /** @class */ (function () {
    function PoPageDynamicSearchBaseComponent(languageService) {
        this._filters = [];
        /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`. */
        this.actions = [];
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        /**
         * @optional
         *
         * @description
         *
         * Mantém na busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         *
         * @default `false`
         */
        this.keepFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
         *
         * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
         * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
         * rápida também na lista de `disclaimers`.
         *
         * > Os valores que são emitidos no `p-quick-search` e no `p-advanced-search`
         * permanecem separados durante a emissão dos valores alterados. A concatenação
         * é apenas nos `disclaimers`.
         *
         * @default `false`
         */
        this.concatFilters = false;
        /**
         * @description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /** Evento disparado ao remover um ou todos os disclaimers pelo usuário. */
        this.changeDisclaimers = new EventEmitter();
        /** Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado. */
        this.quickSearch = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    Object.defineProperty(PoPageDynamicSearchBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-page-dynamic-search`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageDynamicSearchLiterals = {
         *    disclaimerGroupTitle: 'Filtros aplicados:',
         *    filterTitle: 'Filtro avançado',
         *    filterCancelLabel: 'Fechar',
         *    filterConfirmLabel: 'Aplicar',
         *    quickSearchLabel: 'Valor pesquisado:',
         *    searchPlaceholder: 'Pesquise aqui'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageDynamicSearchLiterals = {
         *    filterTitle: 'Filtro avançado'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-dynamic-search
         *   [p-literals]="customLiterals">
         * </po-page-dynamic-search>
         * ```
         *
         * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poPageDynamicSearchLiteralsDefault[poLocaleDefault]), poPageDynamicSearchLiteralsDefault[this.language]), value);
            }
            else {
                this._literals = poPageDynamicSearchLiteralsDefault[this.language];
            }
            this.setAdvancedFilterLiterals(this.literals);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicSearchBaseComponent.prototype, "filters", {
        get: function () {
            return this._filters;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
         */
        set: function (filters) {
            this._filters = Array.isArray(filters) ? __spread(filters) : [];
            if (JSON.stringify(this._filters) !== JSON.stringify(this.previousFilters)) {
                this.onChangeFilters(this.filters);
                this.previousFilters = __spread(this._filters);
            }
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicSearchBaseComponent.prototype.setAdvancedFilterLiterals = function (literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    };
    PoPageDynamicSearchBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    __decorate([
        Input('p-actions'),
        __metadata("design:type", Array)
    ], PoPageDynamicSearchBaseComponent.prototype, "actions", void 0);
    __decorate([
        Input('p-breadcrumb'),
        __metadata("design:type", Object)
    ], PoPageDynamicSearchBaseComponent.prototype, "breadcrumb", void 0);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoPageDynamicSearchBaseComponent.prototype, "literals", null);
    __decorate([
        Input('p-filters'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoPageDynamicSearchBaseComponent.prototype, "filters", null);
    __decorate([
        InputBoolean(),
        Input('p-keep-filters'),
        __metadata("design:type", Boolean)
    ], PoPageDynamicSearchBaseComponent.prototype, "keepFilters", void 0);
    __decorate([
        InputBoolean(),
        Input('p-concat-filters'),
        __metadata("design:type", Boolean)
    ], PoPageDynamicSearchBaseComponent.prototype, "concatFilters", void 0);
    __decorate([
        Input('p-load'),
        __metadata("design:type", Object)
    ], PoPageDynamicSearchBaseComponent.prototype, "onLoad", void 0);
    __decorate([
        Input('p-title'),
        __metadata("design:type", String)
    ], PoPageDynamicSearchBaseComponent.prototype, "title", void 0);
    __decorate([
        Output('p-advanced-search'),
        __metadata("design:type", EventEmitter)
    ], PoPageDynamicSearchBaseComponent.prototype, "advancedSearch", void 0);
    __decorate([
        Output('p-change-disclaimers'),
        __metadata("design:type", EventEmitter)
    ], PoPageDynamicSearchBaseComponent.prototype, "changeDisclaimers", void 0);
    __decorate([
        Output('p-quick-search'),
        __metadata("design:type", EventEmitter)
    ], PoPageDynamicSearchBaseComponent.prototype, "quickSearch", void 0);
    PoPageDynamicSearchBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [PoLanguageService])
    ], PoPageDynamicSearchBaseComponent);
    return PoPageDynamicSearchBaseComponent;
}());
export { PoPageDynamicSearchBaseComponent };
//# sourceMappingURL=data:application/json;base64,