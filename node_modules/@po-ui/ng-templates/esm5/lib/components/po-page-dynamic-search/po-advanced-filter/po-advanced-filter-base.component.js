import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { EventEmitter, Input, Output, ViewChild, Directive } from '@angular/core';
import { InputBoolean, PoDynamicFormField, PoLanguageService, PoModalAction, PoModalComponent } from '@po-ui/ng-components';
import { poLocaleDefault } from '../../../utils/util';
export var poAdvancedFiltersLiteralsDefault = {
    en: {
        title: 'Advanced search',
        cancelLabel: 'Cancel',
        confirmLabel: 'Apply filters'
    },
    es: {
        title: 'Búsqueda avanzada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    pt: {
        title: 'Busca avançada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    ru: {
        title: 'Расширенный поиск',
        cancelLabel: 'отменить',
        confirmLabel: 'Применить фильтры'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
var PoAdvancedFilterBaseComponent = /** @class */ (function () {
    function PoAdvancedFilterBaseComponent(languageService) {
        var _this = this;
        this._filters = [];
        this.filter = {};
        this.language = poLocaleDefault;
        this.primaryAction = {
            action: function () {
                var models = _this.getValuesFromForm();
                _this.searchEvent.emit(models);
                _this.poModal.close();
            },
            label: this.literals.confirmLabel
        };
        this.secondaryAction = {
            action: function () {
                _this.poModal.close();
            },
            label: this.literals.cancelLabel
        };
        /**
         * Mantém na modal de busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         */
        this.keepFilters = false;
        /** Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar. */
        this.searchEvent = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    Object.defineProperty(PoAdvancedFilterBaseComponent.prototype, "filters", {
        get: function () {
            return this._filters;
        },
        /**
         * Coleção de objetos que implementam a interface PoPageDynamicSearchFilters, para definição dos campos que serão criados
         * dinamicamente.
         */
        set: function (filters) {
            this._filters = Array.isArray(filters) ? __spread(filters) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoAdvancedFilterBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poAdvancedFiltersLiteralsDefault[this.language];
        },
        /** Objeto com as literais usadas no `po-advanced-filter`. */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign(__assign(__assign({}, poAdvancedFiltersLiteralsDefault[poLocaleDefault]), poAdvancedFiltersLiteralsDefault[this.language]), value);
            }
            else {
                this._literals = poAdvancedFiltersLiteralsDefault[this.language];
            }
            this.primaryAction.label = this.literals.confirmLabel;
            this.secondaryAction.label = this.literals.cancelLabel;
        },
        enumerable: true,
        configurable: true
    });
    // Retorna os models dos campos preenchidos
    PoAdvancedFilterBaseComponent.prototype.getValuesFromForm = function () {
        var _this = this;
        Object.keys(this.filter).forEach(function (property) {
            if (_this.filter[property] === undefined || _this.filter[property] === '') {
                delete _this.filter[property];
            }
        });
        return this.filter;
    };
    PoAdvancedFilterBaseComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    __decorate([
        ViewChild(PoModalComponent, { static: true }),
        __metadata("design:type", PoModalComponent)
    ], PoAdvancedFilterBaseComponent.prototype, "poModal", void 0);
    __decorate([
        Input('p-filters'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoAdvancedFilterBaseComponent.prototype, "filters", null);
    __decorate([
        InputBoolean(),
        Input('p-keep-filters'),
        __metadata("design:type", Boolean)
    ], PoAdvancedFilterBaseComponent.prototype, "keepFilters", void 0);
    __decorate([
        Input('p-literals'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoAdvancedFilterBaseComponent.prototype, "literals", null);
    __decorate([
        Output('p-search-event'),
        __metadata("design:type", Object)
    ], PoAdvancedFilterBaseComponent.prototype, "searchEvent", void 0);
    PoAdvancedFilterBaseComponent = __decorate([
        Directive(),
        __metadata("design:paramtypes", [PoLanguageService])
    ], PoAdvancedFilterBaseComponent);
    return PoAdvancedFilterBaseComponent;
}());
export { PoAdvancedFilterBaseComponent };
//# sourceMappingURL=data:application/json;base64,