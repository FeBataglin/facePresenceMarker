import { __assign, __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { ActivatedRoute, Route, Router } from '@angular/router';
import { Component, Input } from '@angular/core';
import { Subscription, EMPTY, concat, of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { InputBoolean, PoDialogConfirmOptions, PoDialogService, PoNotificationService, PoPageAction, PoTableAction, PoTableColumnSort, PoTableColumnSortType } from '@po-ui/ng-components';
import * as util from '../../utils/util';
import { PoPageDynamicDetailComponent } from '../po-page-dynamic-detail/po-page-dynamic-detail.component';
import { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
import { PoPageDynamicTableActionsService } from './po-page-dynamic-table-actions.service';
export var poPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * @docsExtends PoPageDynamicListBaseComponent
 *
 * @description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados utilizando o método HTTP Get
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados utilizando o método HTTP Post
 *   }
 * }
 *
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ],
 *   keepFilters: true
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-table-basic" title="PO Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="PO Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
var PoPageDynamicTableComponent = /** @class */ (function (_super) {
    __extends(PoPageDynamicTableComponent, _super);
    function PoPageDynamicTableComponent(router, activatedRoute, poDialogService, poNotification, poPageDynamicService, poPageCustomizationService, poPageDynamicTableActionsService) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.poDialogService = poDialogService;
        _this.poNotification = poNotification;
        _this.poPageDynamicService = poPageDynamicService;
        _this.poPageCustomizationService = poPageCustomizationService;
        _this.poPageDynamicTableActionsService = poPageDynamicTableActionsService;
        _this._actions = {};
        _this._pageActions = [];
        _this._tableActions = [];
        _this.page = 1;
        _this.params = {};
        _this.subscriptions = new Subscription();
        _this.hasNext = false;
        _this.items = [];
        _this.literals = __assign(__assign({}, poPageDynamicTableLiteralsDefault[util.poLocaleDefault]), poPageDynamicTableLiteralsDefault[util.browserLanguage()]);
        /**
         * @optional
         *
         * @description
         *
         * Mantém na modal de `Busca Avançada` os valores preenchidos do último filtro realizado pelo usuário.
         *
         * @default `false`
         */
        _this.keepFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
         *
         * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
         * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
         * rápida também na lista de `disclaimers` a aplicando uma nova busca com a concatenação.
         *
         * Por exemplo, com os seguintes filtros aplicados:
         *   - filtro avançado: `{ name: 'Mike', age: '12' }`
         *   - filtro rápido: `{ search: 'paper' }`
         *
         * A requisição dos dados na API ficará com os parâmetros:
         * ```
         * page=1&pageSize=10&name=Mike&age=12&search=paper
         * ```
         *
         * @default `false`
         */
        _this.concatFilters = false;
        return _this;
    }
    Object.defineProperty(PoPageDynamicTableComponent.prototype, "actions", {
        get: function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ações da página e da tabela.
         */
        set: function (value) {
            this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
            this.setPageActions(this.actions);
            this.setRemoveAllAction();
            this.setTableActions(this.actions);
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicTableComponent.prototype.ngOnInit = function () {
        this.loadDataFromAPI();
    };
    PoPageDynamicTableComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    PoPageDynamicTableComponent.prototype.onAdvancedSearch = function (filter) {
        this.subscriptions.add(this.loadData(__assign({ page: 1 }, filter)).subscribe());
        this.params = filter;
        if (this.keepFilters) {
            this.updateFilterValue(filter);
        }
    };
    PoPageDynamicTableComponent.prototype.onChangeDisclaimers = function (disclaimers) {
        var filter = {};
        disclaimers.forEach(function (disclaimer) {
            filter[disclaimer.property] = disclaimer.value;
        });
        this.onAdvancedSearch(filter);
    };
    PoPageDynamicTableComponent.prototype.onQuickSearch = function (termTypedInQuickSearch) {
        var quickSearchParam = termTypedInQuickSearch ? { search: termTypedInQuickSearch } : {};
        this.params = this.concatFilters ? __assign(__assign({}, this.params), quickSearchParam) : __assign({}, quickSearchParam);
        this.subscriptions.add(this.loadData(termTypedInQuickSearch ? __assign({ page: 1 }, this.params) : undefined).subscribe());
    };
    PoPageDynamicTableComponent.prototype.onSort = function (sortedColumn) {
        this.sortedColumn = sortedColumn;
    };
    PoPageDynamicTableComponent.prototype.showMore = function () {
        this.subscriptions.add(this.loadData(__assign({ page: ++this.page }, this.params)).subscribe());
    };
    Object.defineProperty(PoPageDynamicTableComponent.prototype, "hasActionRemoveAll", {
        get: function () {
            return !!this.actions.removeAll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicTableComponent.prototype, "pageActions", {
        get: function () {
            return __spread(this._pageActions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicTableComponent.prototype, "tableActions", {
        get: function () {
            return this._tableActions;
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicTableComponent.prototype.confirmRemove = function (actionRemove, actionBeforeRemove, item) {
        var confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item, actionRemove, actionBeforeRemove)
        };
        this.poDialogService.confirm(confirmOptions);
    };
    PoPageDynamicTableComponent.prototype.confirmRemoveAll = function (actionRemoveAll, actionBeforeRemoveAll) {
        var confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this, actionRemoveAll, actionBeforeRemoveAll)
        };
        this.poDialogService.confirm(confirmOptions);
    };
    PoPageDynamicTableComponent.prototype.formatUniqueKey = function (item) {
        var keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    };
    PoPageDynamicTableComponent.prototype.getOrderParam = function (sortedColumn) {
        if (sortedColumn === void 0) { sortedColumn = { type: undefined }; }
        var column = sortedColumn.column, type = sortedColumn.type;
        if (!column) {
            return {};
        }
        if (type === PoTableColumnSortType.Descending) {
            return { order: "-" + column.property };
        }
        return { order: "" + column.property };
    };
    PoPageDynamicTableComponent.prototype.loadData = function (params) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (!this.serviceApi) {
            this.poNotification.error(this.literals.loadDataErrorNotification);
            return EMPTY;
        }
        var orderParam = this.getOrderParam(this.sortedColumn);
        var defaultParams = { page: 1, pageSize: 10 };
        var fullParams = __assign(__assign(__assign({}, defaultParams), params), orderParam);
        return this.poPageDynamicService.getResources(fullParams).pipe(tap(function (response) {
            _this.items = fullParams.page === 1 ? response.items : __spread(_this.items, response.items);
            _this.page = fullParams.page;
            _this.hasNext = response.hasNext;
        }));
    };
    PoPageDynamicTableComponent.prototype.getMetadata = function (serviceApiFromRoute, onLoad) {
        var _this = this;
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata().pipe(tap(function (response) {
                _this.autoRouter = response.autoRouter || _this.autoRouter;
                _this.actions = response.actions || _this.actions;
                _this.breadcrumb = response.breadcrumb || _this.breadcrumb;
                _this.fields = response.fields || _this.fields;
                _this.title = response.title || _this.title;
            }), switchMap(function () { return _this.loadOptionsOnInitialize(onLoad); }));
        }
        return this.loadOptionsOnInitialize(onLoad);
    };
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    PoPageDynamicTableComponent.prototype.navigateTo = function (route, forceStopAutoRouter) {
        var _this = this;
        if (forceStopAutoRouter === void 0) { forceStopAutoRouter = false; }
        this.router.navigate([route.url || route.path], { queryParams: route.params }).catch(function () {
            if (forceStopAutoRouter || !_this.autoRouter) {
                return;
            }
            _this.router.config.unshift({
                path: route.path,
                component: route.component,
                data: { serviceApi: _this.serviceApi, autoRouter: true }
            });
            _this.navigateTo(route, true);
        });
    };
    PoPageDynamicTableComponent.prototype.openDetail = function (action, item) {
        var _this = this;
        var id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDetail(this.actions.beforeDetail, id, item)
            .subscribe(function (beforeDetailResult) {
            return _this.executeDetail(action, beforeDetailResult, id, item);
        }));
    };
    PoPageDynamicTableComponent.prototype.executeDetail = function (action, beforeDetailResult, id, item) {
        var before = beforeDetailResult !== null && beforeDetailResult !== void 0 ? beforeDetailResult : {};
        var allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        var newUrl = before.newUrl;
        if (allowAction && action) {
            if (newUrl) {
                var path = this.getPathFromNewUrl(newUrl, id);
                return this.navigateTo({ path: path });
            }
            if (typeof action === 'string') {
                var url = this.resolveUrl(item, action);
                this.navigateTo({ path: action, url: url, component: PoPageDynamicDetailComponent });
            }
            else {
                action(id, item);
            }
        }
    };
    PoPageDynamicTableComponent.prototype.getPathFromNewUrl = function (newUrl, id) {
        if (newUrl.includes(':id')) {
            return newUrl.replace(/:id/g, id);
        }
        return newUrl;
    };
    PoPageDynamicTableComponent.prototype.openDuplicate = function (actionDuplicate, item) {
        var _this = this;
        var id = this.formatUniqueKey(item);
        var duplicates = util.removeKeysProperties(this.keys, util.mapObjectByProperties(item, this.duplicates));
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeDuplicate(this.actions.beforeDuplicate, id, duplicates)
            .subscribe(function (beforeDuplicateResult) {
            return _this.executeDuplicate(actionDuplicate, beforeDuplicateResult, duplicates);
        }));
    };
    PoPageDynamicTableComponent.prototype.executeDuplicate = function (actionDuplicate, beforeDuplicateResult, duplicates) {
        var _a;
        var before = beforeDuplicateResult !== null && beforeDuplicateResult !== void 0 ? beforeDuplicateResult : {};
        var allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        var beforeDuplicateResource = before.resource;
        var newAction = (_a = before.newUrl) !== null && _a !== void 0 ? _a : actionDuplicate;
        if (allowAction && actionDuplicate) {
            if (typeof beforeDuplicateResource === 'object' && beforeDuplicateResource !== null) {
                duplicates = util.removeKeysProperties(this.keys, beforeDuplicateResource);
            }
            if (typeof newAction === 'string') {
                return this.navigateTo({ path: newAction, params: { duplicate: JSON.stringify(duplicates) } });
            }
            return newAction(duplicates);
        }
    };
    PoPageDynamicTableComponent.prototype.openEdit = function (actionEdit, item) {
        var _this = this;
        var id = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeEdit(this.actions.beforeEdit, id, item)
            .pipe(switchMap(function (beforeEditResult) {
            return _this.executeEditAction(actionEdit, beforeEditResult, item, id);
        }))
            .subscribe());
    };
    PoPageDynamicTableComponent.prototype.executeEditAction = function (action, beforeEditResult, item, id) {
        var _a, _b;
        var newEditAction = (_a = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.newUrl) !== null && _a !== void 0 ? _a : action;
        var allowAction = (_b = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.allowAction) !== null && _b !== void 0 ? _b : true;
        if (!allowAction) {
            return EMPTY;
        }
        if (typeof newEditAction === 'string') {
            this.openEditUrl(newEditAction, item);
        }
        else {
            var updatedItem = newEditAction(id, item);
            if (typeof updatedItem === 'object' && updatedItem !== null) {
                this.modifyUITableItem(item, util.removeKeysProperties(this.keys, updatedItem));
            }
        }
        return EMPTY;
    };
    PoPageDynamicTableComponent.prototype.openEditUrl = function (path, item) {
        var url = this.resolveUrl(item, path);
        this.navigateTo({ path: path, url: url });
    };
    PoPageDynamicTableComponent.prototype.modifyUITableItem = function (currentItem, newItemValue) {
        var tableItem = this.items.findIndex(function (item) { return item === currentItem; });
        this.items[tableItem] = __assign(__assign({}, currentItem), newItemValue);
    };
    PoPageDynamicTableComponent.prototype.openNew = function (actionNew) {
        var _this = this;
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeNew(this.actions.beforeNew)
            .subscribe(function (beforeNewResult) { return _this.executeNew(actionNew, beforeNewResult); }));
    };
    PoPageDynamicTableComponent.prototype.executeNew = function (actionNew, beforeNewResult) {
        var before = beforeNewResult !== null && beforeNewResult !== void 0 ? beforeNewResult : {};
        var allowAction = typeof before.allowAction === 'boolean' ? before.allowAction : true;
        var newUrl = before.newUrl;
        if (allowAction && actionNew) {
            if (newUrl) {
                return this.navigateTo({ path: newUrl });
            }
            if (typeof actionNew === 'string') {
                return this.navigateTo({ path: actionNew });
            }
            return actionNew();
        }
    };
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'po' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|po
     */
    PoPageDynamicTableComponent.prototype.remove = function (item, actionRemove, actionBeforeRemove) {
        var _this = this;
        var uniqueKey = this.formatUniqueKey(item);
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemove(actionBeforeRemove, uniqueKey, item)
            .pipe(switchMap(function (beforeRemove) {
            return _this.deleteAction(item, actionRemove, beforeRemove);
        }))
            .subscribe());
    };
    PoPageDynamicTableComponent.prototype.deleteAction = function (item, actionRemove, beforeRemove) {
        var _this = this;
        var _a = beforeRemove || {}, allowAction = _a.allowAction, newUrl = _a.newUrl;
        var allow = allowAction !== null && allowAction !== void 0 ? allowAction : true;
        if (allow) {
            var uniqueKey = this.formatUniqueKey(item);
            var resourceToRemoveKey_1 = this.returnResourcesKeys([item]);
            if (typeof actionRemove === 'boolean' || newUrl) {
                return this.poPageDynamicService
                    .deleteResource(uniqueKey, newUrl)
                    .pipe(map(function () { return _this.removeFromUI(resourceToRemoveKey_1, _this.literals.removeSuccessNotification); }));
            }
            return of(actionRemove(uniqueKey, item)).pipe(tap(function (remove) {
                var removeItem = remove !== null && remove !== void 0 ? remove : false;
                _this.removeFromUI(resourceToRemoveKey_1, _this.literals.removeSuccessNotification, removeItem);
            }));
        }
        return of({});
    };
    PoPageDynamicTableComponent.prototype.removeFromUI = function (items, message, remove) {
        if (remove === void 0) { remove = true; }
        if (remove === true && (items === null || items === void 0 ? void 0 : items.length)) {
            this.removeLocalItems(items);
            this.poNotification.success(message);
        }
    };
    PoPageDynamicTableComponent.prototype.removeAll = function (actionRemoveAll, actionBeforeRemoveAll) {
        var _this = this;
        var originalResourcesKeys = this.getSelectedItemsKeysToRemove();
        this.subscriptions.add(this.poPageDynamicTableActionsService
            .beforeRemoveAll(actionBeforeRemoveAll, originalResourcesKeys)
            .pipe(switchMap(function (beforeRemove) {
            return _this.deleteAllAction(actionRemoveAll, beforeRemove, originalResourcesKeys);
        }))
            .subscribe());
    };
    PoPageDynamicTableComponent.prototype.getSelectedItemsKeysToRemove = function () {
        var resources = this.items.filter(function (item) { return item.$selected; });
        if (resources.length === 0) {
            return;
        }
        return this.returnResourcesKeys(resources);
    };
    PoPageDynamicTableComponent.prototype.returnResourcesKeys = function (resources) {
        return util.mapArrayByProperties(resources, this.keys);
    };
    PoPageDynamicTableComponent.prototype.deleteAllAction = function (actionRemoveAll, beforeRemoveAll, originalResources) {
        var _this = this;
        var _a = beforeRemoveAll !== null && beforeRemoveAll !== void 0 ? beforeRemoveAll : {}, allowAction = _a.allowAction, newUrl = _a.newUrl, resources = _a.resources;
        var allow = allowAction !== null && allowAction !== void 0 ? allowAction : true;
        var resourcestoDelete = resources !== null && resources !== void 0 ? resources : originalResources;
        if (allow && Array.isArray(resourcestoDelete)) {
            if (typeof actionRemoveAll === 'boolean' || newUrl) {
                return this.poPageDynamicService.deleteResources(resourcestoDelete, newUrl).pipe(tap(function () {
                    _this.removeFromUI(resourcestoDelete, _this.literals.removeAllSuccessNotification);
                }));
            }
            return of(actionRemoveAll(resourcestoDelete)).pipe(tap(function (removeItems) { return _this.removeFromUI(removeItems, _this.literals.removeSuccessNotification); }));
        }
        return of({});
    };
    PoPageDynamicTableComponent.prototype.removeLocalItems = function (itemsKeysToRemove) {
        var _this = this;
        if (itemsKeysToRemove === void 0) { itemsKeysToRemove = []; }
        if (itemsKeysToRemove.length) {
            this.items = this.items.filter(function (item) {
                var itemKey = _this.formatUniqueKey(item);
                return !itemsKeysToRemove.find(function (itemKeyToRemove) { return util.valuesFromObject(itemKeyToRemove).join('|') === itemKey; });
            });
        }
    };
    PoPageDynamicTableComponent.prototype.resolveUrl = function (item, path) {
        var uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    };
    PoPageDynamicTableComponent.prototype.setPageActions = function (actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new }
            ];
        }
    };
    PoPageDynamicTableComponent.prototype.setRemoveAllAction = function () {
        var action = this._actions;
        if (this.showRemove(action.removeAll)) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll,
                action: this.confirmRemoveAll.bind(this, action.removeAll, action.beforeRemoveAll),
                disabled: this.disableRemoveAll.bind(this)
            });
        }
    };
    PoPageDynamicTableComponent.prototype.disableRemoveAll = function () {
        return !this.getSelectedItemsKeysToRemove();
    };
    PoPageDynamicTableComponent.prototype.setTableActions = function (actions) {
        if (actions) {
            var visibleRemove = this.showRemove(actions.remove);
            this._tableActions = [
                {
                    action: this.openDetail.bind(this, actions.detail),
                    label: this.literals.tableActionView,
                    visible: !!this._actions.detail
                },
                {
                    action: this.openEdit.bind(this, actions.edit),
                    label: this.literals.tableActionEdit,
                    visible: !!this._actions.edit
                },
                {
                    action: this.openDuplicate.bind(this, actions.duplicate),
                    label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                {
                    action: this.confirmRemove.bind(this, actions.remove, actions.beforeRemove),
                    label: this.literals.tableActionDelete,
                    separator: true,
                    type: 'danger',
                    visible: visibleRemove
                }
            ];
        }
    };
    PoPageDynamicTableComponent.prototype.loadDataFromAPI = function () {
        var _a = this.activatedRoute.snapshot.data, serviceApiFromRoute = _a.serviceApi, serviceMetadataApi = _a.serviceMetadataApi, serviceLoadApi = _a.serviceLoadApi;
        var onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        var metadata$ = this.getMetadata(serviceApiFromRoute, onLoad);
        var data$ = this.loadData();
        var initialFilters = this.getInitialValuesFromFilter();
        if (Object.keys(initialFilters).length) {
            this.subscriptions.add(metadata$.subscribe());
        }
        else {
            this.subscriptions.add(concat(metadata$, data$).subscribe());
        }
    };
    PoPageDynamicTableComponent.prototype.getInitialValuesFromFilter = function () {
        var initialFilters = this.filters.reduce(function (result, item) {
            var _a;
            return Object.assign(result, (_a = {}, _a[item.property] = item.initValue, _a));
        }, {});
        Object.keys(initialFilters).forEach(function (key) {
            if (!initialFilters[key]) {
                delete initialFilters[key];
            }
        });
        return initialFilters;
    };
    PoPageDynamicTableComponent.prototype.loadOptionsOnInitialize = function (onLoad) {
        var _this = this;
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(function (responsePoOption) {
                return _this.poPageCustomizationService.changeOriginalOptionsToNewOptions(_this, responsePoOption);
            }));
        }
        return EMPTY;
    };
    PoPageDynamicTableComponent.prototype.getPoDynamicPageOptions = function (onLoad) {
        var originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title,
            keepFilters: this.keepFilters,
            concatFilters: this.concatFilters
        };
        var pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                },
                {
                    nameProp: 'keepFilters'
                },
                {
                    nameProp: 'concatFilters'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    };
    PoPageDynamicTableComponent.prototype.showRemove = function (actionRemove) {
        var action = actionRemove !== null && actionRemove !== void 0 ? actionRemove : false;
        if (typeof action === 'boolean') {
            return action;
        }
        return true;
    };
    PoPageDynamicTableComponent.prototype.updateFilterValue = function (filter) {
        return this.fields.map(function (item) {
            if (filter.hasOwnProperty(item.property)) {
                item.initValue = filter[item.property];
            }
        });
    };
    PoPageDynamicTableComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: PoDialogService },
        { type: PoNotificationService },
        { type: PoPageDynamicService },
        { type: PoPageCustomizationService },
        { type: PoPageDynamicTableActionsService }
    ]; };
    __decorate([
        Input('p-load'),
        __metadata("design:type", Object)
    ], PoPageDynamicTableComponent.prototype, "onLoad", void 0);
    __decorate([
        Input('p-actions'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoPageDynamicTableComponent.prototype, "actions", null);
    __decorate([
        InputBoolean(),
        Input('p-keep-filters'),
        __metadata("design:type", Boolean)
    ], PoPageDynamicTableComponent.prototype, "keepFilters", void 0);
    __decorate([
        InputBoolean(),
        Input('p-concat-filters'),
        __metadata("design:type", Boolean)
    ], PoPageDynamicTableComponent.prototype, "concatFilters", void 0);
    PoPageDynamicTableComponent = __decorate([
        Component({
            selector: 'po-page-dynamic-table',
            template: "<po-page-dynamic-search\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-filters]=\"filters\"\n  [p-keep-filters]=\"keepFilters\"\n  [p-concat-filters]=\"concatFilters\"\n  [p-title]=\"title\"\n  (p-advanced-search)=\"onAdvancedSearch($event)\"\n  (p-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (p-quick-search)=\"onQuickSearch($event)\"\n>\n  <po-table\n    p-sort=\"true\"\n    [p-actions]=\"tableActions\"\n    [p-checkbox]=\"hasActionRemoveAll\"\n    [p-columns]=\"columns\"\n    [p-items]=\"items\"\n    [p-show-more-disabled]=\"!hasNext\"\n    (p-show-more)=\"showMore()\"\n    (p-sort-by)=\"onSort($event)\"\n  >\n  </po-table>\n</po-page-dynamic-search>\n",
            providers: [PoPageDynamicService]
        }),
        __metadata("design:paramtypes", [Router,
            ActivatedRoute,
            PoDialogService,
            PoNotificationService,
            PoPageDynamicService,
            PoPageCustomizationService,
            PoPageDynamicTableActionsService])
    ], PoPageDynamicTableComponent);
    return PoPageDynamicTableComponent;
}(PoPageDynamicListBaseComponent));
export { PoPageDynamicTableComponent };
//# sourceMappingURL=data:application/json;base64,