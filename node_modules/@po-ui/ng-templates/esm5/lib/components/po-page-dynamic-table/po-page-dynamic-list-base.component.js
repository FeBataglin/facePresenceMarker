import { __decorate, __metadata, __read, __spread } from "tslib";
import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
var PoPageDynamicListBaseComponent = /** @class */ (function () {
    function PoPageDynamicListBaseComponent() {
        this._autoRouter = false;
        this._columns = [];
        this._duplicates = [];
        this._fields = [];
        this._filters = [];
        this._keys = [];
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
    }
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "autoRouter", {
        get: function () {
            return this._autoRouter;
        },
        /**
         * @optional
         *
         * @description
         *
         * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
         *
         * As rotas criadas serão baseadas na propriedade `p-actions`.
         *
         * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
         *
         * @default false
         */
        set: function (value) {
            this._autoRouter = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista dos campos usados na tabela e busca avançada.
         *
         *
         * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
         */
        set: function (fields) {
            this._fields = Array.isArray(fields) ? __spread(fields) : [];
            this.setFieldsProperties(this.fields);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        set: function (value) {
            this._columns = __spread(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "duplicates", {
        get: function () {
            return __spread(this._duplicates);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "filters", {
        get: function () {
            return __spread(this._filters);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicListBaseComponent.prototype, "keys", {
        get: function () {
            return __spread(this._keys);
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicListBaseComponent.prototype.setFieldsProperties = function (fields) {
        this._filters = fields.filter(function (field) { return field.filter === true; });
        this.columns = fields.filter(function (field) { return field.visible === undefined || field.visible === true; });
        this._keys = fields.filter(function (field) { return field.key === true; }).map(function (field) { return field.property; });
        this._duplicates = fields.filter(function (field) { return field.duplicate === true; }).map(function (field) { return field.property; });
    };
    __decorate([
        Input('p-auto-router'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoPageDynamicListBaseComponent.prototype, "autoRouter", null);
    __decorate([
        Input('p-breadcrumb'),
        __metadata("design:type", Object)
    ], PoPageDynamicListBaseComponent.prototype, "breadcrumb", void 0);
    __decorate([
        Input('p-fields'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoPageDynamicListBaseComponent.prototype, "fields", null);
    __decorate([
        Input('p-service-api'),
        __metadata("design:type", String)
    ], PoPageDynamicListBaseComponent.prototype, "serviceApi", void 0);
    __decorate([
        Input('p-title'),
        __metadata("design:type", String)
    ], PoPageDynamicListBaseComponent.prototype, "title", void 0);
    PoPageDynamicListBaseComponent = __decorate([
        Directive()
    ], PoPageDynamicListBaseComponent);
    return PoPageDynamicListBaseComponent;
}());
export { PoPageDynamicListBaseComponent };
//# sourceMappingURL=data:application/json;base64,