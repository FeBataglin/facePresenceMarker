import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, isExternalLink, isTypeof } from '../../utils/util';
/**
 * @description
 *
 * O componente `po-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `p-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/@po-ui/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 */
var PoPageChangePasswordBaseComponent = /** @class */ (function () {
    function PoPageChangePasswordBaseComponent() {
        this._hideCurrentPassword = false;
        this._requirements = [];
        this._urlHome = '/';
        /**
         * @optional
         *
         * @description
         *
         * URL para a ação de retorno da página.
         *
         * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
         * falsa.
         *
         * @default `/`
         */
        this.urlBack = '/';
        /**
         * @optional
         *
         * @description
         *
         * Função executada ao submeter o form pelo botão salvar.
         *
         * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
         * método `openConfirmation`. Exemplo:
         *
         * ```
         * @ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
         *
         * onSubmit() {
         *  this.changePassword.openConfirmation();
         * }
         *
         * ```
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
         */
        this.submit = new EventEmitter();
    }
    Object.defineProperty(PoPageChangePasswordBaseComponent.prototype, "hideCurrentPassword", {
        get: function () {
            return this._hideCurrentPassword;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo `Senha atual` para que o template seja para criação de senha.
         *
         * @default `false`
         */
        set: function (value) {
            this._hideCurrentPassword = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageChangePasswordBaseComponent.prototype, "recovery", {
        get: function () {
            return this._recovery;
        },
        /**
         * @optional
         *
         * @description
         *
         * URL para a ação do link `Esqueceu a senha`.
         *
         * A propriedade aceita os seguintes tipos:
         *
         * - **String**: informe uma url externa ou uma rota válida;
         * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
         * ```
         * <po-page-change-password>
         *      [recovery]="this.myFunc.bind(this)";
         * </po-page-change-password>
         * ```
         *
         * - **PoPageChangePasswordRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.
         *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
         *   **email** para contato e **máscara** do campo de telefone.
         *
         * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
         */
        set: function (value) {
            this._recovery = value;
            if (isTypeof(value, 'string')) {
                this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageChangePasswordBaseComponent.prototype, "requirements", {
        get: function () {
            return this._requirements;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de regras para criação e alteração de senha.
         */
        set: function (value) {
            this._requirements = value || [];
            this.showRequirements = this._requirements.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageChangePasswordBaseComponent.prototype, "urlHome", {
        get: function () {
            return this._urlHome;
        },
        /**
         * @optional
         *
         * @description
         *
         * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
         * `openConfirmation`.
         *
         * @default `/`
         */
        set: function (value) {
            this._urlHome = value;
            this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('p-hide-current-password'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoPageChangePasswordBaseComponent.prototype, "hideCurrentPassword", null);
    __decorate([
        Input('p-logo'),
        __metadata("design:type", String)
    ], PoPageChangePasswordBaseComponent.prototype, "logo", void 0);
    __decorate([
        Input('p-recovery'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoPageChangePasswordBaseComponent.prototype, "recovery", null);
    __decorate([
        Input('p-requirements'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoPageChangePasswordBaseComponent.prototype, "requirements", null);
    __decorate([
        Input('p-secondary-logo'),
        __metadata("design:type", String)
    ], PoPageChangePasswordBaseComponent.prototype, "secondaryLogo", void 0);
    __decorate([
        Input('p-token'),
        __metadata("design:type", String)
    ], PoPageChangePasswordBaseComponent.prototype, "token", void 0);
    __decorate([
        Input('p-url-back'),
        __metadata("design:type", String)
    ], PoPageChangePasswordBaseComponent.prototype, "urlBack", void 0);
    __decorate([
        Input('p-url-new-password'),
        __metadata("design:type", String)
    ], PoPageChangePasswordBaseComponent.prototype, "urlNewPassword", void 0);
    __decorate([
        Input('p-url-home'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoPageChangePasswordBaseComponent.prototype, "urlHome", null);
    __decorate([
        Output('p-submit'),
        __metadata("design:type", EventEmitter)
    ], PoPageChangePasswordBaseComponent.prototype, "submit", void 0);
    PoPageChangePasswordBaseComponent = __decorate([
        Directive()
    ], PoPageChangePasswordBaseComponent);
    return PoPageChangePasswordBaseComponent;
}());
export { PoPageChangePasswordBaseComponent };
//# sourceMappingURL=data:application/json;base64,