import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addZero, convertDateToISOExtended } from '../../utils/util';
var PoPageJobSchedulerService = /** @class */ (function () {
    function PoPageJobSchedulerService(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
    }
    PoPageJobSchedulerService.prototype.configServiceApi = function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
    };
    // Cria um recurso
    PoPageJobSchedulerService.prototype.createResource = function (resource) {
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post("" + this.endpoint, jobScheduler, { headers: this.headers });
    };
    PoPageJobSchedulerService.prototype.getHeadProcesses = function () {
        var headers = { 'X-PO-No-Error': 'true' };
        return this.http.head(this.endpoint + "/processes", { headers: headers });
    };
    // Busca parametros pelo processo id
    PoPageJobSchedulerService.prototype.getParametersByProcess = function (processId) {
        return this.http
            .get(this.endpoint + "/processes/" + processId + "/parameters", { headers: this.headers })
            .pipe(map(function (resource) { return resource.items; }));
    };
    // Busca um único recurso
    PoPageJobSchedulerService.prototype.getProcess = function (id) {
        return this.http.get(this.endpoint + "/processes/" + id, { headers: this.headers });
    };
    // Busca uma lista de processos
    PoPageJobSchedulerService.prototype.getProcesses = function (params) {
        if (params === void 0) { params = {}; }
        return this.http.get(this.endpoint + "/processes", { params: params });
    };
    // Busca um único recurso
    PoPageJobSchedulerService.prototype.getResource = function (id) {
        var _this = this;
        return this.http
            .get(this.endpoint + "/" + id, { headers: this.headers })
            .pipe(map(function (resource) { return _this.convertToJobSchedulerInternal(resource); }));
    };
    // Atualiza um recurso
    PoPageJobSchedulerService.prototype.updateResource = function (id, resource) {
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(this.endpoint + "/" + id, jobScheduler, { headers: this.headers });
    };
    PoPageJobSchedulerService.prototype.convertToJobScheduler = function (jobSchedulerInternal) {
        var jobScheduler = __assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution = this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    };
    PoPageJobSchedulerService.prototype.convertToJobSchedulerInternal = function (jobScheduler) {
        if (jobScheduler === void 0) { jobScheduler = {}; }
        var jobSchedulerInternal = __assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    };
    PoPageJobSchedulerService.prototype.convertToPeriodicity = function (value) {
        var newValue = {};
        var valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    };
    PoPageJobSchedulerService.prototype.convertToPeriodicityInternal = function (value) {
        if (value === void 0) { value = {}; }
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: addZero(value.monthly.hour) + ":" + addZero(value.monthly.minute),
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: addZero(value.daily.hour) + ":" + addZero(value.daily.minute)
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: addZero(value.weekly.hour) + ":" + addZero(value.weekly.minute),
                daysOfWeek: __spread(value.weekly.daysOfWeek)
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    };
    PoPageJobSchedulerService.prototype.getCurrentHour = function (date) {
        var hours = addZero(date.getHours());
        var minutes = addZero(date.getMinutes());
        return hours + ":" + minutes;
    };
    PoPageJobSchedulerService.prototype.getHourFirstExecution = function (firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    };
    PoPageJobSchedulerService.prototype.removeInvalidKeys = function (value, keys) {
        var invalidKeys = keys || [
            'periodicity',
            'hour',
            'minute',
            'day',
            'daysOfWeek',
            'dayOfMonth',
            'firstExecutionHour'
        ];
        Object.keys(value).forEach(function (key) {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        });
    };
    PoPageJobSchedulerService.prototype.replaceHourFirstExecution = function (date, time) {
        var firstExecutionDate = new Date(date);
        var timeSplited = time.split(':');
        var hours = parseInt(timeSplited[0], 10);
        var minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    };
    PoPageJobSchedulerService.prototype.returnValidExecutionParameter = function (parameter) {
        var newParameter = __assign({}, parameter);
        for (var key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    };
    PoPageJobSchedulerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoPageJobSchedulerService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoPageJobSchedulerService);
    return PoPageJobSchedulerService;
}());
export { PoPageJobSchedulerService };
//# sourceMappingURL=data:application/json;base64,