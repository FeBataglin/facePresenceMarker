import { __assign, __decorate, __metadata } from "tslib";
import { Input, Directive } from '@angular/core';
import { PoPageBlockedUserReason } from './enums/po-page-blocked-user-reason.enum';
var PoPageBlockedUserReasonDefault = PoPageBlockedUserReason.None;
var PoPageBlockedUserParamsDefault = { attempts: 5, days: 90, hours: 24 };
/**
 * @description
 *
 * O componente `po-page-blocked-user` é utilizado como template para tela de bloqueio de usuário.
 * É possível definir entre três tipos de telas para alertar o usuário sobre um eventual bloqueio de login.
 *
 * Cada modelo de bloqueio possui uma imagem e texto adequados à situação.
 * Os textos das telas são pré-definidos e imutáveis, porém,
 * é possível estipular parâmetros como dias, horas e tentativas de acesso esgotadas.
 *
 * Por fim, há propriedades para adição de telefone e/ou email para contato e também a definição para a url de retorno.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/@po-ui/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 *
 * _______________
 *
 * #### Praticidade
 * O `po-page-blocked-user`, assim como suas propriedades, pode também ser transmitido diretamente pelas configuraçãos de rota e,
 * desta maneira, dispensa-se qualquer menção e/ou importação no restante da aplicação. O exemplo abaixo exemplifica
 * a forma dinâmica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:
 *
 *
 * ```
 *   import { PoPageBlockedUserComponent, PoPageBlockedUserReason } from '@po-ui/ng-templates';
 *
 *   ...
 *   const routes: Routes = [
 *     {
 *       path: 'access-denied', component: PoPageBlockedUserComponent, data: {
 *         contactEmail: 'dev.po@po-ui.com',
 *         contactPhone: '0800 1234 000',
 *         reason: PoPageBlockedUserReason.ExpiredPassword,
 *         urlBack: '/home'
 *       }
 *     }
 *     ...
 *   ];
 *
 *   @NgModule({
 *     imports: [RouterModule.forRoot(routes)],
 *     exports: [RouterModule]
 *   })
 *   export class AppRoutingModule { }
 * ```
 *
 * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
 *
 */
var PoPageBlockedUserBaseComponent = /** @class */ (function () {
    function PoPageBlockedUserBaseComponent() {
        this._params = __assign({}, PoPageBlockedUserParamsDefault);
        this._reason = PoPageBlockedUserReason.None;
        this._urlBack = '/';
    }
    Object.defineProperty(PoPageBlockedUserBaseComponent.prototype, "params", {
        get: function () {
            return this._params;
        },
        /**
         * @optional
         *
         * @description
         *
         * Designação de valores usados para a customização da mensagem de bloqueio.
         * Confira abaixo os valores pré-definidos.
         *
         * ```
         *  const customLiterals: PoPageBlockedUserReasonParams = {
         *    attempts: 5,
         *    days: 90,
         *    hours: 24
         *  };
         * ```
         *
         * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
         *
         * > Veja os parâmetros customizáveis na interface `PoPageBlockedUserReasonParams`.
         *
         */
        set: function (value) {
            if (value instanceof Object) {
                var keys = Object.keys(value);
                var newParams_1 = __assign({}, PoPageBlockedUserParamsDefault);
                keys.forEach(function (key) {
                    newParams_1[key] = value[key];
                });
                this._params = newParams_1;
            }
            else {
                this._params = __assign({}, PoPageBlockedUserParamsDefault);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageBlockedUserBaseComponent.prototype, "reason", {
        get: function () {
            return this._reason;
        },
        /**
         * @optional
         *
         * @description
         *
         * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
         *
         * > Veja os valores válidos no *enum* `PoPageBlockedUserReason`.
         *
         * @default `PoPageBlockedUserReason.None`
         */
        set: function (value) {
            this._reason = Object.values(PoPageBlockedUserReason).includes(value)
                ? value
                : PoPageBlockedUserReasonDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageBlockedUserBaseComponent.prototype, "urlBack", {
        get: function () {
            return this._urlBack;
        },
        /**
         * @optional
         *
         * @description
         *
         * URL para a ação de retorno da página.
         *
         * @default `/`
         */
        set: function (url) {
            this._urlBack = url;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('p-contact-email'),
        __metadata("design:type", String)
    ], PoPageBlockedUserBaseComponent.prototype, "contactEmail", void 0);
    __decorate([
        Input('p-contact-phone'),
        __metadata("design:type", String)
    ], PoPageBlockedUserBaseComponent.prototype, "contactPhone", void 0);
    __decorate([
        Input('p-params'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoPageBlockedUserBaseComponent.prototype, "params", null);
    __decorate([
        Input('p-logo'),
        __metadata("design:type", String)
    ], PoPageBlockedUserBaseComponent.prototype, "logo", void 0);
    __decorate([
        Input('p-reason'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoPageBlockedUserBaseComponent.prototype, "reason", null);
    __decorate([
        Input('p-secondary-logo'),
        __metadata("design:type", String)
    ], PoPageBlockedUserBaseComponent.prototype, "secondaryLogo", void 0);
    __decorate([
        Input('p-url-back'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], PoPageBlockedUserBaseComponent.prototype, "urlBack", null);
    PoPageBlockedUserBaseComponent = __decorate([
        Directive()
    ], PoPageBlockedUserBaseComponent);
    return PoPageBlockedUserBaseComponent;
}());
export { PoPageBlockedUserBaseComponent };
//# sourceMappingURL=data:application/json;base64,