import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { Component, Input } from '@angular/core';
import { Route, Router, ActivatedRoute } from '@angular/router';
import { concat, EMPTY, throwError, of } from 'rxjs';
import { tap, catchError, map, switchMap } from 'rxjs/operators';
import * as util from '../../utils/util';
import { PoBreadcrumb, PoPageAction, PoDialogService, PoDialogConfirmOptions, PoNotificationService } from '@po-ui/ng-components';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageDynamicDetailActionsService } from './po-page-dynamic-detail-actions.service';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
export var poPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    }
};
/**
 * @description
 *
 * O `po-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-detail` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi.
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicDetailComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicDetailMetadata](/documentation/po-page-dynamic-detail#po-page-dynamic-detail-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Detail',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=detail&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-detail-user" title="PO Page Dynamic Detail User">
 *  <file name="sample-po-page-dynamic-detail-user/sample-po-page-dynamic-detail-user.component.html"> </file>
 *  <file name="sample-po-page-dynamic-detail-user/sample-po-page-dynamic-detail-user.component.ts"> </file>
 * </example>
 */
var PoPageDynamicDetailComponent = /** @class */ (function () {
    function PoPageDynamicDetailComponent(router, activatedRoute, poNotification, poDialogService, poPageDynamicService, poPageDynamicDetailActionsService, poPageCustomizationService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageDynamicDetailActionsService = poPageDynamicDetailActionsService;
        this.poPageCustomizationService = poPageCustomizationService;
        this.subscriptions = [];
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = __assign(__assign({}, poPageDynamicDetailLiteralsDefault[util.poLocaleDefault]), poPageDynamicDetailLiteralsDefault[util.browserLanguage()]);
        this.model = {};
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
    }
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "actions", {
        get: function () {
            return __assign({}, this._actions);
        },
        /**
         * @optional
         *
         * @description
         *
         * Define as ações da página de acordo com a interface `PoPageDynamicDetailActions`.
         */
        set: function (value) {
            this._actions = this.isObject(value) ? value : {};
            this._pageActions = this.getPageActions(this._actions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "autoRouter", {
        get: function () {
            return this._autoRouter;
        },
        /**
         * @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
         *
         * @optional
         *
         * @description
         *
         * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
         * estejam definidas nas ações.
         *
         * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
         *
         * @default false
         */
        set: function (value) {
            this._autoRouter = util.convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        /** Lista dos campos exibidos na página. */
        set: function (value) {
            this._fields = Array.isArray(value) ? __spread(value) : [];
            this._keys = this.getKeysByFields(this.fields);
            this._duplicates = this.getDuplicatesByFields(this.fields);
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicDetailComponent.prototype.ngOnInit = function () {
        this.loadDataFromAPI();
    };
    PoPageDynamicDetailComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        }
    };
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "duplicates", {
        get: function () {
            return __spread(this._duplicates);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "keys", {
        get: function () {
            return __spread(this._keys);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicDetailComponent.prototype, "pageActions", {
        get: function () {
            return __spread(this._pageActions);
        },
        enumerable: true,
        configurable: true
    });
    PoPageDynamicDetailComponent.prototype.remove = function (actionRemove, actionBeforeRemove) {
        var _this = this;
        var uniqueKey = this.formatUniqueKey(this.model);
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeRemove(actionBeforeRemove, uniqueKey, __assign({}, this.model))
            .pipe(switchMap(function (beforeRemoveResult) {
            var _a, _b;
            var newRemoveAction = (_a = beforeRemoveResult === null || beforeRemoveResult === void 0 ? void 0 : beforeRemoveResult.newUrl) !== null && _a !== void 0 ? _a : actionRemove;
            var allowAction = (_b = beforeRemoveResult === null || beforeRemoveResult === void 0 ? void 0 : beforeRemoveResult.allowAction) !== null && _b !== void 0 ? _b : true;
            if (!allowAction) {
                return of({});
            }
            if (typeof newRemoveAction === 'string') {
                return _this.executeRemove(newRemoveAction, uniqueKey);
            }
            else {
                newRemoveAction(uniqueKey, __assign({}, _this.model));
                return EMPTY;
            }
        }))
            .subscribe());
    };
    PoPageDynamicDetailComponent.prototype.confirmRemove = function (actionRemove, actionBeforeRemove) {
        var confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, actionRemove, actionBeforeRemove)
        };
        this.poDialogService.confirm(confirmOptions);
    };
    PoPageDynamicDetailComponent.prototype.executeRemove = function (path, uniqueKey) {
        var _this = this;
        return this.poPageDynamicService.deleteResource(uniqueKey).pipe(map(function () {
            _this.poNotification.success(_this.literals.removeNotificationSuccess);
            _this.navigateTo({ path: path });
        }));
    };
    PoPageDynamicDetailComponent.prototype.formatUniqueKey = function (item) {
        var keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    };
    PoPageDynamicDetailComponent.prototype.goBack = function (actionBack) {
        var _this = this;
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeBack(this.actions.beforeBack)
            .subscribe(function (beforeBackResult) {
            return _this.executeBackAction(actionBack, beforeBackResult === null || beforeBackResult === void 0 ? void 0 : beforeBackResult.allowAction, beforeBackResult === null || beforeBackResult === void 0 ? void 0 : beforeBackResult.newUrl);
        }));
    };
    PoPageDynamicDetailComponent.prototype.executeBackAction = function (actionBack, allowAction, newUrl) {
        var isAllowedAction = typeof allowAction === 'boolean' ? allowAction : true;
        if (isAllowedAction) {
            if (actionBack === undefined || typeof actionBack === 'boolean') {
                return window.history.back();
            }
            if (typeof actionBack === 'string' || newUrl) {
                return this.router.navigate([newUrl || actionBack]);
            }
            return actionBack();
        }
    };
    PoPageDynamicDetailComponent.prototype.loadData = function (id) {
        var _this = this;
        return this.poPageDynamicService.getResource(id).pipe(tap(function (response) {
            if (!response) {
                _this.setUndefinedToModelAndActions();
            }
            else {
                _this.model = response;
            }
        }), catchError(function (error) {
            _this.setUndefinedToModelAndActions();
            return throwError(error);
        }));
    };
    PoPageDynamicDetailComponent.prototype.setUndefinedToModelAndActions = function () {
        this.model = undefined;
        this.actions = undefined;
    };
    PoPageDynamicDetailComponent.prototype.getMetadata = function (serviceApiFromRoute, onLoad) {
        var _this = this;
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata('detail').pipe(tap(function (response) {
                _this.autoRouter = response.autoRouter || _this.autoRouter;
                _this.actions = response.actions || _this.actions;
                _this.breadcrumb = response.breadcrumb || _this.breadcrumb;
                _this.fields = response.fields || _this.fields;
                _this.title = response.title || _this.title;
            }), switchMap(function () { return _this.loadOptionsOnInitialize(onLoad); }));
        }
        return this.loadOptionsOnInitialize(onLoad);
    };
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    PoPageDynamicDetailComponent.prototype.navigateTo = function (route, forceStopAutoRouter) {
        var _this = this;
        if (forceStopAutoRouter === void 0) { forceStopAutoRouter = false; }
        this.router.navigate([route.url || route.path], { queryParams: route.params }).catch(function () {
            if (forceStopAutoRouter || !_this.autoRouter) {
                return;
            }
            _this.router.config.unshift({
                path: route.path,
                component: route.component,
                data: { serviceApi: _this.serviceApi, autoRouter: true }
            });
            _this.navigateTo(route, true);
        });
    };
    PoPageDynamicDetailComponent.prototype.openEdit = function (action) {
        var _this = this;
        var id = this.formatUniqueKey(this.model);
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeEdit(this.actions.beforeEdit, id, this.model)
            .pipe(switchMap(function (beforeEditResult) {
            return _this.executeEditAction(action, beforeEditResult, id);
        }))
            .subscribe());
    };
    PoPageDynamicDetailComponent.prototype.executeEditAction = function (action, beforeEditResult, id) {
        var _a, _b;
        var newEditAction = (_a = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.newUrl) !== null && _a !== void 0 ? _a : action;
        var allowAction = (_b = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.allowAction) !== null && _b !== void 0 ? _b : true;
        if (!allowAction) {
            return of({});
        }
        if (typeof newEditAction === 'string') {
            this.openEditUrl(newEditAction);
        }
        else {
            newEditAction(id, __assign({}, this.model));
        }
        return EMPTY;
    };
    PoPageDynamicDetailComponent.prototype.openEditUrl = function (path) {
        var url = this.resolveUrl(this.model, path);
        this.navigateTo({ path: path, url: url });
    };
    PoPageDynamicDetailComponent.prototype.resolveUrl = function (item, path) {
        var uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    };
    PoPageDynamicDetailComponent.prototype.getPageActions = function (actions) {
        if (actions === void 0) { actions = {}; }
        var pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({
                label: this.literals.pageActionRemove,
                action: this.confirmRemove.bind(this, actions.remove, this.actions.beforeRemove)
            });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    };
    PoPageDynamicDetailComponent.prototype.getKeysByFields = function (fields) {
        if (fields === void 0) { fields = []; }
        return fields.filter(function (field) { return field.key === true; }).map(function (field) { return field.property; });
    };
    PoPageDynamicDetailComponent.prototype.getDuplicatesByFields = function (fields) {
        if (fields === void 0) { fields = []; }
        return fields.filter(function (field) { return field.duplicate === true; }).map(function (field) { return field.property; });
    };
    PoPageDynamicDetailComponent.prototype.isObject = function (value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    };
    PoPageDynamicDetailComponent.prototype.loadDataFromAPI = function () {
        var _a = this.activatedRoute.snapshot.data, serviceApiFromRoute = _a.serviceApi, serviceMetadataApi = _a.serviceMetadataApi, serviceLoadApi = _a.serviceLoadApi;
        var id = this.activatedRoute.snapshot.params.id;
        var onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        var metadata$ = this.getMetadata(serviceApiFromRoute, onLoad);
        var data$ = this.loadData(id);
        this.subscriptions.push(concat(metadata$, data$).subscribe());
    };
    PoPageDynamicDetailComponent.prototype.loadOptionsOnInitialize = function (onLoad) {
        var _this = this;
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(function (responsePoOption) {
                return _this.poPageCustomizationService.changeOriginalOptionsToNewOptions(_this, responsePoOption);
            }));
        }
        return EMPTY;
    };
    PoPageDynamicDetailComponent.prototype.getPoDynamicPageOptions = function (onLoad) {
        var originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title
        };
        var pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    };
    PoPageDynamicDetailComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: PoNotificationService },
        { type: PoDialogService },
        { type: PoPageDynamicService },
        { type: PoPageDynamicDetailActionsService },
        { type: PoPageCustomizationService }
    ]; };
    __decorate([
        Input('p-actions'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PoPageDynamicDetailComponent.prototype, "actions", null);
    __decorate([
        Input('p-auto-router'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PoPageDynamicDetailComponent.prototype, "autoRouter", null);
    __decorate([
        Input('p-breadcrumb'),
        __metadata("design:type", Object)
    ], PoPageDynamicDetailComponent.prototype, "breadcrumb", void 0);
    __decorate([
        Input('p-fields'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], PoPageDynamicDetailComponent.prototype, "fields", null);
    __decorate([
        Input('p-load'),
        __metadata("design:type", Object)
    ], PoPageDynamicDetailComponent.prototype, "onLoad", void 0);
    __decorate([
        Input('p-title'),
        __metadata("design:type", String)
    ], PoPageDynamicDetailComponent.prototype, "title", void 0);
    __decorate([
        Input('p-service-api'),
        __metadata("design:type", String)
    ], PoPageDynamicDetailComponent.prototype, "serviceApi", void 0);
    PoPageDynamicDetailComponent = __decorate([
        Component({
            selector: 'po-page-dynamic-detail',
            template: "<po-page-default [p-actions]=\"pageActions\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\"> </ng-container>\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n  <po-dynamic-view [p-fields]=\"fields\" [p-value]=\"model\"> </po-dynamic-view>\n</ng-template>\n",
            providers: [PoPageDynamicService, PoPageDynamicDetailActionsService]
        }),
        __metadata("design:paramtypes", [Router,
            ActivatedRoute,
            PoNotificationService,
            PoDialogService,
            PoPageDynamicService,
            PoPageDynamicDetailActionsService,
            PoPageCustomizationService])
    ], PoPageDynamicDetailComponent);
    return PoPageDynamicDetailComponent;
}());
export { PoPageDynamicDetailComponent };
//# sourceMappingURL=data:application/json;base64,