import { __assign, __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';
import { merge, of, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { PoLanguageService, PoNotificationService } from '@po-ui/ng-components';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@po-ui/ng-components";
export var poPageDynamicLiterals = {
    en: {
        errorRenderPage: 'Error loading page',
        notPossibleLoadMetadataPage: 'The page metadata could not be loaded'
    },
    es: {
        errorRenderPage: 'Error al cargar la página',
        notPossibleLoadMetadataPage: 'No se pudieron cargar los metadatos de la página.'
    },
    pt: {
        errorRenderPage: 'Erro ao carregar a página',
        notPossibleLoadMetadataPage: 'Não foi possível carregar os metadados da página'
    },
    ru: {
        errorRenderPage: 'Ошибка загрузки страницы',
        notPossibleLoadMetadataPage: 'Не удалось загрузить метаданные страницы'
    }
};
var PoPageDynamicService = /** @class */ (function () {
    function PoPageDynamicService(http, notification, languageService) {
        this.http = http;
        this.notification = notification;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
        this.language = languageService.getShortLanguage();
    }
    PoPageDynamicService.prototype.configServiceApi = function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
        this.metadata = config.metadata || this.metadata;
    };
    PoPageDynamicService.prototype.getMetadata = function (type) {
        var _this = this;
        if (type === void 0) { type = 'list'; }
        var key = this.endpoint + "-" + type + "-metadata";
        var cache = JSON.parse(localStorage.getItem(key)) || {};
        var metadataUrlBase = this.metadata || this.endpoint + "/metadata";
        var url = metadataUrlBase + "?type=" + type + "&version=" + (cache.version || '');
        return this.http.get(url).pipe(map(function (response) {
            if (response.version !== undefined && response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return __assign(__assign({}, cache), response);
        }), catchError(function (error) {
            if (Object.keys(cache).length) {
                return of(cache);
            }
            var _a = poPageDynamicLiterals[_this.language], errorRenderPage = _a.errorRenderPage, notPossibleLoadMetadataPage = _a.notPossibleLoadMetadataPage;
            _this.notification.warning(notPossibleLoadMetadataPage);
            return merge(of({ title: errorRenderPage }), throwError(error));
        }));
    };
    // Deleta um único recurso
    PoPageDynamicService.prototype.deleteResource = function (id, endpoint) {
        return this.http.delete(this.getLocalEndPoint(endpoint, true) + "/" + id, { headers: this.headers });
    };
    // Deleta recursos em lote
    PoPageDynamicService.prototype.deleteResources = function (ids, endpoint) {
        return this.http.request('delete', "" + this.getLocalEndPoint(endpoint), { headers: this.headers, body: ids });
    };
    // Busca uma lista de recursos
    PoPageDynamicService.prototype.getResources = function (params, endpoint) {
        return this.http.get(this.getLocalEndPoint(endpoint), { headers: this.headers, params: params });
    };
    // Busca um único recurso
    PoPageDynamicService.prototype.getResource = function (id, endpoint) {
        return this.http.get(this.getLocalEndPoint(endpoint, true) + "/" + id, { headers: this.headers });
    };
    // Cria um recurso
    PoPageDynamicService.prototype.createResource = function (resource, endpoint) {
        return this.http.post("" + this.getLocalEndPoint(endpoint), resource, { headers: this.headers });
    };
    // Atualiza um recurso
    PoPageDynamicService.prototype.updateResource = function (id, resource, endpoint) {
        return this.http.put(this.getLocalEndPoint(endpoint, true) + "/" + id, resource, { headers: this.headers });
    };
    PoPageDynamicService.prototype.getLocalEndPoint = function (endpoint, checkSingleBar) {
        if (checkSingleBar === void 0) { checkSingleBar = false; }
        endpoint = endpoint !== null && endpoint !== void 0 ? endpoint : this.endpoint;
        if (checkSingleBar) {
            endpoint = endpoint === '/' ? '' : endpoint;
        }
        return endpoint;
    };
    PoPageDynamicService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: PoNotificationService },
        { type: PoLanguageService }
    ]; };
    PoPageDynamicService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoPageDynamicService_Factory() { return new PoPageDynamicService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PoNotificationService), i0.ɵɵinject(i2.PoLanguageService)); }, token: PoPageDynamicService, providedIn: "root" });
    PoPageDynamicService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [HttpClient,
            PoNotificationService,
            PoLanguageService])
    ], PoPageDynamicService);
    return PoPageDynamicService;
}());
export { PoPageDynamicService };
//# sourceMappingURL=data:application/json;base64,