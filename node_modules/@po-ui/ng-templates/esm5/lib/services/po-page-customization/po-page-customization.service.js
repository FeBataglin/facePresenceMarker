import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var PoPageCustomizationService = /** @class */ (function () {
    function PoPageCustomizationService(http) {
        this.http = http;
    }
    PoPageCustomizationService.prototype.getCustomOptions = function (origin, originalOption, optionSchema) {
        var _this = this;
        return this.createObservable(origin).pipe(map(function (newPageOptions) { return _this.mergePageOptions(originalOption, newPageOptions, optionSchema); }));
    };
    PoPageCustomizationService.prototype.changeOriginalOptionsToNewOptions = function (objectToChange, newOptions) {
        Object.keys(newOptions).forEach(function (key) {
            var value = newOptions[key];
            if (objectToChange[key] !== undefined) {
                if (Array.isArray(value)) {
                    objectToChange[key] = __spread(value);
                    return;
                }
                if (typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean') {
                    objectToChange[key] = value;
                    return;
                }
                if (value !== null && typeof value === 'object') {
                    objectToChange[key] = __assign({}, value);
                }
            }
        });
    };
    PoPageCustomizationService.prototype.createObservable = function (origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    };
    PoPageCustomizationService.prototype.mergePageOptions = function (originalOption, newPageOptions, optionSchema) {
        var _this = this;
        var mergePageOptions = optionSchema.schema.reduce(function (objWithNewProp, prop) {
            var _a;
            return (__assign(__assign({}, objWithNewProp), (_a = {}, _a[prop.nameProp] = _this.createNewProp(prop, originalOption, newPageOptions), _a)));
        }, {});
        Object.keys(mergePageOptions).forEach(function (key) { return mergePageOptions[key] === undefined && delete mergePageOptions[key]; });
        return mergePageOptions;
    };
    PoPageCustomizationService.prototype.createNewProp = function (prop, originalOption, newPageOptions) {
        var _a;
        if (prop.merge) {
            return this.mergeOptions(originalOption[prop.nameProp], newPageOptions[prop.nameProp], prop.keyForMerge);
        }
        else {
            return (_a = newPageOptions[prop.nameProp]) !== null && _a !== void 0 ? _a : originalOption[prop.nameProp];
        }
    };
    PoPageCustomizationService.prototype.mergeOptions = function (originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        if (originalOptions instanceof Array && newOptions instanceof Array) {
            return this.mergeOptionsArray(originalOptions, newOptions, filterProp);
        }
        return __assign(__assign({}, originalOptions), newOptions);
    };
    PoPageCustomizationService.prototype.mergeOptionsArray = function (originalOptions, newOptions, filterProp) {
        var deduplicateNewOptions = newOptions.filter(function (newItem) { return !originalOptions.find(function (originalItem) { return originalItem[filterProp] === newItem[filterProp]; }); });
        var mergedOriginalOptions = originalOptions.map(function (originalItem) {
            var newItem = newOptions.find(function (newOptionsItem) { return originalItem[filterProp] === newOptionsItem[filterProp]; }) || originalItem;
            return __assign(__assign({}, originalItem), newItem);
        });
        return __spread(mergedOriginalOptions, deduplicateNewOptions);
    };
    PoPageCustomizationService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoPageCustomizationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoPageCustomizationService_Factory() { return new PoPageCustomizationService(i0.ɵɵinject(i1.HttpClient)); }, token: PoPageCustomizationService, providedIn: "root" });
    PoPageCustomizationService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [HttpClient])
    ], PoPageCustomizationService);
    return PoPageCustomizationService;
}());
export { PoPageCustomizationService };
//# sourceMappingURL=data:application/json;base64,